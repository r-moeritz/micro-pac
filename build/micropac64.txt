Sections:
00: "org0001:801" (801-174D)
01: "org0002:4000" (4000-4900)
02: "org0003:4bf0" (4BF0-4FE8)
03: "org0004:5000" (5000-54C0)


Source: "./src/startup.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Program startup
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         org $0801
                        	     6: 
                        	     7:         ;; BASIC header
00:0801 0B08            	     8:         word nxl,10
00:0803 0A00
00:0805 9E              	     9:         byte $9e
00:0806 32303631        	    10:         string "2061"
00:080A 00
00:080B 0000            	    11: nxl:    word 0
                        	    12: 
                        	    13:         ;; Program initialization
00:080D 203009          	    14:         jsr initvic
00:0810 205D09          	    15:         jsr fillcolmem
00:0813 200A0C          	    16:         jsr initsprt
00:0816 20760F          	    17:         jsr newgame
00:0819 20630C          	    18:         jsr setupirq
00:081C 20890D          	    19:         jsr setupnmi
00:081F 4C9E0F          	    20:         jmp gameloop
                        	    21: 
                        	    22:         ;; Include program modules
                        	    23:         include macros.asm

Source: "macros.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; General purpose macros
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5: 
                        	     6:         ;; Maths
                        	     7:         ;; ------------------------------------------------------------
                        	     8:         
                        	     9:         ;; Multiply value in .A by 8, ignore C flag
                        	    10:         ;; Reads:       .A
                        	    11:         ;; Writes:      .A
                        	    12: mula8:  macro
                        	    13:         clc
                        	    14:         asl
                        	    15:         asl
                        	    16:         asl
                        	    17:         endm
                        	    18:         
                        	    19:         ;; Divide value in .A by 8, ignore C flag
                        	    20:         ;; Reads:       .A
                        	    21:         ;; Writes:      .A      
                        	    22: diva8:  macro
                        	    23:         sec
                        	    24:         lsr
                        	    25:         lsr
                        	    26:         lsr
                        	    27:         endm
                        	    28: 
                        	    29:         ;; Add immediate value to byte and store
                        	    30: adcbimm: macro val, byt
                        	    31:         clc
                        	    32:         lda \byt
                        	    33:         adc #\val
                        	    34:         sta \byt
                        	    35:         endm
                        	    36: 
                        	    37:         ;; Subtract immediate value from byte and store
                        	    38: sbcbimm: macro val, byt
                        	    39:         sec
                        	    40:         lda \byt
                        	    41:         sbc #\val
                        	    42:         sta \byt
                        	    43:         endm
                        	    44: 
                        	    45:         ;; Add immediate word value to word and store
                        	    46: adcwimm: macro val, wrd
                        	    47:         clc
                        	    48:         lda \wrd
                        	    49:         adc #<\val
                        	    50:         sta \wrd
                        	    51:         lda \wrd+1
                        	    52:         adc #>\val
                        	    53:         sta \wrd+1
                        	    54:         endm
                        	    55: 
                        	    56:         ;; Subtract immediate word value from word and store
                        	    57: sbcwimm: macro val, wrd
                        	    58:         sec
                        	    59:         lda \wrd
                        	    60:         sbc #<\val
                        	    61:         sta \wrd
                        	    62:         lda \wrd+1
                        	    63:         sbc #>\val
                        	    64:         sta \wrd+1
                        	    65:         endm
                        	    66:         
                        	    67:         ;; Conditional jumps
                        	    68:         ;; ------------------------------------------------------------
                        	    69: 
                        	    70:         ;; BNE to distant address
                        	    71: jne:    macro adr
                        	    72:         beq :+
                        	    73:         jmp \adr
                        	    74: :
                        	    75:         endm
                        	    76: 
                        	    77:         ;; BEQ to distant address
                        	    78: jeq:    macro adr
                        	    79:         bne :+
                        	    80:         jmp \adr
                        	    81: :
                        	    82:         endm
                        	    83: 
                        	    84:         ;; BCS to distant address
                        	    85: jcs:    macro adr
                        	    86:         bcc :+
                        	    87:         jmp \adr
                        	    88: :
                        	    89:         endm
                        	    90: 
                        	    91:         ;; BCC to distant address
                        	    92: jcc:    macro adr
                        	    93:         bcs :+
                        	    94:         jmp \adr
                        	    95: :
                        	    96:         endm
                        	    97: 
                        	    98:         ;; BMI to distant address
                        	    99: jmi:    macro adr
                        	   100:         bpl :+
                        	   101:         jmp \adr
                        	   102: :
                        	   103:         endm
                        	   104:         
                        	   105:         ;; Stack operations
                        	   106:         ;; ------------------------------------------------------------
                        	   107: 
                        	   108:         ;; Push .X onto the stack
                        	   109: phx:    macro
                        	   110:         txa
                        	   111:         pha
                        	   112:         endm
                        	   113: 
                        	   114:         ;; Pop the top byte off the stack onto .X
                        	   115: plx:    macro
                        	   116:         pla
                        	   117:         tax
                        	   118:         endm
                        	   119: 
                        	   120:         ;; Push .Y onto the stack
                        	   121: phy:    macro
                        	   122:         tya
                        	   123:         pha
                        	   124:         endm
                        	   125: 
                        	   126:         ;; Pop the top byte off the stack onto .Y
                        	   127: ply:    macro
                        	   128:         pla
                        	   129:         tay
                        	   130:         endm
                        	   131: 
                        	   132:         ;; Memory operations
                        	   133:         ;; ------------------------------------------------------------
                        	   134: 
                        	   135:         ;; Swap bytes via the stack
                        	   136: swpbyt: macro byt1, byt2
                        	   137:         lda \byt1
                        	   138:         pha                     ;load byt1 & push onto the stack
                        	   139:         lda \byt2
                        	   140:         sta \byt1               ;load byt2 & save to byt1
                        	   141:         pla
                        	   142:         sta \byt2               ;pop byt1 off the stack & save to byt2
                        	   143:         endm
                        	   144:         
                        	   145:         ;; Load immediate value into byte
                        	   146: ldbimm: macro val, byt
                        	   147:         lda #\val
                        	   148:         sta \byt
                        	   149:         endm
                        	   150:         
                        	   151:         ;; Load immediate value into word
                        	   152: ldwimm: macro val, wrd
                        	   153:         lda #<\val
                        	   154:         sta \wrd
                        	   155:         lda #>\val
                        	   156:         sta \wrd+1
                        	   157:         endm
                        	   158: 
                        	   159:         ;; Load value into byte via pointer at index
                        	   160: ldbptr: macro ptr, idx, byt
                        	   161:         ldy #\idx
                        	   162:         lda (\ptr),y
                        	   163:         sta \byt
                        	   164:         endm
                        	   165:         
                        	   166:         ;; Load value into word via pointer at index
                        	   167: ldwptr: macro ptr, idx, wrd
                        	   168:         ldy #\idx
                        	   169:         lda (\ptr),y
                        	   170:         sta \wrd
                        	   171:         iny
                        	   172:         lda (\ptr),y
                        	   173:         sta \wrd+1
                        	   174:         endm
                        	   175: 
                        	   176:         ;; Copy value from one byte to another
                        	   177: cpbyt:  macro src, dst
                        	   178:         lda \src
                        	   179:         sta \dst
                        	   180:         endm
                        	   181: 
                        	   182:         ;; Copy value from one word to another
                        	   183: cpwrd:  macro src, dst
                        	   184:         lda \src
                        	   185:         sta \dst
                        	   186:         lda \src+1
                        	   187:         sta \dst+1
                        	   188:         endm
                        	   189: 
                        	   190:         ;; Increment pointer using X-based, indirect adressing to ensure
                        	   191:         ;; HB is updated along with LB.
                        	   192: incptrx: macro ptr
                        	   193:         clc
                        	   194:         lda \ptr,x
                        	   195:         adc #1
                        	   196:         sta \ptr,x
                        	   197:         inx
                        	   198:         lda \ptr,x
                        	   199:         adc #0
                        	   200:         sta \ptr,x
                        	   201:         dex
                        	   202:         endm
                        	   203: 
                        	   204:         ;; Increment word to ensure HB is updated along with LB.
                        	   205: incwrd: macro wrd
                        	   206:         clc
                        	   207:         lda \wrd
                        	   208:         adc #1
                        	   209:         sta \wrd
                        	   210:         lda \wrd+1
                        	   211:         adc #0
                        	   212:         sta \wrd+1
                        	   213:         endm
                        	   214: 
                        	   215:         ;; Increment accumulator
                        	   216: ina:    macro
                        	   217:         tay
                        	   218:         iny
                        	   219:         tya
                        	   220:         endm
                        	   221: 
                        	   222:         ;; Decrement accumulator
                        	   223: dea:    macro
                        	   224:         tay
                        	   225:         dey
                        	   226:         tya
                        	   227:         endm
                        	   228: 

Source: "./src/startup.asm"
                        	    24:         include symbols.asm

Source: "symbols.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Symbol definitions
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         
                        	     6:         ;; Zero page memory locations
                        	     7:         ;; ------------------------------------------------------------
                        	     8: 
                        	     9:         ;; 15-byte buffer for use in sub-routines,
                        	    10:         ;; divided into 3x blocks of 5 bytes each.
                        	    11: buf:            equ $16         ;$16-$24
                        	    12:         
                        	    13:         ;; Block for game loop
                        	    14: wrd1:           equ buf
                        	    15: wrd2:           equ buf+$02
                        	    16: tmp:            equ buf+$04
                        	    17:         
                        	    18:         ;; Block for IRQ handler
                        	    19: irqwrd1:        equ buf+$05
                        	    20: irqwrd2:        equ buf+$07
                        	    21: irqtmp:         equ buf+$09
                        	    22:         
                        	    23:         ;; Block for NMI handler
                        	    24: nmiwrd1:        equ buf+$0a
                        	    25: nmiwrd2:        equ buf+$0c
                        	    26: nmitmp:         equ buf+$0e
                        	    27: 
                        	    28:         ;; Joystick data
                        	    29: joybtn:         equ $92         ;button value
                        	    30: joyx:           equ $96         ;x axis value
                        	    31: joyy:           equ $9b         ;y axis value
                        	    32: 
                        	    33:         ;; Pac-Man data
                        	    34: pacsrc:         equ $9e         ;source node
                        	    35: pactar:         equ $9f         ;target node
                        	    36: pacdir:         equ $a3         ;facing direction
                        	    37: pacnxd:         equ $a4         ;next direction
                        	    38: pacdis:         equ $a5         ;distance to target
                        	    39: pacrem:         equ $a6         ;distance remaining to target
                        	    40: 
                        	    41:         ;; Scoring, gameplay
                        	    42: npelrem:        equ $a7          ;number of pellets remaining
                        	    43: nmenrem:        equ $a8          ;number of remaining "men"
                        	    44: lvlnum:         equ $a9          ;level number
                        	    45: score:          equ $f7          ;player's score in BCD (4 bytes: $f7-$fa)
                        	    46: frtena:         equ $fb          ;whether or not fruit is enabled
                        	    47: 
                        	    48:         ;; Animation
                        	    49: pacaix:         equ $fc          ;Pac-Man animation frame index
                        	    50: enzraix:        equ $fd          ;energizer animation frame index
                        	    51: 
                        	    52:         ;; Still available: $fe
                        	    53:         
                        	    54:         ;; Memory-mapped hardware registers
                        	    55:         ;; ------------------------------------------------------------
                        	    56:         
                        	    57:         ;; VIC II registers
                        	    58: vic:            equ $d000
                        	    59: sp0x:           equ vic
                        	    60: sp0y:           equ vic + $01
                        	    61: sp1x:           equ vic + $02
                        	    62: sp1y:           equ vic + $03
                        	    63: sp2x:           equ vic + $04
                        	    64: sp2y:           equ vic + $05
                        	    65: sp3x:           equ vic + $06
                        	    66: sp3y:           equ vic + $07
                        	    67: sp4x:           equ vic + $08
                        	    68: sp4y:           equ vic + $09
                        	    69: sp5x:           equ vic + $0a
                        	    70: sp5y:           equ vic + $0b
                        	    71: sp6x:           equ vic + $0c
                        	    72: sp6y:           equ vic + $0d
                        	    73: sp7x:           equ vic + $0e
                        	    74: sp7y:           equ vic + $0f
                        	    75: scroly:         equ vic + $11
                        	    76: raster:         equ vic + $12
                        	    77: spena:          equ vic + $15
                        	    78: vmcsb:          equ vic + $18
                        	    79: vicirq:         equ vic + $19
                        	    80: irqmsk:         equ vic + $1a
                        	    81: spspcl:         equ vic + $1e
                        	    82: spbgcl:         equ vic + $1f
                        	    83: extcol:         equ vic + $20
                        	    84: bgcol0:         equ vic + $21
                        	    85: sp0col:         equ vic + $27
                        	    86: 
                        	    87:         ;; CIA1 registers
                        	    88: cia1:           equ $dc00
                        	    89: ci1pra:         equ cia1
                        	    90: ci1icr:         equ cia1 + $0d
                        	    91: 
                        	    92:         ;; CIA2 registers
                        	    93: cia2:           equ $dd00
                        	    94: ci2pra:         equ cia2
                        	    95: c2ddra:         equ cia2 + $02
                        	    96: ti2a:           equ cia2 + $04
                        	    97: ti2b:           equ cia2 + $06
                        	    98: ci2icr:         equ cia2 + $0d
                        	    99: ci2cra:         equ cia2 + $0e
                        	   100: ci2crb:         equ cia2 + $0f
                        	   101: 
                        	   102: 
                        	   103:         ;; Operating system memory locations
                        	   104:         ;; ------------------------------------------------------------
                        	   105:         
                        	   106:         ;; Interrupt vectors
                        	   107: cinv:           equ $0314       ;IRQ vector
                        	   108: nminv:          equ $0318       ;NMI vector
                        	   109: 
                        	   110:         ;; Interrupt routines
                        	   111: sysirq:         equ $ea7e       ;kernal IRQ handler
                        	   112: sysnmi:         equ $fe56       ;kernal NMI handler
                        	   113: 
                        	   114: 
                        	   115:         ;; Program memory locations
                        	   116:         ;; ------------------------------------------------------------
                        	   117:         
                        	   118: charset:        equ $4000       ;character set definition
                        	   119: coltab:         equ $4800       ;colour table
                        	   120: mazegfx:        equ $4bf0       ;Pac-Man maze
                        	   121: scnmem:         equ $4c00       ;screen memory
                        	   122: colmem:         equ $d800       ;colour memory
                        	   123: sp0mem:         equ $5000       ;sprite 0 address
                        	   124: sp0ptr:         equ $4ff8       ;sprite 0 pointer
                        	   125: sp0loc:         equ $1000/$40   ;sp0mem
                        	   126: 
                        	   127: 
                        	   128:         ;; Constants
                        	   129:         ;; ------------------------------------------------------------
                        	   130: 
                        	   131:         ;; Misc.
                        	   132: raslin:         equ 250         ;line for raster interrupt
                        	   133: spxscog:        equ 24          ;sprite x screen origin
                        	   134: spyscog:        equ 50          ;sprite y screen origin
                        	   135: maxpell:        equ 182         ;maximum number of pellets (incl. energizers)
                        	   136: maxmen:         equ 3           ;maximum number of "men"
                        	   137: 
                        	   138:         ;; Fruit
                        	   139: frxpos:        equ $67          ;fruit x loc
                        	   140: frypos:        equ $a2          ;fruit y loc
                        	   141: frttim:        equ 38           ;fruit timer: 39 x 240ms = 9.1s
                        	   142: 
                        	   143:         ;; Screen memory indexes
                        	   144: scrmsdi:        equ $185        ;most significant digit of score
                        	   145:         
                        	   146:         ;; Node indexes
                        	   147: wrpnixw:        equ $1b         ;western warp tunnel node index
                        	   148: wrpnixe:        equ $21         ;eastern warp tunnel node index
                        	   149: pacstnd:        equ $31         ;Pac-Man's starting node index        
                        	   150: gsthmnd:        equ $1e         ;ghost home node        
                        	   151: 
                        	   152:         ;; Character constants
                        	   153: spcechr:        equ $20         ;space char
                        	   154: pellchr:        equ $53         ;pellet char
                        	   155: enzrchr:        equ $54         ;energizer char
                        	   156: 
                        	   157:         ;; Colour constants
                        	   158: dkgrey:         equ $0b         ;dark grey
                        	   159: ltgrey:         equ $0f         ;light grey
                        	   160:         
                        	   161:         ;; Compass directions
                        	   162: n:              equ 2
                        	   163: s:              equ 3
                        	   164: w:              equ 4
                        	   165: e:              equ 5
                        	   166: 
                        	   167:         ;; Scores, expressed as BCD pairs
                        	   168: pellpts:        equ $10        ;10 pts for pellets
                        	   169: enzrpts:        equ $50        ;50 pts for energizers
                        	   170: 
                        	   171:         ;; Index into buf to access memory block
                        	   172:         ;; reservedf for gameloop
                        	   173: blki:           equ $00
                        	   174:         
                        	   175:         ;; Index into buf to access memory block
                        	   176:         ;; reserved for IRQ handler
                        	   177: irqblki:        equ $05
                        	   178: 
                        	   179:         ;; Index into buf to access memory block
                        	   180:         ;; reserved for NMI handler
                        	   181: nmiblki:        equ $0a
                        	   182: 
                        	   183:         ;; The number of pellets that need to be eaten for bonus items
                        	   184:         ;; to appear the 1st and 2nd time
                        	   185: nbonpel1:     equ 52
                        	   186: nbonpel2:     equ 127
                        	   187: 

Source: "./src/startup.asm"
                        	    25:         include maths.asm

Source: "maths.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maths sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Multiply by 5
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (multiplicand)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
00:0822 E8              	    12: mula5:  inx
00:0823 E8              	    13:         inx
00:0824 9516            	    14:         sta buf,x               ;stash original .A in wrd2 (lo)
00:0826 18              	    15:         clc
00:0827 0A              	    16:         asl                     ;multiply by 2
00:0828 A8              	    17:         tay                     ;stash product in .Y
00:0829 A900            	    18:         lda #0
00:082B 2A              	    19:         rol
00:082C E8              	    20:         inx
00:082D 9516            	    21:         sta buf,x               ;stash .C in wrd2 (hi)
00:082F 98              	    22:         tya                     ;restore product from .Y
00:0830 0A              	    23:         asl                     ;multiply by 2
00:0831 A8              	    24:         tay                     ;stash product in .Y
00:0832 B516            	    25:         lda buf,x               
00:0834 2A              	    26:         rol                     ;restore .C from wrd2 (hi)
00:0835 CA              	    27:         dex
00:0836 CA              	    28:         dex
00:0837 9516            	    29:         sta buf,x               ;write hi byte to wrd1 (hi)
00:0839 98              	    30:         tya                     ;restore product from .Y
00:083A E8              	    31:         inx
00:083B 7516            	    32:         adc buf,x               ;add original .A value
00:083D CA              	    33:         dex
00:083E CA              	    34:         dex
00:083F 9516            	    35:         sta buf,x               ;write lo byte to wrd1 (lo)
00:0841 A900            	    36:         lda #0
00:0843 2A              	    37:         rol
00:0844 E8              	    38:         inx
00:0845 7516            	    39:         adc buf,x               ;add .C to hi byte
00:0847 9516            	    40:         sta buf,x               ;and write to wrd1 (hi)
00:0849 CA              	    41:         dex
00:084A 60              	    42:         rts
                        	    43:         
                        	    44:         ;; Multiply by 6
                        	    45:         ;; Reads:
                        	    46:         ;;  - .A (multiplicand)
                        	    47:         ;;  - .X (offset to memory block in buf)
                        	    48:         ;; Writes:
                        	    49:         ;;  - Result is stored in 1st word of memory block
                        	    50:         ;;  - 2nd word of memory block is used as a work area        
00:084B E8              	    51: mula6:  inx
00:084C E8              	    52:         inx
00:084D 9516            	    53:         sta buf,x
00:084F 18              	    54:         clc
00:0850 0A              	    55:         asl
00:0851 A8              	    56:         tay
00:0852 A900            	    57:         lda #0
00:0854 2A              	    58:         rol
00:0855 E8              	    59:         inx
00:0856 9516            	    60:         sta buf,x
00:0858 98              	    61:         tya
00:0859 0A              	    62:         asl
00:085A A8              	    63:         tay
00:085B B516            	    64:         lda buf,x
00:085D 2A              	    65:         rol
00:085E CA              	    66:         dex
00:085F CA              	    67:         dex
00:0860 9516            	    68:         sta buf,x
00:0862 98              	    69:         tya
00:0863 E8              	    70:         inx
00:0864 7516            	    71:         adc buf,x
00:0866 A8              	    72:         tay
00:0867 A900            	    73:         lda #0
00:0869 2A              	    74:         rol
00:086A CA              	    75:         dex
00:086B 7516            	    76:         adc buf,x
00:086D 9516            	    77:         sta buf,x
00:086F 98              	    78:         tya
00:0870 E8              	    79:         inx
00:0871 7516            	    80:         adc buf,x
00:0873 CA              	    81:         dex
00:0874 CA              	    82:         dex
00:0875 9516            	    83:         sta buf,x
00:0877 A900            	    84:         lda #0
00:0879 2A              	    85:         rol
00:087A E8              	    86:         inx
00:087B 7516            	    87:         adc buf,x
00:087D 9516            	    88:         sta buf,x
00:087F CA              	    89:         dex
00:0880 60              	    90:         rts
                        	    91: 

Source: "./src/startup.asm"
                        	    26:         include io.asm

Source: "io.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; I/O related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Write the player's score to screen memory
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Clobbers .A, .X, and .Y
                        	     8:         ;; Reads:
                        	     9:         ;;  - score
                        	    10:         ;;  - irqwrd1
                        	    11:         ;; Writes:
                        	    12:         ;;  - irqwrd1
                        	    13:         ;;  - irqwrd2
                        	    14:         ;;  - irqtmp
                        	    15: printscr:
                        	    16:         ;; Each of the 4 bytes comprising score contains 2 BCD digits.
                        	    17:         ;; Each digit needs to be extracted and turned into a
                        	    18:         ;; printable character. Then, each digit can be written to
                        	    19:         ;; screen memory using printchr. We skip leading zeroes.
                        	    20:         ldwimm scrmsdi, irqwrd1
00:0881 A985            	     1M         lda #<scrmsdi
00:0883 851B            	     2M         sta irqwrd1
00:0885 A901            	     3M         lda #>scrmsdi
00:0887 851C            	     4M         sta irqwrd1+1
                        	    21:         cpwrd irqwrd1, irqwrd2
00:0889 A51B            	     1M         lda irqwrd1
00:088B 851D            	     2M         sta irqwrd2
00:088D A51C            	     3M         lda irqwrd1+1
00:088F 851E            	     4M         sta irqwrd2+1
                        	    22:         ldbimm 0, irqtmp
00:0891 A900            	     1M         lda #0
00:0893 851F            	     2M         sta irqtmp
00:0895 A203            	    23:         ldx #3
00:0897 3070            	    24: lpprsc: bmi fiprsc
                        	    25:         ;; print hi-nybble BCD char
00:0899 B5F7            	    26:         lda score,x
00:089B 4A              	    27:         lsr
00:089C 4A              	    28:         lsr
00:089D 4A              	    29:         lsr
00:089E 4A              	    30:         lsr                     ;shift BCD digit into lo-nybble
00:089F F007            	    31:         beq :+
00:08A1 A001            	    32:         ldy #1
00:08A3 841F            	    33:         sty irqtmp
00:08A5 4CAF08          	    34:         jmp :++
00:08A8 A41F            	    35: :       ldy irqtmp
00:08AA D003            	    36:         bne :+
00:08AC 4CBB08          	    37:         jmp :++
00:08AF 0930            	    38: :       ora #%00110000          ;convert to printable char
00:08B1 A8              	    39:         tay                     ;place char in .Y
                        	    40:         phx                     ;save .X onto stack
00:08B2 8A              	     1M         txa
00:08B3 48              	     2M         pha
00:08B4 A205            	    41:         ldx #irqblki            ;load block index into .X
00:08B6 201D09          	    42:         jsr printchr            ;print char
                        	    43:         plx                     ;restore .X from stack
00:08B9 68              	     1M         pla
00:08BA AA              	     2M         tax
                        	    44: :       incwrd irqwrd2
00:08BB 18              	     1M         clc
00:08BC A51D            	     2M         lda irqwrd2
00:08BE 6901            	     3M         adc #1
00:08C0 851D            	     4M         sta irqwrd2
00:08C2 A51E            	     5M         lda irqwrd2+1
00:08C4 6900            	     6M         adc #0
00:08C6 851E            	     7M         sta irqwrd2+1
                        	    45:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08C8 A51D            	     1M         lda irqwrd2
00:08CA 851B            	     2M         sta irqwrd1  
00:08CC A51E            	     3M         lda irqwrd2+1
00:08CE 851C            	     4M         sta irqwrd1  +1
                        	    46:         
                        	    47:         ;; print lo-nybble BCD char
00:08D0 B5F7            	    48: :       lda score,x
00:08D2 290F            	    49:         and #%00001111          ;mask out hi-nybble
00:08D4 F007            	    50:         beq :+
00:08D6 A001            	    51:         ldy #1        
00:08D8 841F            	    52:         sty irqtmp
00:08DA 4CE408          	    53:         jmp :++
00:08DD A41F            	    54: :       ldy irqtmp
00:08DF D003            	    55:         bne :+
00:08E1 4CF008          	    56:         jmp :++
00:08E4 0930            	    57: :       ora #%00110000          ;convert to printable char
00:08E6 A8              	    58:         tay                     ;place char in .Y
                        	    59:         phx                     ;save .X onto stack
00:08E7 8A              	     1M         txa
00:08E8 48              	     2M         pha
00:08E9 A205            	    60:         ldx #irqblki            ;load block index into .X
00:08EB 201D09          	    61:         jsr printchr            ;print char
                        	    62:         plx                     ;restore .X from stack
00:08EE 68              	     1M         pla
00:08EF AA              	     2M         tax
                        	    63: :       incwrd irqwrd2
00:08F0 18              	     1M         clc
00:08F1 A51D            	     2M         lda irqwrd2
00:08F3 6901            	     3M         adc #1
00:08F5 851D            	     4M         sta irqwrd2
00:08F7 A51E            	     5M         lda irqwrd2+1
00:08F9 6900            	     6M         adc #0
00:08FB 851E            	     7M         sta irqwrd2+1
                        	    64:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08FD A51D            	     1M         lda irqwrd2
00:08FF 851B            	     2M         sta irqwrd1  
00:0901 A51E            	     3M         lda irqwrd2+1
00:0903 851C            	     4M         sta irqwrd1  +1
00:0905 CA              	    65:         dex                     ;decrement .X
00:0906 4C9708          	    66:         jmp lpprsc
00:0909 60              	    67: fiprsc: rts
                        	    68:         
                        	    69:         ;; Write value in .Y to colour memory at 16-bit offset
                        	    70:         ;; in memory block.
                        	    71:         ;; Reads:
                        	    72:         ;;  - .Y (value to write to colour memory)
                        	    73:         ;;  - .X (buf offset to access memory block )
                        	    74:         ;;  - 1st word in memory block at offset
                        	    75:         ;; Writes:
                        	    76:         ;;  - 1st word in memory block at offset
                        	    77: printcol:       
00:090A 18              	    78:         clc
00:090B A900            	    79:         lda #<colmem
00:090D 7516            	    80:         adc buf,x
00:090F 9516            	    81:         sta buf,x
00:0911 E8              	    82:         inx                     ;hi-byte
00:0912 A9D8            	    83:         lda #>colmem
00:0914 7516            	    84:         adc buf,x
00:0916 9516            	    85:         sta buf,x
00:0918 CA              	    86:         dex                     ;lo-byte
00:0919 98              	    87:         tya
00:091A 8116            	    88:         sta (buf,x)             ;write to colour memory
00:091C 60              	    89:         rts
                        	    90: 
                        	    91:         ;; Write char in .Y to screen memory at 16-bit offset
                        	    92:         ;; in memory block.
                        	    93:         ;; Reads:
                        	    94:         ;;  - .Y (char to write to screen memory)
                        	    95:         ;;  - .X (buf offset to access memory block )
                        	    96:         ;;  - 1st word in memory block at offset
                        	    97:         ;; Writes:
                        	    98:         ;;  - 1st word in memory block at offset
                        	    99: printchr:
                        	   100:         ;; Write char to screen memory
00:091D 18              	   101:         clc        
00:091E A900            	   102:         lda #<scnmem
00:0920 7516            	   103:         adc buf,x
00:0922 9516            	   104:         sta buf,x
00:0924 E8              	   105:         inx                     ;hi-byte
00:0925 A94C            	   106:         lda #>scnmem
00:0927 7516            	   107:         adc buf,x
00:0929 9516            	   108:         sta buf,x
00:092B CA              	   109:         dex                     ;lo-byte
00:092C 98              	   110:         tya
00:092D 8116            	   111:         sta (buf,x)             ;write to screen memory
00:092F 60              	   112:         rts
                        	   113: 
                        	   114:         ;; Initialize VIC-II
                        	   115:         ;;  - Select 16K video bank
                        	   116:         ;;  - Select screen memory location
                        	   117:         ;;  - Select character memory location
                        	   118:         ;;  - Set border & background colours
                        	   119: initvic:
                        	   120:         ;; select vic bank
00:0930 AD02DD          	   121:         lda c2ddra
00:0933 0903            	   122:         ora #%00000011
00:0935 8D02DD          	   123:         sta c2ddra              ;set bits 0+1 of ci2pra as output bits
00:0938 AD00DD          	   124:         lda ci2pra
00:093B 29FC            	   125:         and #%11111100
00:093D 0902            	   126:         ora #%00000010
00:093F 8D00DD          	   127:         sta ci2pra              ;select vic bank 1: $4000-$7fff
                        	   128: 
                        	   129:         ;; select screen memory loc
00:0942 A90F            	   130:         lda #$0f
00:0944 2D18D0          	   131:         and vmcsb
00:0947 0930            	   132:         ora #$30
00:0949 8D18D0          	   133:         sta vmcsb
                        	   134: 
                        	   135:         ;; select char memory loc
00:094C A9F1            	   136:         lda #$f1
00:094E 2D18D0          	   137:         and vmcsb
00:0951 8D18D0          	   138:         sta vmcsb
                        	   139: 
                        	   140:         ;; set border & background colours
00:0954 A900            	   141:         lda #0
00:0956 8D20D0          	   142:         sta extcol
00:0959 8D21D0          	   143:         sta bgcol0
00:095C 60              	   144:         rts
                        	   145: 
                        	   146:         ;; Fill colour memory from colour table
                        	   147: fillcolmem:
                        	   148:         ;; populate colour memory
00:095D A200            	   149:         ldx #0
                        	   150: setcol1:
00:095F BD004C          	   151:         lda scnmem,x
00:0962 A8              	   152:         tay
00:0963 B90048          	   153:         lda coltab,y
00:0966 9D00D8          	   154:         sta colmem,x
00:0969 E8              	   155:         inx
00:096A E0FA            	   156:         cpx #250
00:096C D0F1            	   157:         bne setcol1
00:096E A200            	   158:         ldx #0
                        	   159: setcol2:
00:0970 BDFA4C          	   160:         lda scnmem+250,x
00:0973 A8              	   161:         tay
00:0974 B90048          	   162:         lda coltab,y
00:0977 9DFAD8          	   163:         sta colmem+250,x
00:097A E8              	   164:         inx
00:097B E0FA            	   165:         cpx #250
00:097D D0F1            	   166:         bne setcol2
00:097F A200            	   167:         ldx #0
                        	   168: setcol3:
00:0981 BDF44D          	   169:         lda scnmem+500,x
00:0984 A8              	   170:         tay
00:0985 B90048          	   171:         lda coltab,y
00:0988 9DF4D9          	   172:         sta colmem+500,x
00:098B E8              	   173:         inx
00:098C E0FA            	   174:         cpx #250
00:098E D0F1            	   175:         bne setcol3
00:0990 A200            	   176:         ldx #0
                        	   177: setcol4:
00:0992 BDEE4E          	   178:         lda scnmem+750,x
00:0995 A8              	   179:         tay
00:0996 B90048          	   180:         lda coltab,y
00:0999 9DEEDA          	   181:         sta colmem+750,x
00:099C E8              	   182:         inx
00:099D E0FA            	   183:         cpx #250
00:099F D0F1            	   184:         bne setcol4
00:09A1 60              	   185:         rts
                        	   186:         
                        	   187:         ;; Read joystick in port 2
                        	   188:         ;; Writes:
                        	   189:         ;;  - joyx = $01: stick moved right
                        	   190:         ;;  - joyx = $ff: stick moved left
                        	   191:         ;;  - joyy = $01: stick moved down
                        	   192:         ;;  - joyy = $ff: stick moved up
                        	   193:         ;;  - joybtn = $01: button pressed
                        	   194: readjoy2:
00:09A2 78              	   195:         sei
00:09A3 AD00DC          	   196:         lda ci1pra
00:09A6 A000            	   197:         ldy #0
00:09A8 A200            	   198:         ldx #0
00:09AA 4A              	   199:         lsr
00:09AB B001            	   200:         bcs djr0
00:09AD 88              	   201:         dey
00:09AE 4A              	   202: djr0:   lsr
00:09AF B001            	   203:         bcs djr1
00:09B1 C8              	   204:         iny
00:09B2 4A              	   205: djr1:   lsr
00:09B3 B001            	   206:         bcs djr2
00:09B5 CA              	   207:         dex
00:09B6 4A              	   208: djr2:   lsr
00:09B7 B001            	   209:         bcs djr3
00:09B9 E8              	   210:         inx
00:09BA 4A              	   211: djr3:   lsr
00:09BB 8696            	   212:         stx joyx
00:09BD 849B            	   213:         sty joyy
00:09BF A900            	   214:         lda #0
00:09C1 2A              	   215:         rol
00:09C2 8592            	   216:         sta joybtn
00:09C4 58              	   217:         cli
00:09C5 60              	   218:         rts
                        	   219: 

Source: "./src/startup.asm"
                        	    27:         include maze.asm

Source: "maze.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maze related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert pellet table index to pellet memory address.
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (pellet table index)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of buf at offset .X
                        	    11:         ;;  - 2nd word of buf at offset .X is used as a work area
                        	    12: pelladr:
00:09C6 202208          	    13:         jsr mula5               ;multiply pellet index by 5
00:09C9 18              	    14:         clc
00:09CA B516            	    15:         lda buf,x               ;load product (lo)
00:09CC 690A            	    16:         adc #<pelltbl           ;add pellet table address (lo)
00:09CE 9516            	    17:         sta buf,x               ;write sum (lo)
00:09D0 E8              	    18:         inx
00:09D1 B516            	    19:         lda buf,x               ;load product (hi)
00:09D3 6913            	    20:         adc #>pelltbl           ;add pellet table address (hi)
00:09D5 9516            	    21:         sta buf,x               ;write sum (hi)
00:09D7 CA              	    22:         dex
00:09D8 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Fill maze with pellets
                        	    26:         ;; May only be called from gameloop!
                        	    27: fillmaze:
                        	    28:         ldbimm 0, tmp           ;store pellet index in tmp
00:09D9 A900            	     1M         lda #0
00:09DB 851A            	     2M         sta tmp           
                        	    29: filloop:
00:09DD A51A            	    30:         lda tmp
00:09DF A200            	    31:         ldx #blki
00:09E1 20C609          	    32:         jsr pelladr             ;get pellet address
00:09E4 A001            	    33:         ldy #1
00:09E6 B116            	    34:         lda (wrd1),y
00:09E8 C9FF            	    35:         cmp #$ff                ;end marker?
00:09EA F029            	    36:         beq finfil              ;yep, we're done
00:09EC A901            	    37:         lda #1
00:09EE A002            	    38:         ldy #2
00:09F0 9116            	    39:         sta (wrd1),y            ;set pellet status        
                        	    40:         ldwptr wrd1, 0, wrd2
00:09F2 A000            	     1M         ldy #0
00:09F4 B116            	     2M         lda (wrd1),y
00:09F6 8518            	     3M         sta wrd2
00:09F8 C8              	     4M         iny
00:09F9 B116            	     5M         lda (wrd1),y
00:09FB 8519            	     6M         sta wrd2+1
00:09FD A204            	    41:         ldx #blki+4
00:09FF 203B0B          	    42:         jsr isenzr              ;is pellet an energizer?
00:0A02 F005            	    43:         beq :+
00:0A04 A053            	    44:         ldy #pellchr            ;no, it's a regular pellet
00:0A06 4C0B0A          	    45:         jmp :++
00:0A09 A054            	    46: :       ldy #enzrchr            ;yes, it's an energizer        
00:0A0B A202            	    47: :       ldx #blki+2
00:0A0D 201D09          	    48:         jsr printchr            ;print pellet char
00:0A10 E61A            	    49:         inc tmp
00:0A12 4CDD09          	    50:         jmp filloop
00:0A15 60              	    51: finfil: rts
                        	    52: 
                        	    53:         ;; Find pellet collided with by searching in the opposite direction
                        	    54:         ;; to which Pac-Man is facing.
                        	    55:         ;; May only be called from IRQ handler!
                        	    56:         ;; Reads:
                        	    57:         ;;  - sp0x, sp0y
                        	    58:         ;;  - pacdir (direction Pac-Man is facing)
                        	    59:         ;; Writes:
                        	    60:         ;;  - irqwrd1: pellet address
                        	    61:         ;;  - irqtmp: pellet index
                        	    62: findpel:
                        	    63:         ;; if pacdir=#w then find 1st pellet in row with x>=sp0x
                        	    64:         ;; if pacdir=#e then find last pellet in row with x<=sp0x
                        	    65:         ;; if pacdir=#n then find pellet in row-1 with x=sp0x
                        	    66:         ;; if pacdir=#s then find pellet in row+1 with x=sp0x
00:0A16 A5A3            	    67:         lda pacdir
00:0A18 C904            	    68:         cmp #w
00:0A1A D033            	    69:         bne fpckde
                        	    70:         cpbyt sp0y, irqtmp
00:0A1C AD01D0          	     1M         lda sp0y
00:0A1F 851F            	     2M         sta irqtmp
00:0A21 201F0B          	    71:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	    72:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A24 A51D            	     1M         lda irqwrd2
00:0A26 851F            	     2M         sta irqtmp   
00:0A28 A205            	    73:         ldx #irqblki
00:0A2A A51F            	    74: :       lda irqtmp              ;load index of west-most pellet in row
00:0A2C 20C609          	    75:         jsr pelladr             ;load pellet address into irqwrd1
00:0A2F A003            	    76:         ldy #3
                        	    77:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A31 AD00D0          	     1M         lda sp0x
00:0A34 851D            	     2M         sta irqwrd2     
00:0A36 C61D            	    78:         dec irqwrd2             ;decrement irqwrd2 (lo) to give some leeway
00:0A38 B11B            	    79:         lda (irqwrd1),y         ;load pellet x loc
00:0A3A C51D            	    80:         cmp irqwrd2
00:0A3C B005            	    81:         bcs :+                  ;pellet x loc >= sp0x?
00:0A3E E61F            	    82:         inc irqtmp              ;no, try next pellet to the east
00:0A40 4C2A0A          	    83:         jmp :-
00:0A43 A002            	    84: :       ldy #2
00:0A45 B11B            	    85:         lda (irqwrd1),y         ;yes, load pellet state
                        	    86:         jeq pelnotfd            ;has pellet already been eaten?
00:0A47 D003            	     1M         bne :+
00:0A49 4CF20A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A4C 4CEB0A          	    87:         jmp pelfound
00:0A4F C905            	    88: fpckde: cmp #e
00:0A51 D036            	    89:         bne fpckdn
                        	    90:         cpbyt sp0y, irqtmp
00:0A53 AD01D0          	     1M         lda sp0y
00:0A56 851F            	     2M         sta irqtmp
00:0A58 201F0B          	    91:         jsr fpinrow             ;get indexes of west-most & east-most pellets
00:0A5B A001            	    92:         ldy #1
00:0A5D B91D00          	    93:         lda irqwrd2,y
00:0A60 851F            	    94:         sta irqtmp              ;store index of west-most pellet
00:0A62 A205            	    95:         ldx #irqblki
00:0A64 A51F            	    96: :       lda irqtmp
00:0A66 20C609          	    97:         jsr pelladr
                        	    98:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A69 AD00D0          	     1M         lda sp0x
00:0A6C 851D            	     2M         sta irqwrd2     
00:0A6E E61D            	    99:         inc irqwrd2             ;increment irqwrd2 (lo) to give some leeway
00:0A70 A51D            	   100:         lda irqwrd2
00:0A72 A003            	   101:         ldy #3
00:0A74 D11B            	   102:         cmp (irqwrd1),y
00:0A76 B005            	   103:         bcs :+                  ;sp0x >= pellet x loc
00:0A78 C61F            	   104:         dec irqtmp              ;no, try next pellet to the west
00:0A7A 4C640A          	   105:         jmp :-
00:0A7D A002            	   106: :       ldy #2
00:0A7F B11B            	   107:         lda (irqwrd1),y         ;yes, load pellet state
                        	   108:         jeq pelnotfd            ;has pellet already been eaten?
00:0A81 D003            	     1M         bne :+
00:0A83 4CF20A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A86 4CEB0A          	   109:         jmp pelfound
00:0A89 C902            	   110: fpckdn: cmp #n
00:0A8B D034            	   111:         bne fpds
                        	   112:         cpbyt sp0y, irqtmp      ;store sp0y in irqtmp
00:0A8D AD01D0          	     1M         lda sp0y
00:0A90 851F            	     2M         sta irqtmp      
                        	   113:         sbcbimm 3, irqtmp       ;subtract 3 from irqtmp to try to find row
00:0A92 38              	     1M         sec
00:0A93 A51F            	     2M         lda irqtmp       
00:0A95 E903            	     3M         sbc #3
00:0A97 851F            	     4M         sta irqtmp       
00:0A99 20FB0A          	   114:         jsr fprixs
00:0A9C 201F0B          	   115:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   116:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A9F A51D            	     1M         lda irqwrd2
00:0AA1 851F            	     2M         sta irqtmp   
00:0AA3 A205            	   117:         ldx #irqblki
00:0AA5 A51F            	   118: :       lda irqtmp
00:0AA7 20C609          	   119:         jsr pelladr
00:0AAA AD00D0          	   120:         lda sp0x
00:0AAD A003            	   121:         ldy #3
00:0AAF D11B            	   122:         cmp (irqwrd1),y
00:0AB1 F005            	   123:         beq :+                  ;sp0x = pellet x loc?
00:0AB3 E61F            	   124:         inc irqtmp              ;no, try next pellet to the east
00:0AB5 4CA50A          	   125:         jmp :-
00:0AB8 A002            	   126: :       ldy #2
00:0ABA B11B            	   127:         lda (irqwrd1),y         ;yes, load pellet state
00:0ABC F034            	   128:         beq pelnotfd            ;has pellet already been eaten?
00:0ABE 4CEB0A          	   129:         jmp pelfound
                        	   130: fpds:   cpbyt sp0y, irqtmp
00:0AC1 AD01D0          	     1M         lda sp0y
00:0AC4 851F            	     2M         sta irqtmp
00:0AC6 200D0B          	   131:         jsr fprixn
00:0AC9 201F0B          	   132:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   133:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0ACC A51D            	     1M         lda irqwrd2
00:0ACE 851F            	     2M         sta irqtmp   
00:0AD0 A205            	   134:         ldx #irqblki
00:0AD2 A51F            	   135: :       lda irqtmp
00:0AD4 20C609          	   136:         jsr pelladr
00:0AD7 AD00D0          	   137:         lda sp0x
00:0ADA A003            	   138:         ldy #3
00:0ADC D11B            	   139:         cmp (irqwrd1),y
00:0ADE F005            	   140:         beq :+                  ;sp0x = pellet x loc?
00:0AE0 E61F            	   141:         inc irqtmp              ;no, try next pellet to the east
00:0AE2 4CD20A          	   142:         jmp :-
00:0AE5 A002            	   143: :       ldy #2
00:0AE7 B11B            	   144:         lda (irqwrd1),y         ;yes, load pellet state
00:0AE9 F007            	   145:         beq pelnotfd            ;has pellet already been eaten?
                        	   146: pelfound:
00:0AEB A900            	   147:         lda #0
00:0AED A002            	   148:         ldy #2
00:0AEF 911B            	   149:         sta (irqwrd1),y         ;pellet not yet eaten, mark as eaten
00:0AF1 60              	   150:         rts        
                        	   151: pelnotfd:
                        	   152:         ldwimm $ffff, irqwrd1   ;pellet already eaten
00:0AF2 A9FF            	     1M         lda #<$ffff
00:0AF4 851B            	     2M         sta irqwrd1   
00:0AF6 A9FF            	     3M         lda #>$ffff
00:0AF8 851C            	     4M         sta irqwrd1   +1
00:0AFA 60              	   153:         rts
                        	   154: 
                        	   155:         ;; Get y loc of next row to the south of the y loc in irqtmp
                        	   156:         ;; Reads:
                        	   157:         ;;  - irqtmp: y loc to find row south of
                        	   158:         ;; Writes:
                        	   159:         ;;  - irqtmp: y loc of next row to the south
00:0AFB A000            	   160: fprixs: ldy #0
00:0AFD B9B916          	   161: :       lda plrowix,y
00:0B00 C51F            	   162:         cmp irqtmp
00:0B02 B006            	   163:         bcs :+
00:0B04 C8              	   164:         iny
00:0B05 C8              	   165:         iny
00:0B06 C8              	   166:         iny
00:0B07 4CFD0A          	   167:         jmp :-
00:0B0A 851F            	   168: :       sta irqtmp
00:0B0C 60              	   169:         rts
                        	   170:         
                        	   171:         ;; Get y loc of next row to the north of the y loc in irqtmp
                        	   172:         ;; Reads:
                        	   173:         ;;  - irqtmp: y loc to find row north of
                        	   174:         ;; Writes:
                        	   175:         ;;  - irqtmp: y loc of next row to the north
00:0B0D A042            	   176: fprixn: ldy #66
00:0B0F B9B916          	   177: :       lda plrowix,y
00:0B12 C51F            	   178:         cmp irqtmp
00:0B14 9006            	   179:         bcc :+
00:0B16 88              	   180:         dey
00:0B17 88              	   181:         dey
00:0B18 88              	   182:         dey
00:0B19 4C0F0B          	   183:         jmp :-
00:0B1C 851F            	   184: :       sta irqtmp
00:0B1E 60              	   185:         rts
                        	   186:         
                        	   187:         
                        	   188:         ;; Get pellet table indexes of west-most & east-most pellets 
                        	   189:         ;; in row whose sprite y loc is in irqtmp
                        	   190:         ;; May only be called from IRQ handler!
                        	   191:         ;; Reads:
                        	   192:         ;;  - irqtmp: pellet row y loc
                        	   193:         ;; Writes:
                        	   194:         ;;  - irqwrd2: indexes of west-most & east-most pellets in row
                        	   195: fpinrow:
00:0B1F A000            	   196:         ldy #0
00:0B21 B9B916          	   197: :       lda plrowix,y
00:0B24 C51F            	   198:         cmp irqtmp
00:0B26 F006            	   199:         beq :+
00:0B28 C8              	   200:         iny
00:0B29 C8              	   201:         iny
00:0B2A C8              	   202:         iny
00:0B2B 4C210B          	   203:         jmp :-
00:0B2E C8              	   204: :       iny
00:0B2F B9B916          	   205:         lda plrowix,y
00:0B32 851D            	   206:         sta irqwrd2
00:0B34 C8              	   207:         iny
00:0B35 B9B916          	   208:         lda plrowix,y
00:0B38 851E            	   209:         sta irqwrd2+1
00:0B3A 60              	   210:         rts
                        	   211: 
                        	   212:         ;; Check whether or not pellet at index is an energizer
                        	   213:         ;; Reads:
                        	   214:         ;;  - .X: index into buffer to access memory block
                        	   215:         ;;  - 1st byte of memory block: pellet index
                        	   216:         ;; Writes:
                        	   217:         ;;  - .Z is set if pellet is an energizer
00:0B3B A003            	   218: isenzr: ldy #3
00:0B3D 300B            	   219: :       bmi :+
00:0B3F B516            	   220:         lda buf,x
00:0B41 D99D16          	   221:         cmp enzrlst,y
00:0B44 F004            	   222:         beq :+
00:0B46 88              	   223:         dey
00:0B47 4C3D0B          	   224:         jmp :-
00:0B4A 60              	   225: :       rts
                        	   226: 

Source: "./src/startup.asm"
                        	    28:         include nodes.asm

Source: "nodes.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Node-related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert node index to node address
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (node index)
                        	     8:         ;;  - .X (offset into buf to access memory block)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
                        	    12: nodeadr:
00:0B4B 204B08          	    13:         jsr mula6
00:0B4E 18              	    14:         clc
00:0B4F B516            	    15:         lda buf,x
00:0B51 696C            	    16:         adc #<nodetbl
00:0B53 9516            	    17:         sta buf,x
00:0B55 E8              	    18:         inx
00:0B56 B516            	    19:         lda buf,x
00:0B58 6911            	    20:         adc #>nodetbl
00:0B5A 9516            	    21:         sta buf,x
00:0B5C CA              	    22:         dex
00:0B5D 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Calculate distance from Pac-Man's source node to target node
                        	    26:         ;; Reads:
                        	    27:         ;;  - pacsrc (source node)
                        	    28:         ;;  - pactar (target node)
                        	    29:         ;;  - pacdir (compass direction)
                        	    30:         ;;  - .X (offset into buf to access memory block)
                        	    31:         ;; Writes:
                        	    32:         ;;  - pacdis (total distance)
                        	    33:         ;;  - pacrem (distance remaining)
                        	    34:         ;;  - 1st & 2nd word of memory block are used for calculations
                        	    35: setnodis:
00:0B5E A5A3            	    36:         lda pacdir
00:0B60 C904            	    37:         cmp #w
00:0B62 D01A            	    38:         bne chkne
00:0B64 A59F            	    39:         lda pactar
00:0B66 C921            	    40:         cmp #wrpnixe            ;eastern warp tunnel node
                        	    41:         jeq warp
00:0B68 D003            	     1M         bne :+
00:0B6A 4C030C          	     2M         jmp warp
                        	     3M :
00:0B6D A59E            	    42:         lda pacsrc
00:0B6F 204B0B          	    43:         jsr nodeadr             
00:0B72 A116            	    44:         lda (buf,x)             ;get source x coord...
00:0B74 48              	    45:         pha                     ;... and stash it on the stack
00:0B75 A59F            	    46:         lda pactar
00:0B77 204B0B          	    47:         jsr nodeadr             ;get target node address
00:0B7A 68              	    48:         pla                     ;restore source x coord
00:0B7B 4CFB0B          	    49:         jmp calcnd
00:0B7E C905            	    50: chkne:  cmp #e
00:0B80 D01A            	    51:         bne chknn
00:0B82 A59F            	    52:         lda pactar
00:0B84 C91B            	    53:         cmp #wrpnixw             ;western warp tunnel node
                        	    54:         jeq warp
00:0B86 D003            	     1M         bne :+
00:0B88 4C030C          	     2M         jmp warp
                        	     3M :
00:0B8B A59F            	    55:         lda pactar
00:0B8D 204B0B          	    56:         jsr nodeadr             
00:0B90 A116            	    57:         lda (buf,x)             ;get target x coord...
00:0B92 48              	    58:         pha                     ;... and stash it on the stack
00:0B93 A59E            	    59:         lda pacsrc
00:0B95 204B0B          	    60:         jsr nodeadr             ;get source node address
00:0B98 68              	    61:         pla                     ;restore target x coord
00:0B99 4CFB0B          	    62:         jmp calcnd
00:0B9C C902            	    63: chknn:  cmp #n
00:0B9E D02F            	    64:         bne setnds
00:0BA0 A59E            	    65:         lda pacsrc
00:0BA2 204B0B          	    66:         jsr nodeadr
                        	    67:         incptrx buf             ;advance pointer; we need y coord
00:0BA5 18              	     1M         clc
00:0BA6 B516            	     2M         lda buf             ,x
00:0BA8 6901            	     3M         adc #1
00:0BAA 9516            	     4M         sta buf             ,x
00:0BAC E8              	     5M         inx
00:0BAD B516            	     6M         lda buf             ,x
00:0BAF 6900            	     7M         adc #0
00:0BB1 9516            	     8M         sta buf             ,x
00:0BB3 CA              	     9M         dex
00:0BB4 A116            	    68:         lda (buf,x)             ;get source y coord...
00:0BB6 48              	    69:         pha                     ;... and stash it on the stack
00:0BB7 A59F            	    70:         lda pactar
00:0BB9 204B0B          	    71:         jsr nodeadr             ;get target node address
                        	    72:         incptrx buf             ;advance pointer; we need y coord
00:0BBC 18              	     1M         clc
00:0BBD B516            	     2M         lda buf             ,x
00:0BBF 6901            	     3M         adc #1
00:0BC1 9516            	     4M         sta buf             ,x
00:0BC3 E8              	     5M         inx
00:0BC4 B516            	     6M         lda buf             ,x
00:0BC6 6900            	     7M         adc #0
00:0BC8 9516            	     8M         sta buf             ,x
00:0BCA CA              	     9M         dex
00:0BCB 68              	    73:         pla                     ;restore source y coord
00:0BCC 4CFB0B          	    74:         jmp calcnd
00:0BCF A59F            	    75: setnds: lda pactar
00:0BD1 204B0B          	    76:         jsr nodeadr
                        	    77:         incptrx buf             ;advance pointer; we need y coord
00:0BD4 18              	     1M         clc
00:0BD5 B516            	     2M         lda buf             ,x
00:0BD7 6901            	     3M         adc #1
00:0BD9 9516            	     4M         sta buf             ,x
00:0BDB E8              	     5M         inx
00:0BDC B516            	     6M         lda buf             ,x
00:0BDE 6900            	     7M         adc #0
00:0BE0 9516            	     8M         sta buf             ,x
00:0BE2 CA              	     9M         dex
00:0BE3 A116            	    78:         lda (buf,x)             ;get target y coord...
00:0BE5 48              	    79:         pha                     ;... and stash it on the stack
00:0BE6 A59E            	    80:         lda pacsrc
00:0BE8 204B0B          	    81:         jsr nodeadr
                        	    82:         incptrx buf             ;advance pointer; we need y coord
00:0BEB 18              	     1M         clc
00:0BEC B516            	     2M         lda buf             ,x
00:0BEE 6901            	     3M         adc #1
00:0BF0 9516            	     4M         sta buf             ,x
00:0BF2 E8              	     5M         inx
00:0BF3 B516            	     6M         lda buf             ,x
00:0BF5 6900            	     7M         adc #0
00:0BF7 9516            	     8M         sta buf             ,x
00:0BF9 CA              	     9M         dex
00:0BFA 68              	    83:         pla                     ;restore target y coord
00:0BFB 38              	    84: calcnd: sec
00:0BFC E116            	    85:         sbc (buf,x)
00:0BFE 85A5            	    86:         sta pacdis
00:0C00 85A6            	    87:         sta pacrem
00:0C02 60              	    88:         rts
00:0C03 A900            	    89: warp:   lda #0
00:0C05 85A5            	    90:         sta pacdis
00:0C07 85A6            	    91:         sta pacrem
00:0C09 60              	    92:         rts
                        	    93: 

Source: "./src/startup.asm"
                        	    29:         include sprites.asm

Source: "sprites.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Sprite sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Initialize sprites
                        	     6: initsprt:
                        	     7:         ;; Sprite 0: Pac-Man
                        	     8:         ldbimm sp0loc, sp0ptr   ;set sprite 0 pointer
00:0C0A A940            	     1M         lda #sp0loc
00:0C0C 8DF84F          	     2M         sta sp0ptr   
00:0C0F AD3F50          	     9:         lda sp0mem+$3f          ;read byte 63
00:0C12 290F            	    10:         and #%00001111          ;mask out hi nybble
00:0C14 8D27D0          	    11:         sta sp0col              ;set sprite 0 (Pac-Man) colour        
00:0C17 A931            	    12:         lda #pacstnd
00:0C19 A200            	    13:         ldx #0
00:0C1B 204B0B          	    14:         jsr nodeadr             ;get address of Pac's starting node
                        	    15:         ldbptr wrd1, 0, sp0x    ;set Pac's x loc
00:0C1E A000            	     1M         ldy #0
00:0C20 B116            	     2M         lda (wrd1),y
00:0C22 8D00D0          	     3M         sta sp0x    
                        	    16:         ldbptr wrd1, 1, sp0y    ;set Pac's y loc
00:0C25 A001            	     1M         ldy #1
00:0C27 B116            	     2M         lda (wrd1),y
00:0C29 8D01D0          	     3M         sta sp0y    
00:0C2C A901            	    17:         lda #%00000001
00:0C2E 8D15D0          	    18:         sta spena               ;enable sprite 0 (Pac-Man)
                        	    19:         ;; Init Pac's direction & calc distance between source & target nodes
                        	    20:         ldbimm w, pacdir        ;set Pac's initial direction to west
00:0C31 A904            	     1M         lda #w
00:0C33 85A3            	     2M         sta pacdir        
                        	    21:         ldbimm pacstnd, pacsrc  ;set Pac's starting node as source node
00:0C35 A931            	     1M         lda #pacstnd
00:0C37 859E            	     2M         sta pacsrc  
                        	    22:         ldbptr wrd1, w, pactar  ;set western neighbour as target node
00:0C39 A004            	     1M         ldy #w
00:0C3B B116            	     2M         lda (wrd1),y
00:0C3D 859F            	     3M         sta pactar  
00:0C3F 205E0B          	    23:         jsr setnodis            ;calculate distance between source & target
00:0C42 60              	    24:         rts
                        	    25: 
                        	    26:         ;; Convert sprite x loc in .A to char x loc
                        	    27: spx2chx:
00:0C43 38              	    28:         sec
00:0C44 E918            	    29:         sbc #spxscog
                        	    30:         diva8
00:0C46 38              	     1M         sec
00:0C47 4A              	     2M         lsr
00:0C48 4A              	     3M         lsr
00:0C49 4A              	     4M         lsr
00:0C4A 60              	    31:         rts
                        	    32: 
                        	    33:         ;; Convert sprite y loc in .A to char y loc
                        	    34: spy2chy:
00:0C4B 38              	    35:         sec
00:0C4C E932            	    36:         sbc #spyscog
                        	    37:         diva8
00:0C4E 38              	     1M         sec
00:0C4F 4A              	     2M         lsr
00:0C50 4A              	     3M         lsr
00:0C51 4A              	     4M         lsr
00:0C52 60              	    38:         rts
                        	    39: 
                        	    40:         ;; Convert char x loc in .A to sprite x loc
                        	    41: chx2spx:
                        	    42:         mula8
00:0C53 18              	     1M         clc
00:0C54 0A              	     2M         asl
00:0C55 0A              	     3M         asl
00:0C56 0A              	     4M         asl
00:0C57 18              	    43:         clc
00:0C58 6918            	    44:         adc #spxscog
00:0C5A 60              	    45:         rts
                        	    46: 
                        	    47:         ;; Convert char y loc in .A to sprite y loc
                        	    48: chy2spy:
                        	    49:         mula8
00:0C5B 18              	     1M         clc
00:0C5C 0A              	     2M         asl
00:0C5D 0A              	     3M         asl
00:0C5E 0A              	     4M         asl
00:0C5F 18              	    50:         clc
00:0C60 6932            	    51:         adc #spyscog
00:0C62 60              	    52:         rts
                        	    53: 

Source: "./src/startup.asm"
                        	    30:         include irq.asm

Source: "irq.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; IRQ handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for raster IRQ.
                        	     6: setupirq:
00:0C63 78              	     7:         sei
                        	     8:         ldbimm $7f, ci1icr
00:0C64 A97F            	     1M         lda #$7f
00:0C66 8D0DDC          	     2M         sta ci1icr
                        	     9:         ldbimm $03, irqmsk ;enable raster IRQ & mob-data collision
00:0C69 A903            	     1M         lda #$03
00:0C6B 8D1AD0          	     2M         sta irqmsk 
                        	    10:         ldbimm $1b, scroly
00:0C6E A91B            	     1M         lda #$1b
00:0C70 8D11D0          	     2M         sta scroly
                        	    11:         ldbimm raslin, raster
00:0C73 A9FA            	     1M         lda #raslin
00:0C75 8D12D0          	     2M         sta raster
                        	    12:         ldwimm procirq, cinv
00:0C78 A984            	     1M         lda #<procirq
00:0C7A 8D1403          	     2M         sta cinv
00:0C7D A90C            	     3M         lda #>procirq
00:0C7F 8D1503          	     4M         sta cinv+1
00:0C82 58              	    13:         cli
00:0C83 60              	    14:         rts
                        	    15: 
                        	    16:         ;; IRQ handler. Here we implement logic for events such as:
                        	    17:         ;;  - Pac-Man's movement (player controlled but we need to 
                        	    18:         ;;    update sprite coordinates, distance remaining to target
                        	    19:         ;;     node, set new target on reaching target node, etc.)
                        	    20:         ;;  - Pac-Man's dying & updating remaining lives
                        	    21:         ;;  - Ghosts going into/out of fright mode, or being eaten
                        	    22: procirq:
00:0C84 A5A7            	    23:         lda npelrem
00:0C86 D006            	    24:         bne chkirq              ;don't handle IRQ when no pellets left
00:0C88 0E19D0          	    25:         asl vicirq              ;acknowledge IRQ
00:0C8B 4C7EEA          	    26:         jmp sysirq              ;return from interrupt
                        	    27:         
00:0C8E AD1FD0          	    28: chkirq: lda spbgcl
00:0C91 AD1ED0          	    29:         lda spspcl              ;clear collision registers by reading them
00:0C94 AD19D0          	    30:         lda vicirq
00:0C97 2902            	    31:         and #%00000010          ;check for sprite-background collision
                        	    32:         jne pelcol
00:0C99 F003            	     1M         beq :+
00:0C9B 4CB40C          	     2M         jmp pelcol
                        	     3M :
00:0C9E AD19D0          	    33:         lda vicirq
00:0CA1 2904            	    34:         and #%00000100          ;check for sprite-sprite collision
                        	    35:         jeq rasirq              ;no, must be raster IRQ
00:0CA3 D003            	     1M         bne :+
00:0CA5 4C0C0D          	     2M         jmp rasirq              
                        	     3M :
                        	    36:         ;; Handle Pac-Man collision with fruit
00:0CA8 205F11          	    37:         jsr hidefrt             ;hide the fruit
00:0CAB 205010          	    38:         jsr scrfrt              ;score the fruit
00:0CAE 208108          	    39:         jsr printscr            ;print the score
                        	    40:         ;; TODO: Show points earned sprite
                        	    41:         ;; (NMI timer to hide after ~1.5s)
00:0CB1 4CFF0C          	    42:         jmp fincol
                        	    43: 
                        	    44:         ;; Handle Pac-Man collision with pellet
00:0CB4 20160A          	    45: pelcol: jsr findpel             ;find pellet collided with & mark as eaten
00:0CB7 A51C            	    46:         lda irqwrd1+1           ;load pellet address hi-byte
00:0CB9 C9FF            	    47:         cmp #$ff                ;pellet found?
                        	    48:         jeq fincol              ;no, do nothing
00:0CBB D003            	     1M         bne :+
00:0CBD 4CFF0C          	     2M         jmp fincol              
                        	     3M :
00:0CC0 A209            	    49:         ldx #irqblki+4
00:0CC2 203B0B          	    50:         jsr isenzr              ;yes, is it an energizer?
00:0CC5 D008            	    51:         bne :+
00:0CC7 A207            	    52:         ldx #irqblki+2
00:0CC9 206910          	    53:         jsr screnzr             ;yes, score it
00:0CCC 4CD40C          	    54:         jmp rmpel
00:0CCF A207            	    55: :       ldx #irqblki+2
00:0CD1 205C10          	    56:         jsr scrpel              ;no, score as regular pellet
                        	    57: rmpel:  ldwptr irqwrd1, 0, irqwrd2
00:0CD4 A000            	     1M         ldy #0
00:0CD6 B11B            	     2M         lda (irqwrd1),y
00:0CD8 851D            	     3M         sta irqwrd2
00:0CDA C8              	     4M         iny
00:0CDB B11B            	     5M         lda (irqwrd1),y
00:0CDD 851E            	     6M         sta irqwrd2+1
00:0CDF A020            	    58:         ldy #spcechr
00:0CE1 201D09          	    59:         jsr printchr            ;erase pellet
00:0CE4 208108          	    60:         jsr printscr            ;print score
                        	    61:         ldbimm 6, irqtmp        ;set number of flashes in irqtmp
00:0CE7 A906            	     1M         lda #6
00:0CE9 851F            	     2M         sta irqtmp        
00:0CEB C6A7            	    62:         dec npelrem             ;decrement pellets remaining
00:0CED 20F310          	    63:         jsr showfrt             ;conditionally enable bonus fruit
00:0CF0 A5A7            	    64:         lda npelrem
                        	    65:         jne fincol
00:0CF2 F003            	     1M         beq :+
00:0CF4 4CFF0C          	     2M         jmp fincol
                        	     3M :
00:0CF7 AD15D0          	    66:         lda spena
00:0CFA 2901            	    67:         and #%00000001
00:0CFC 8D15D0          	    68:         sta spena               ;disable all but Pac-Man's sprite
00:0CFF AD19D0          	    69: fincol: lda vicirq
00:0D02 2901            	    70:         and #%00000001
00:0D04 D006            	    71:         bne rasirq              ;check for raster IRQ
00:0D06 0E19D0          	    72:         asl vicirq              ;acknowledge IRQ
00:0D09 4C7EEA          	    73:         jmp sysirq              ;return from interrupt
                        	    74: 
                        	    75:         ;; Handle raster IRQ
00:0D0C A5A7            	    76: rasirq: lda npelrem
                        	    77:         jeq finras              ;don't process IRQ if all pellets eaten
00:0D0E D003            	     1M         bne :+
00:0D10 4C7F0D          	     2M         jmp finras              
                        	     3M :
00:0D13 A5A6            	    78:         lda pacrem
00:0D15 F02C            	    79:         beq setnsrc
00:0D17 A5A3            	    80:         lda pacdir
00:0D19 C904            	    81:         cmp #w
00:0D1B D006            	    82:         bne chkpde
00:0D1D CE00D0          	    83:         dec sp0x
00:0D20 4C3A0D          	    84:         jmp decrem
00:0D23 C905            	    85: chkpde: cmp #e
00:0D25 D006            	    86:         bne chkpdn
00:0D27 EE00D0          	    87:         inc sp0x
00:0D2A 4C3A0D          	    88:         jmp decrem
00:0D2D C902            	    89: chkpdn: cmp #n
00:0D2F D006            	    90:         bne pdsouth
00:0D31 CE01D0          	    91:         dec sp0y
00:0D34 4C3A0D          	    92:         jmp decrem
                        	    93: pdsouth:
00:0D37 EE01D0          	    94:         inc sp0y
00:0D3A C6A6            	    95: decrem: dec pacrem
00:0D3C A5A6            	    96:         lda pacrem
00:0D3E F003            	    97:         beq setnsrc
00:0D40 4C7F0D          	    98:         jmp finras
                        	    99: setnsrc:
                        	   100:         cpbyt pactar, pacsrc    ;set target node as new source node
00:0D43 A59F            	     1M         lda pactar
00:0D45 859E            	     2M         sta pacsrc    
00:0D47 A205            	   101:         ldx #irqblki
00:0D49 204B0B          	   102:         jsr nodeadr             ;load node address into irqwrd1
                        	   103:         ldbptr irqwrd1, 0, sp0x ;store node x loc into sp0x
00:0D4C A000            	     1M         ldy #0
00:0D4E B11B            	     2M         lda (irqwrd1),y
00:0D50 8D00D0          	     3M         sta sp0x 
                        	   104:         ldbptr irqwrd1, 1, sp0y ;store node y loc into sp0y
00:0D53 A001            	     1M         ldy #1
00:0D55 B11B            	     2M         lda (irqwrd1),y
00:0D57 8D01D0          	     3M         sta sp0y 
00:0D5A A4A4            	   105:         ldy pacnxd              ;new direction?
00:0D5C F014            	   106:         beq chkcon              ;if not, check for node in current direction
00:0D5E B11B            	   107:         lda (irqwrd1),y         ;yes, load node
00:0D60 C9FF            	   108:         cmp #$ff
00:0D62 F00E            	   109:         beq chkcon
00:0D64 C91E            	   110:         cmp #gsthmnd
00:0D66 F00A            	   111:         beq chkcon
00:0D68 859F            	   112:         sta pactar
00:0D6A 84A3            	   113:         sty pacdir
00:0D6C 205E0B          	   114:         jsr setnodis
00:0D6F 4C7F0D          	   115:         jmp finras
00:0D72 A4A3            	   116: chkcon: ldy pacdir
00:0D74 B11B            	   117:         lda (irqwrd1),y
00:0D76 C9FF            	   118:         cmp #$ff
00:0D78 F005            	   119:         beq finras
00:0D7A 859F            	   120:         sta pactar              ;set new target...
00:0D7C 205E0B          	   121:         jsr setnodis            ;... and calculate distance
                        	   122: finras: ldbimm 0, pacnxd        ;clear out next direction
00:0D7F A900            	     1M         lda #0
00:0D81 85A4            	     2M         sta pacnxd        
00:0D83 0E19D0          	   123:         asl vicirq              ;acknowledge IRQ
00:0D86 4C7EEA          	   124:         jmp sysirq              ;return from interrupt
                        	   125: 

Source: "./src/startup.asm"
                        	    31:         include nmi.asm

Source: "nmi.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; NMI handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for CIA2 timer NMI.
                        	     6: setupnmi:
00:0D89 78              	     7:         sei
                        	     8:         ldwimm $740d, ti2a              ;timer A fires every ~30ms (PAL)
00:0D8A A90D            	     1M         lda #<$740d
00:0D8C 8D04DD          	     2M         sta ti2a              
00:0D8F A974            	     3M         lda #>$740d
00:0D91 8D05DD          	     4M         sta ti2a              +1
                        	     9:         ldwimm 8, ti2b                  ;timer B fires every ~240ms (PAL)
00:0D94 A908            	     1M         lda #<8
00:0D96 8D06DD          	     2M         sta ti2b                  
00:0D99 A900            	     3M         lda #>8
00:0D9B 8D07DD          	     4M         sta ti2b                  +1
                        	    10:         ldbimm %00010001, ci2cra
00:0D9E A911            	     1M         lda #%00010001
00:0DA0 8D0EDD          	     2M         sta ci2cra
                        	    11:         ldbimm %01010001, ci2crb
00:0DA3 A951            	     1M         lda #%01010001
00:0DA5 8D0FDD          	     2M         sta ci2crb
00:0DA8 AD0DDD          	    12:         lda ci2icr
                        	    13:         ldbimm %10000011, ci2icr        ;allow interrupts from both timers
00:0DAB A983            	     1M         lda #%10000011
00:0DAD 8D0DDD          	     2M         sta ci2icr        
                        	    14:         ldbimm 0, pacaix                ;init Pac-Man's animation index
00:0DB0 A900            	     1M         lda #0
00:0DB2 85FC            	     2M         sta pacaix                
                        	    15:         ldbimm 0, enzraix               ;init energizer animation index
00:0DB4 A900            	     1M         lda #0
00:0DB6 85FD            	     2M         sta enzraix               
                        	    16:         ldwimm procnmi, nminv
00:0DB8 A9C4            	     1M         lda #<procnmi
00:0DBA 8D1803          	     2M         sta nminv
00:0DBD A90D            	     3M         lda #>procnmi
00:0DBF 8D1903          	     4M         sta nminv+1
00:0DC2 58              	    17:         cli
00:0DC3 60              	    18:         rts
                        	    19: 
                        	    20:         ;; NMI handler. Here we animate the various in-game objects such as:
                        	    21:         ;;  - Pac-Man (in-game and death animations)
                        	    22:         ;;  - Energizers (phase)
                        	    23:         ;;  - The ghosts (regular, fright, and death animations)
                        	    24:         ;; We also handle timer events such as:
                        	    25:         ;;  - Fruit (appearance and disappearance)
                        	    26:         ;;  - Ghosts switching between scatter & chase mode
                        	    27: procnmi:
00:0DC4 48              	    28:         pha
                        	    29:         phx
00:0DC5 8A              	     1M         txa
00:0DC6 48              	     2M         pha
                        	    30:         phy                             ;push .A, .X, and .Y onto the stack
00:0DC7 98              	     1M         tya
00:0DC8 48              	     2M         pha
00:0DC9 AD0DDD          	    31:         lda ci2icr
00:0DCC A8              	    32:         tay
00:0DCD 2902            	    33:         and #%00000010
                        	    34:         jne timbev
00:0DCF F003            	     1M         beq :+
00:0DD1 4C390E          	     2M         jmp timbev
                        	     3M :
00:0DD4 98              	    35:         tya
00:0DD5 2901            	    36:         and #%00000001
                        	    37:         jeq sysnmi
00:0DD7 D003            	     1M         bne :+
00:0DD9 4C56FE          	     2M         jmp sysnmi
                        	     3M :
                        	    38:         
                        	    39:         ;; Timer A fired: animate Pac-Man
00:0DDC A5A7            	    40: timaev: lda npelrem
                        	    41:         jeq finnmi                      ;don't animate PM if all pellets eaten
00:0DDE D003            	     1M         bne :+
00:0DE0 4C700F          	     2M         jmp finnmi                      
                        	     3M :
00:0DE3 A5A6            	    42:         lda pacrem
                        	    43:         jeq finnmi                      ;don't animate PM if he's not moving
00:0DE5 D003            	     1M         bne :+
00:0DE7 4C700F          	     2M         jmp finnmi                      
                        	     3M :
00:0DEA E6FC            	    44:         inc pacaix
00:0DEC A4FC            	    45:         ldy pacaix
00:0DEE C006            	    46:         cpy #6                          ;past final animation?
00:0DF0 9005            	    47:         bcc :+
                        	    48:         ldbimm 0, pacaix                ;yes, reset animation index
00:0DF2 A900            	     1M         lda #0
00:0DF4 85FC            	     2M         sta pacaix                
00:0DF6 A8              	    49:         tay
00:0DF7 A5A3            	    50: :       lda pacdir                      ;no, check Pac-Man's direction
00:0DF9 C902            	    51:         cmp #n
00:0DFB F013            	    52:         beq :+
00:0DFD C903            	    53:         cmp #s
00:0DFF F01A            	    54:         beq :++
00:0E01 C904            	    55:         cmp #w
00:0E03 F021            	    56:         beq :+++
                        	    57:         ldwimm pacalste, nmiwrd1        ;east
00:0E05 A9B3            	     1M         lda #<pacalste
00:0E07 8520            	     2M         sta nmiwrd1        
00:0E09 A916            	     3M         lda #>pacalste
00:0E0B 8521            	     4M         sta nmiwrd1        +1
00:0E0D 4C2E0E          	    58:         jmp ldanim
                        	    59: :       ldwimm pacalstn, nmiwrd1        ;north
00:0E10 A9A1            	     1M         lda #<pacalstn
00:0E12 8520            	     2M         sta nmiwrd1        
00:0E14 A916            	     3M         lda #>pacalstn
00:0E16 8521            	     4M         sta nmiwrd1        +1
00:0E18 4C2E0E          	    60:         jmp ldanim
                        	    61: :       ldwimm pacalsts, nmiwrd1        ;south
00:0E1B A9A7            	     1M         lda #<pacalsts
00:0E1D 8520            	     2M         sta nmiwrd1        
00:0E1F A916            	     3M         lda #>pacalsts
00:0E21 8521            	     4M         sta nmiwrd1        +1
00:0E23 4C2E0E          	    62:         jmp ldanim
                        	    63: :       ldwimm pacalstw, nmiwrd1        ;west
00:0E26 A9AD            	     1M         lda #<pacalstw
00:0E28 8520            	     2M         sta nmiwrd1        
00:0E2A A916            	     3M         lda #>pacalstw
00:0E2C 8521            	     4M         sta nmiwrd1        +1
00:0E2E 18              	    64: ldanim: clc
00:0E2F B120            	    65:         lda (nmiwrd1),y
00:0E31 6940            	    66:         adc #sp0loc
00:0E33 8DF84F          	    67:         sta sp0ptr
00:0E36 4C700F          	    68:         jmp finnmi
                        	    69:         
                        	    70:         ;; Timer B fired:
                        	    71:         ;;  - animate energizers
                        	    72:         ;;  - flash maze on level end
                        	    73:         ;;  - hide fruit
00:0E39 A5FB            	    74: timbev: lda frtena
00:0E3B F00C            	    75:         beq :++                         ;fruit enabled?
00:0E3D C926            	    76:         cmp #frttim
00:0E3F D006            	    77:         bne :+                          ;yes, fruit timer expired?
00:0E41 205F11          	    78:         jsr hidefrt                     ;yes, hide fruit
00:0E44 4C490E          	    79:         jmp :++
00:0E47 E6FB            	    80: :       inc frtena                      ;no, increment timer
00:0E49 A5A7            	    81: :       lda npelrem
                        	    82:         jeq flshmaz                     ;all pellets eaten, flash maze
00:0E4B D003            	     1M         bne :+
00:0E4D 4CB60E          	     2M         jmp flshmaz                     
                        	     3M :
00:0E50 A5FD            	    83:         lda enzraix
00:0E52 F037            	    84:         beq tic
00:0E54 C6FD            	    85:         dec enzraix
00:0E56 A003            	    86:         ldy #3
                        	    87: tocloop:
                        	    88:         jmi finnmi
00:0E58 1003            	     1M         bpl :+
00:0E5A 4C700F          	     2M         jmp finnmi
                        	     3M :
                        	    89:         phy                             ;save loop counter onto stack        
00:0E5D 98              	     1M         tya
00:0E5E 48              	     2M         pha
00:0E5F B99D16          	    90:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0E62 A20A            	    91:         ldx #nmiblki
00:0E64 20C609          	    92:         jsr pelladr                     ;load pellet address into nmiwrd1
00:0E67 A002            	    93:         ldy #2
00:0E69 B120            	    94:         lda (nmiwrd1),y                 ;load pellet state
00:0E6B D006            	    95:         bne :+                          ;has the pellet been eaten?
                        	    96:         ply                             ;yes, next energizer
00:0E6D 68              	     1M         pla
00:0E6E A8              	     2M         tay
00:0E6F 88              	    97:         dey
00:0E70 4C580E          	    98:         jmp tocloop
                        	    99: :       ldwptr nmiwrd1, 0, nmiwrd2      ;energizer not eaten
00:0E73 A000            	     1M         ldy #0
00:0E75 B120            	     2M         lda (nmiwrd1),y
00:0E77 8522            	     3M         sta nmiwrd2      
00:0E79 C8              	     4M         iny
00:0E7A B120            	     5M         lda (nmiwrd1),y
00:0E7C 8523            	     6M         sta nmiwrd2      +1
00:0E7E A00F            	   100:         ldy #ltgrey
00:0E80 A20C            	   101:         ldx #nmiblki+2
00:0E82 200A09          	   102:         jsr printcol                    ;colour energizer light grey
                        	   103:         ply                             ;pop loop counter off the stack
00:0E85 68              	     1M         pla
00:0E86 A8              	     2M         tay
00:0E87 88              	   104:         dey
00:0E88 4C580E          	   105:         jmp tocloop
00:0E8B E6FD            	   106: tic:    inc enzraix
00:0E8D A003            	   107:         ldy #3
                        	   108: ticloop:
                        	   109:         jmi finnmi
00:0E8F 1003            	     1M         bpl :+
00:0E91 4C700F          	     2M         jmp finnmi
                        	     3M :
                        	   110:         phy                             ;push loop counter onto stack
00:0E94 98              	     1M         tya
00:0E95 48              	     2M         pha
00:0E96 B99D16          	   111:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0E99 A20A            	   112:         ldx #nmiblki
00:0E9B 20C609          	   113:         jsr pelladr                     ;load pellet address into nmiwrd1
                        	   114:         ldwptr nmiwrd1, 0, nmiwrd2
00:0E9E A000            	     1M         ldy #0
00:0EA0 B120            	     2M         lda (nmiwrd1),y
00:0EA2 8522            	     3M         sta nmiwrd2
00:0EA4 C8              	     4M         iny
00:0EA5 B120            	     5M         lda (nmiwrd1),y
00:0EA7 8523            	     6M         sta nmiwrd2+1
00:0EA9 A00B            	   115:         ldy #dkgrey
00:0EAB A20C            	   116:         ldx #nmiblki+2
00:0EAD 200A09          	   117:         jsr printcol                    ;colour energizer dark grey
                        	   118:         ply                             ;pop loop counter off the stack
00:0EB0 68              	     1M         pla
00:0EB1 A8              	     2M         tay
00:0EB2 88              	   119:         dey
00:0EB3 4C8F0E          	   120:         jmp ticloop
                        	   121: flshmaz:
00:0EB6 A51F            	   122:         lda irqtmp                      ;HACK: read number of flashes remaining from irqtmp
                        	   123:         jeq finnmi
00:0EB8 D003            	     1M         bne :+
00:0EBA 4C700F          	     2M         jmp finnmi
                        	     3M :
00:0EBD 6A              	   124:         ror
                        	   125:         jcc flshwht                     ;flash white on even, blue on odd
00:0EBE B003            	     1M         bcs :+
00:0EC0 4C1A0F          	     2M         jmp flshwht                     
                        	     3M :
00:0EC3 A200            	   126:         ldx #0
                        	   127: setblu1:
00:0EC5 BD00D8          	   128:         lda colmem,x                    ;load value in colmem at pos
00:0EC8 290F            	   129:         and #%00001111                  ;mask out high nybble
00:0ECA C901            	   130:         cmp #$01
00:0ECC D005            	   131:         bne :+                          ;is colour = white?
00:0ECE A906            	   132:         lda #$06
00:0ED0 9D00D8          	   133:         sta colmem,x                    ;yes, make it blue
00:0ED3 E8              	   134: :       inx                     
00:0ED4 E0FA            	   135:         cpx #250
00:0ED6 D0ED            	   136:         bne setblu1
00:0ED8 A200            	   137:         ldx #0
                        	   138: setblu2:
00:0EDA BDFAD8          	   139:         lda colmem+250,x                ;load value in colmem at pos
00:0EDD 290F            	   140:         and #%00001111                  ;mask out high nybble
00:0EDF C901            	   141:         cmp #$01
00:0EE1 D005            	   142:         bne :+                          ;is colour = white?
00:0EE3 A906            	   143:         lda #$06
00:0EE5 9DFAD8          	   144:         sta colmem+250,x                ;yes, make it blue
00:0EE8 E8              	   145: :       inx                     
00:0EE9 E0FA            	   146:         cpx #250
00:0EEB D0ED            	   147:         bne setblu2
00:0EED A200            	   148:         ldx #0
                        	   149: setblu3:
00:0EEF BDF4D9          	   150:         lda colmem+500,x                ;load value in colmem at pos
00:0EF2 290F            	   151:         and #%00001111                  ;mask out high nybble
00:0EF4 C901            	   152:         cmp #$01
00:0EF6 D005            	   153:         bne :+                          ;is colour = white?
00:0EF8 A906            	   154:         lda #$06
00:0EFA 9DF4D9          	   155:         sta colmem+500,x                ;yes, make it blue
00:0EFD E8              	   156: :       inx                     
00:0EFE E0FA            	   157:         cpx #250
00:0F00 D0ED            	   158:         bne setblu3
00:0F02 A200            	   159:         ldx #0
                        	   160: setblu4:
00:0F04 BDEEDA          	   161:         lda colmem+750,x                ;load value in colmem at pos
00:0F07 290F            	   162:         and #%00001111                  ;mask out high nybble
00:0F09 C901            	   163:         cmp #$01
00:0F0B D005            	   164:         bne :+                          ;is colour = white?
00:0F0D A906            	   165:         lda #$06
00:0F0F 9DEEDA          	   166:         sta colmem+750,x                ;yes, make it blue
00:0F12 E8              	   167: :       inx
00:0F13 E0FA            	   168:         cpx #250
00:0F15 D0ED            	   169:         bne setblu4
00:0F17 4C6E0F          	   170:         jmp flshfin
                        	   171: flshwht:
00:0F1A A200            	   172:         ldx #0
                        	   173: setwht1:
00:0F1C BD00D8          	   174:         lda colmem,x                    ;load value in colmem at pos
00:0F1F 290F            	   175:         and #%00001111                  ;mask out high nybble
00:0F21 C906            	   176:         cmp #$06
00:0F23 D005            	   177:         bne :+                          ;is colour = blue?
00:0F25 A901            	   178:         lda #$01
00:0F27 9D00D8          	   179:         sta colmem,x                    ;yes, make it white
00:0F2A E8              	   180: :       inx                     
00:0F2B E0FA            	   181:         cpx #250
00:0F2D D0ED            	   182:         bne setwht1
00:0F2F A200            	   183:         ldx #0
                        	   184: setwht2:
00:0F31 BDFAD8          	   185:         lda colmem+250,x                ;load value in colmem at pos
00:0F34 290F            	   186:         and #%00001111                  ;mask out high nybble
00:0F36 C906            	   187:         cmp #$06
00:0F38 D005            	   188:         bne :+                          ;is colour = blue?
00:0F3A A901            	   189:         lda #$01
00:0F3C 9DFAD8          	   190:         sta colmem+250,x                ;yes, make it white
00:0F3F E8              	   191: :       inx                     
00:0F40 E0FA            	   192:         cpx #250
00:0F42 D0ED            	   193:         bne setwht2
00:0F44 A200            	   194:         ldx #0
                        	   195: setwht3:
00:0F46 BDF4D9          	   196:         lda colmem+500,x                ;load value in colmem at pos
00:0F49 290F            	   197:         and #%00001111                  ;mask out high nybble
00:0F4B C906            	   198:         cmp #$06
00:0F4D D005            	   199:         bne :+                          ;is colour = blue?
00:0F4F A901            	   200:         lda #$01
00:0F51 9DF4D9          	   201:         sta colmem+500,x                ;yes, make it white
00:0F54 E8              	   202: :       inx                     
00:0F55 E0FA            	   203:         cpx #250
00:0F57 D0ED            	   204:         bne setwht3
00:0F59 A200            	   205:         ldx #0
                        	   206: setwht4:
00:0F5B BDEEDA          	   207:         lda colmem+750,x                ;load value in colmem at pos
00:0F5E 290F            	   208:         and #%00001111                  ;mask out high nybble
00:0F60 C906            	   209:         cmp #$06
00:0F62 D005            	   210:         bne :+                          ;is colour = blue?
00:0F64 A901            	   211:         lda #$01
00:0F66 9DEEDA          	   212:         sta colmem+750,x                ;yes, make it white
00:0F69 E8              	   213: :       inx                     
00:0F6A E0FA            	   214:         cpx #250
00:0F6C D0ED            	   215:         bne setwht4
                        	   216: flshfin:
00:0F6E C61F            	   217:         dec irqtmp                      ;decrement flashes remaining
                        	   218:         
                        	   219:         ;; Restore machine state & return from NMI
                        	   220: finnmi: ply
00:0F70 68              	     1M         pla
00:0F71 A8              	     2M         tay
                        	   221:         plx
00:0F72 68              	     1M         pla
00:0F73 AA              	     2M         tax
00:0F74 68              	   222:         pla                             ;restore .Y, .X, and .A from stack
00:0F75 40              	   223:         rti
                        	   224: 

Source: "./src/startup.asm"
                        	    32:         include game.asm

Source: "game.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Game-logic related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Initialize variables when starting a new game
                        	     6: newgame:
                        	     7:         ldbimm maxpell, npelrem
00:0F76 A9B6            	     1M         lda #maxpell
00:0F78 85A7            	     2M         sta npelrem
                        	     8:         ldbimm maxmen, nmenrem
00:0F7A A903            	     1M         lda #maxmen
00:0F7C 85A8            	     2M         sta nmenrem
00:0F7E A900            	     9:         lda #0
00:0F80 85A9            	    10:         sta lvlnum
00:0F82 85FB            	    11:         sta frtena
00:0F84 204310          	    12:         jsr rstscr              ;reset score
00:0F87 4CD909          	    13:         jmp fillmaze            ;fill maze with pellets
                        	    14: 
                        	    15:         ;; Setup next game level
                        	    16: nextlvl:
00:0F8A E6A9            	    17:         inc lvlnum
00:0F8C 20D909          	    18:         jsr fillmaze
00:0F8F 205D09          	    19:         jsr fillcolmem
00:0F92 200A0C          	    20:         jsr initsprt
                        	    21:         ldbimm maxpell, npelrem
00:0F95 A9B6            	     1M         lda #maxpell
00:0F97 85A7            	     2M         sta npelrem
                        	    22:         ldbimm 0, frtena
00:0F99 A900            	     1M         lda #0
00:0F9B 85FB            	     2M         sta frtena
00:0F9D 60              	    23:         rts
                        	    24:         
                        	    25:         ;; Main game loop
                        	    26: gameloop:
00:0F9E A5A7            	    27:         lda npelrem             ;check remaining pellets
00:0FA0 D00C            	    28:         bne rdinpt              ;if <> 0 read joystick input
00:0FA2 A2FF            	    29: :       ldx #$ff
00:0FA4 CA              	    30: :       dex
00:0FA5 D0FD            	    31:         bne :-                  ;delay
00:0FA7 A51F            	    32:         lda irqtmp              ;check if end level animation finished
00:0FA9 D0F7            	    33:         bne :--                 ;no? wait a bit longer
00:0FAB 208A0F          	    34:         jsr nextlvl 
00:0FAE 20A209          	    35: rdinpt: jsr readjoy2
00:0FB1 A901            	    36:         lda #1
00:0FB3 C596            	    37:         cmp joyx
00:0FB5 F009            	    38:         beq move
00:0FB7 B00E            	    39:         bcs chky
                        	    40:         ldbimm w, tmp
00:0FB9 A904            	     1M         lda #w
00:0FBB 851A            	     2M         sta tmp
00:0FBD 4CDD0F          	    41:         jmp chkmov
                        	    42: move:   ldbimm e, tmp
00:0FC0 A905            	     1M         lda #e
00:0FC2 851A            	     2M         sta tmp
00:0FC4 4CDD0F          	    43:         jmp chkmov
00:0FC7 A901            	    44: chky:   lda #1
00:0FC9 C59B            	    45:         cmp joyy
00:0FCB F00C            	    46:         beq movs
                        	    47:         jcs gameloop
00:0FCD 9003            	     1M         bcc :+
00:0FCF 4C9E0F          	     2M         jmp gameloop
                        	     3M :
                        	    48:         ldbimm n, tmp
00:0FD2 A902            	     1M         lda #n
00:0FD4 851A            	     2M         sta tmp
00:0FD6 4CDD0F          	    49:         jmp chkmov
                        	    50: movs:   ldbimm s, tmp
00:0FD9 A903            	     1M         lda #s
00:0FDB 851A            	     2M         sta tmp
00:0FDD A5A6            	    51: chkmov: lda pacrem
00:0FDF 38              	    52:         sec
00:0FE0 E903            	    53:         sbc #3
                        	    54:         jcs chkrvw
00:0FE2 9003            	     1M         bcc :+
00:0FE4 4CEE0F          	     2M         jmp chkrvw
                        	     3M :
                        	    55:         cpbyt tmp, pacnxd
00:0FE7 A51A            	     1M         lda tmp
00:0FE9 85A4            	     2M         sta pacnxd
00:0FEB 4C9E0F          	    56:         jmp gameloop
00:0FEE A5A3            	    57: chkrvw: lda pacdir
00:0FF0 C904            	    58:         cmp #w
00:0FF2 D00C            	    59:         bne chkrve
00:0FF4 A51A            	    60:         lda tmp
00:0FF6 C905            	    61:         cmp #e
                        	    62:         jne gameloop
00:0FF8 F003            	     1M         beq :+
00:0FFA 4C9E0F          	     2M         jmp gameloop
                        	     3M :
00:0FFD 4C2910          	    63:         jmp reverse
00:1000 C905            	    64: chkrve: cmp #e
00:1002 D00C            	    65:         bne chkrvn
00:1004 A51A            	    66:         lda tmp
00:1006 C904            	    67:         cmp #w
                        	    68:         jne gameloop
00:1008 F003            	     1M         beq :+
00:100A 4C9E0F          	     2M         jmp gameloop
                        	     3M :
00:100D 4C2910          	    69:         jmp reverse
00:1010 C902            	    70: chkrvn: cmp #n
00:1012 D00C            	    71:         bne revs
00:1014 A51A            	    72:         lda tmp
00:1016 C903            	    73:         cmp #s
                        	    74:         jne gameloop
00:1018 F003            	     1M         beq :+
00:101A 4C9E0F          	     2M         jmp gameloop
                        	     3M :
00:101D 4C2910          	    75:         jmp reverse
                        	    76: revs:
00:1020 A51A            	    77:         lda tmp
00:1022 C902            	    78:         cmp #n
                        	    79:         jne gameloop
00:1024 F003            	     1M         beq :+
00:1026 4C9E0F          	     2M         jmp gameloop
                        	     3M :
                        	    80: reverse:
00:1029 78              	    81:         sei
                        	    82:         cpbyt tmp, pacdir
00:102A A51A            	     1M         lda tmp
00:102C 85A3            	     2M         sta pacdir
                        	    83:         swpbyt pacsrc, pactar
00:102E A59E            	     1M         lda pacsrc
00:1030 48              	     2M         pha                     ;load byt1 & push onto the stack
00:1031 A59F            	     3M         lda pactar
00:1033 859E            	     4M         sta pacsrc               ;load byt2 & save to byt1
00:1035 68              	     5M         pla
00:1036 859F            	     6M         sta pactar               ;pop byt1 off the stack & save to byt2
00:1038 A5A5            	    84:         lda pacdis
00:103A 38              	    85:         sec
00:103B E5A6            	    86:         sbc pacrem
00:103D 85A6            	    87:         sta pacrem
00:103F 58              	    88:         cli
00:1040 4C9E0F          	    89:         jmp gameloop
                        	    90: 

Source: "./src/startup.asm"
                        	    33:         include score.asm

Source: "score.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Score related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Reset the score to 0
00:1043 A900            	     6: rstscr: lda #0
00:1045 A203            	     7:         ldx #3
00:1047 3006            	     8: :       bmi :+
00:1049 95F7            	     9:         sta score,x
00:104B CA              	    10:         dex
00:104C 4C4710          	    11:         jmp :-
00:104F 60              	    12: :       rts
                        	    13: 
                        	    14:         ;; Score fruit (pts vary by level)
                        	    15:         ;; May only be called from IRQ handler!
                        	    16:         ;; Reads:
                        	    17:         ;;  - lvlnum
                        	    18:         ;; Writes:
                        	    19:         ;;  - irqwrd2
                        	    20:         ;;  - score
00:1050 209410          	    21: scrfrt: jsr lvlfrtpts           ;read fruit points
00:1053 841B            	    22:         sty irqwrd1
00:1055 851C            	    23:         sta irqwrd1+1
00:1057 A205            	    24:         ldx #irqblki
00:1059 4C7610          	    25:         jmp addscr
                        	    26:         
                        	    27:         ;; Score pellet (10 pts)
                        	    28:         ;; Reads:
                        	    29:         ;;  - .X (offset to memory block)
                        	    30:         ;; Writes:
                        	    31:         ;;  - score
00:105C A910            	    32: scrpel: lda #pellpts
00:105E 9516            	    33:         sta buf,x
00:1060 E8              	    34:         inx
00:1061 A900            	    35:         lda #0
00:1063 9516            	    36:         sta buf,x
00:1065 CA              	    37:         dex
00:1066 4C7610          	    38:         jmp addscr
                        	    39: 
                        	    40:         ;; Score energizer (50 pts)
                        	    41:         ;; Reads:
                        	    42:         ;;  - .X (offset to memory block)
                        	    43:         ;; Writes:
                        	    44:         ;;  - 1st word in memory block
                        	    45:         ;;  - score
                        	    46: screnzr:
00:1069 A950            	    47:         lda #enzrpts
00:106B 9516            	    48:         sta buf,x
00:106D E8              	    49:         inx
00:106E A900            	    50:         lda #0
00:1070 9516            	    51:         sta buf,x
00:1072 CA              	    52:         dex
00:1073 4C7610          	    53:         jmp addscr
                        	    54:       
                        	    55:         ;; Add 16-bit BCD value to score
                        	    56:         ;; Reads:
                        	    57:         ;;  - .X: index into buffer to access memory block
                        	    58:         ;;  - 1st word in memory block containing 4 BCD digits
                        	    59:         ;; Writes:
                        	    60:         ;;  - score
00:1076 F8              	    61: addscr: sed
00:1077 18              	    62:         clc
00:1078 A5F7            	    63:         lda score
00:107A 7516            	    64:         adc buf,x
00:107C 85F7            	    65:         sta score
00:107E A5F8            	    66:         lda score+1
00:1080 E8              	    67:         inx
00:1081 7516            	    68:         adc buf,x 
00:1083 85F8            	    69:         sta score+1
00:1085 A5F9            	    70:         lda score+2
00:1087 6900            	    71:         adc #0
00:1089 85F9            	    72:         sta score+2
00:108B A5FA            	    73:         lda score+3
00:108D 6900            	    74:         adc #0
00:108F 85FA            	    75:         sta score+3
00:1091 D8              	    76:         cld
00:1092 CA              	    77:         dex
00:1093 60              	    78:         rts
                        	    79: 

Source: "./src/startup.asm"
                        	    34:         include fruit.asm

Source: "fruit.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Fruit related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Get fruit bonus points by level number
                        	     6:         ;; Reads:
                        	     7:         ;;  - lvlnum
                        	     8:         ;;  - frtsptbl
                        	     9:         ;; Write:
                        	    10:         ;;  - .Y (points lo-byte)
                        	    11:         ;;  - .A (points hi-byte)
                        	    12:         ;; Clobbers:
                        	    13:         ;;  - .X
                        	    14: lvlfrtpts:
00:1094 A200            	    15:         ldx #0
00:1096 BDFE16          	    16: :       lda frtsptbl,x
00:1099 C9FF            	    17:         cmp #$ff
00:109B F019            	    18:         beq :++
00:109D C5A9            	    19:         cmp lvlnum
00:109F F009            	    20:         beq :+
00:10A1 E8              	    21:         inx
00:10A2 E8              	    22:         inx
00:10A3 E8              	    23:         inx
00:10A4 E8              	    24:         inx
00:10A5 E8              	    25:         inx
00:10A6 E8              	    26:         inx
00:10A7 4C9610          	    27:         jmp :-
00:10AA E8              	    28: :       inx
00:10AB E8              	    29:         inx
00:10AC E8              	    30:         inx
00:10AD E8              	    31:         inx
00:10AE BDFE16          	    32:         lda frtsptbl,x          ;load points (lo)
00:10B1 A8              	    33:         tay
00:10B2 E8              	    34:         inx
00:10B3 BDFE16          	    35:         lda frtsptbl,x          ;load points (hi)
00:10B6 60              	    36: :       rts
                        	    37: 
                        	    38:         ;; Get fruit sprite index by level number
                        	    39:         ;; Reads:
                        	    40:         ;;  - lvlnum
                        	    41:         ;;  - frtsptbl
                        	    42:         ;; Writes:
                        	    43:         ;;  - .A (fruit sprite index)
                        	    44:         ;; Clobbers:
                        	    45:         ;;  - .X
                        	    46: lvlfrtspix:
00:10B7 A200            	    47:         ldx #0
00:10B9 BDFE16          	    48: :       lda frtsptbl,x
00:10BC C9FF            	    49:         cmp #$ff        
00:10BE F011            	    50:         beq :++                 ;end marker?
00:10C0 C5A9            	    51:         cmp lvlnum
00:10C2 F009            	    52:         beq :+                  ;found row for level?
00:10C4 E8              	    53:         inx
00:10C5 E8              	    54:         inx
00:10C6 E8              	    55:         inx
00:10C7 E8              	    56:         inx
00:10C8 E8              	    57:         inx
00:10C9 E8              	    58:         inx
00:10CA 4CB910          	    59:         jmp :-                  ;no, keep looking
00:10CD E8              	    60: :       inx                     ;yes...
00:10CE BDFE16          	    61:         lda frtsptbl,x          ;...load sprite index
00:10D1 60              	    62: :       rts
                        	    63: 
                        	    64:         ;; Get fruit sp0mem offset
                        	    65:         ;; Reads:
                        	    66:         ;;  - lvlnum
                        	    67:         ;;  - frtsptbl
                        	    68:         ;; Writes:
                        	    69:         ;;  - .Y (offset lo byte)
                        	    70:         ;;  - .A (offset hi byte)
                        	    71:         ;; Clobbers:
                        	    72:         ;;  - .X
                        	    73: lvlfrtspof:
00:10D2 A200            	    74:         ldx #0
00:10D4 BDFE16          	    75: :       lda frtsptbl,x
00:10D7 C9FF            	    76:         cmp #$ff        
00:10D9 F017            	    77:         beq :++                 ;end marker?
00:10DB C5A9            	    78:         cmp lvlnum
00:10DD F009            	    79:         beq :+                  ;found row for level?
00:10DF E8              	    80:         inx
00:10E0 E8              	    81:         inx
00:10E1 E8              	    82:         inx
00:10E2 E8              	    83:         inx
00:10E3 E8              	    84:         inx
00:10E4 E8              	    85:         inx
00:10E5 4CD410          	    86:         jmp :-                  ;no, keep looking
00:10E8 E8              	    87: :       inx                     ;yes...
00:10E9 E8              	    88:         inx
00:10EA BDFE16          	    89:         lda frtsptbl,x          ;load offset (lo)
00:10ED A8              	    90:         tay
00:10EE E8              	    91:         inx
00:10EF BDFE16          	    92:         lda frtsptbl,x          ;load offset (hi)
00:10F2 60              	    93: :       rts
                        	    94:         
                        	    95:         ;; Check number of pellets remaining and enable fruit if
                        	    96:         ;; - 130 pellets remaining OR
                        	    97:         ;; - 55 pellets remaining
                        	    98:         ;; May only be called from IRQ handler!
                        	    99:         ;; Clobbers:
                        	   100:         ;;  - irqwrd1
                        	   101: showfrt:
00:10F3 A5A7            	   102:         lda npelrem
00:10F5 C982            	   103:         cmp #130
00:10F7 F005            	   104:         beq :+
00:10F9 C937            	   105:         cmp #55
00:10FB F001            	   106:         beq :+
00:10FD 60              	   107:         rts
                        	   108:         ;; Set sprite pointers
00:10FE 20B710          	   109: :       jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:1101 18              	   110:         clc
00:1102 6940            	   111:         adc #sp0loc
00:1104 8DF94F          	   112:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	   113:         ina                     ;increment .A
00:1107 A8              	     1M         tay
00:1108 C8              	     2M         iny
00:1109 98              	     3M         tya
00:110A 8DFA4F          	   114:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	   115:         ;; Set sprite colours
00:110D 20D210          	   116:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:1110 841B            	   117:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:1112 851C            	   118:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	   119:         adcwimm sp0mem, irqwrd1
00:1114 18              	     1M         clc
00:1115 A51B            	     2M         lda irqwrd1
00:1117 6900            	     3M         adc #<sp0mem
00:1119 851B            	     4M         sta irqwrd1
00:111B A51C            	     5M         lda irqwrd1+1
00:111D 6950            	     6M         adc #>sp0mem
00:111F 851C            	     7M         sta irqwrd1+1
00:1121 A03F            	   120:         ldy #$3f                ;index to sprite colour value
00:1123 B11B            	   121:         lda (irqwrd1),y         ;load sprite colour value
00:1125 290F            	   122:         and #%00001111          ;mask out hi nybble
00:1127 8D28D0          	   123:         sta sp0col+1            ;write to sprite 1 colour register 
                        	   124:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:112A 18              	     1M         clc
00:112B A51B            	     2M         lda irqwrd1  
00:112D 6940            	     3M         adc #<$0040
00:112F 851B            	     4M         sta irqwrd1  
00:1131 A51C            	     5M         lda irqwrd1  +1
00:1133 6900            	     6M         adc #>$0040
00:1135 851C            	     7M         sta irqwrd1  +1
00:1137 B11B            	   125:         lda (irqwrd1),y         ;load sprite colour value
00:1139 290F            	   126:         and #%00001111          ;mask out hi nybble
00:113B 8D29D0          	   127:         sta sp0col+2            ;write to sprite 2 colour register
                        	   128:         ;; Set sprite x,y locations
                        	   129:         ldbimm frxpos, sp1x
00:113E A967            	     1M         lda #frxpos
00:1140 8D02D0          	     2M         sta sp1x
                        	   130:         ldbimm frxpos, sp2x
00:1143 A967            	     1M         lda #frxpos
00:1145 8D04D0          	     2M         sta sp2x
                        	   131:         ldbimm frypos, sp1y
00:1148 A9A2            	     1M         lda #frypos
00:114A 8D03D0          	     2M         sta sp1y
                        	   132:         ldbimm frypos, sp2y
00:114D A9A2            	     1M         lda #frypos
00:114F 8D05D0          	     2M         sta sp2y
                        	   133:         ;; Enable sprites 1+2
00:1152 AD15D0          	   134:         lda spena
00:1155 0906            	   135:         ora #%00000110
00:1157 8D15D0          	   136:         sta spena
                        	   137:         ;; Start fruit timer countdown
                        	   138:         ldbimm 1, frtena
00:115A A901            	     1M         lda #1
00:115C 85FB            	     2M         sta frtena
00:115E 60              	   139:         rts
                        	   140: 
                        	   141:         ;; Hide fruit
                        	   142: hidefrt:
00:115F AD15D0          	   143:         lda spena
00:1162 29F9            	   144:         and #%11111001
00:1164 8D15D0          	   145:         sta spena               ;disable sprites 1+2
                        	   146:         ldbimm 0, frtena        ;disable fruit timer
00:1167 A900            	     1M         lda #0
00:1169 85FB            	     2M         sta frtena        
00:116B 60              	   147:         rts
                        	   148: 

Source: "./src/startup.asm"
                        	    35: 
                        	    36:         ;; Include tables
                        	    37:         include tables.asm

Source: "tables.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Data table definitions
                        	     3:         ;; ============================================================
                        	     4:         
                        	     5:         ;; Node table
                        	     6:         ;; Format:        
                        	     7:         ;;  - byte x,y (node loc in sprite coords)
                        	     8:         ;;  - byte n,s,w,e (indices of neighboring nodes)
                        	     9: nodetbl:
                        	    10:         ;; Row 1
00:116C 20              	    11:         byte $20,$3a,$ff,$06,$ff,$01
00:116D 3A
00:116E FF
00:116F 06
00:1170 FF
00:1171 01
00:1172 40              	    12:         byte $40,$3a,$ff,$07,$00,$02
00:1173 3A
00:1174 FF
00:1175 07
00:1176 00
00:1177 02
00:1178 60              	    13:         byte $60,$3a,$ff,$09,$01,$ff
00:1179 3A
00:117A FF
00:117B 09
00:117C 01
00:117D FF
00:117E 70              	    14:         byte $70,$3a,$ff,$0a,$ff,$04
00:117F 3A
00:1180 FF
00:1181 0A
00:1182 FF
00:1183 04
00:1184 90              	    15:         byte $90,$3a,$ff,$0c,$03,$05
00:1185 3A
00:1186 FF
00:1187 0C
00:1188 03
00:1189 05
00:118A B0              	    16:         byte $b0,$3a,$ff,$0d,$04,$ff
00:118B 3A
00:118C FF
00:118D 0D
00:118E 04
00:118F FF
                        	    17:         ;; Row 2
00:1190 20              	    18:         byte $20,$52,$00,$0e,$ff,$07
00:1191 52
00:1192 00
00:1193 0E
00:1194 FF
00:1195 07
00:1196 40              	    19:         byte $40,$52,$01,$0f,$06,$08
00:1197 52
00:1198 01
00:1199 0F
00:119A 06
00:119B 08
00:119C 50              	    20:         byte $50,$52,$ff,$10,$07,$09
00:119D 52
00:119E FF
00:119F 10
00:11A0 07
00:11A1 09
00:11A2 60              	    21:         byte $60,$52,$02,$ff,$08,$0a
00:11A3 52
00:11A4 02
00:11A5 FF
00:11A6 08
00:11A7 0A
00:11A8 70              	    22:         byte $70,$52,$03,$ff,$09,$0b
00:11A9 52
00:11AA 03
00:11AB FF
00:11AC 09
00:11AD 0B
00:11AE 80              	    23:         byte $80,$52,$ff,$13,$0a,$0c
00:11AF 52
00:11B0 FF
00:11B1 13
00:11B2 0A
00:11B3 0C
00:11B4 90              	    24:         byte $90,$52,$04,$14,$0b,$0d
00:11B5 52
00:11B6 04
00:11B7 14
00:11B8 0B
00:11B9 0D
00:11BA B0              	    25:         byte $b0,$52,$05,$15,$0c,$ff
00:11BB 52
00:11BC 05
00:11BD 15
00:11BE 0C
00:11BF FF
                        	    26:         ;; Row 3
00:11C0 20              	    27:         byte $20,$6a,$06,$ff,$ff,$0f
00:11C1 6A
00:11C2 06
00:11C3 FF
00:11C4 FF
00:11C5 0F
00:11C6 40              	    28:         byte $40,$6a,$07,$1c,$0e,$ff
00:11C7 6A
00:11C8 07
00:11C9 1C
00:11CA 0E
00:11CB FF
00:11CC 50              	    29:         byte $50,$6a,$08,$ff,$ff,$11
00:11CD 6A
00:11CE 08
00:11CF FF
00:11D0 FF
00:11D1 11
00:11D2 60              	    30:         byte $60,$6a,$ff,$17,$10,$ff
00:11D3 6A
00:11D4 FF
00:11D5 17
00:11D6 10
00:11D7 FF
00:11D8 70              	    31:         byte $70,$6a,$ff,$19,$ff,$13
00:11D9 6A
00:11DA FF
00:11DB 19
00:11DC FF
00:11DD 13
00:11DE 80              	    32:         byte $80,$6a,$0b,$ff,$12,$ff
00:11DF 6A
00:11E0 0B
00:11E1 FF
00:11E2 12
00:11E3 FF
00:11E4 90              	    33:         byte $90,$6a,$0c,$20,$ff,$15
00:11E5 6A
00:11E6 0C
00:11E7 20
00:11E8 FF
00:11E9 15
00:11EA B0              	    34:         byte $b0,$6a,$0d,$ff,$14,$ff
00:11EB 6A
00:11EC 0D
00:11ED FF
00:11EE 14
00:11EF FF
                        	    35:         ;; Row 4
00:11F0 50              	    36:         byte $50,$7a,$ff,$1d,$ff,$17
00:11F1 7A
00:11F2 FF
00:11F3 1D
00:11F4 FF
00:11F5 17
00:11F6 60              	    37:         byte $60,$7a,$11,$ff,$16,$18
00:11F7 7A
00:11F8 11
00:11F9 FF
00:11FA 16
00:11FB 18
00:11FC 68              	    38:         byte $68,$7a,$ff,$1e,$17,$19
00:11FD 7A
00:11FE FF
00:11FF 1E
00:1200 17
00:1201 19
00:1202 70              	    39:         byte $70,$7a,$12,$ff,$18,$1a
00:1203 7A
00:1204 12
00:1205 FF
00:1206 18
00:1207 1A
00:1208 80              	    40:         byte $80,$7a,$ff,$1f,$19,$ff
00:1209 7A
00:120A FF
00:120B 1F
00:120C 19
00:120D FF
                        	    41:         ;; Row 5
00:120E 18              	    42:         byte $18,$92,$ff,$ff,$21,$1c
00:120F 92
00:1210 FF
00:1211 FF
00:1212 21
00:1213 1C
00:1214 40              	    43:         byte $40,$92,$0f,$25,$1b,$1d
00:1215 92
00:1216 0F
00:1217 25
00:1218 1B
00:1219 1D
00:121A 50              	    44:         byte $50,$92,$16,$22,$1c,$ff
00:121B 92
00:121C 16
00:121D 22
00:121E 1C
00:121F FF
00:1220 68              	    45:         byte $68,$92,$18,$ff,$ff,$ff
00:1221 92
00:1222 18
00:1223 FF
00:1224 FF
00:1225 FF
00:1226 80              	    46:         byte $80,$92,$1a,$23,$ff,$20
00:1227 92
00:1228 1A
00:1229 23
00:122A FF
00:122B 20
00:122C 90              	    47:         byte $90,$92,$14,$2a,$1f,$21
00:122D 92
00:122E 14
00:122F 2A
00:1230 1F
00:1231 21
00:1232 B8              	    48:         byte $b8,$92,$ff,$ff,$20,$1b
00:1233 92
00:1234 FF
00:1235 FF
00:1236 20
00:1237 1B
                        	    49:         ;; Row 6
00:1238 50              	    50:         byte $50,$a2,$1d,$26,$ff,$23
00:1239 A2
00:123A 1D
00:123B 26
00:123C FF
00:123D 23
00:123E 80              	    51:         byte $80,$a2,$1f,$29,$22,$ff
00:123F A2
00:1240 1F
00:1241 29
00:1242 22
00:1243 FF
                        	    52:         ;; Row 7
00:1244 20              	    53:         byte $20,$ba,$ff,$2c,$ff,$25
00:1245 BA
00:1246 FF
00:1247 2C
00:1248 FF
00:1249 25
00:124A 40              	    54:         byte $40,$ba,$1c,$2e,$24,$26
00:124B BA
00:124C 1C
00:124D 2E
00:124E 24
00:124F 26
00:1250 50              	    55:         byte $50,$ba,$22,$ff,$25,$27
00:1251 BA
00:1252 22
00:1253 FF
00:1254 25
00:1255 27
00:1256 60              	    56:         byte $60,$ba,$ff,$30,$26,$ff
00:1257 BA
00:1258 FF
00:1259 30
00:125A 26
00:125B FF
00:125C 70              	    57:         byte $70,$ba,$ff,$32,$ff,$29
00:125D BA
00:125E FF
00:125F 32
00:1260 FF
00:1261 29
00:1262 80              	    58:         byte $80,$ba,$23,$ff,$28,$2a
00:1263 BA
00:1264 23
00:1265 FF
00:1266 28
00:1267 2A
00:1268 90              	    59:         byte $90,$ba,$20,$34,$29,$2b
00:1269 BA
00:126A 20
00:126B 34
00:126C 29
00:126D 2B
00:126E B0              	    60:         byte $b0,$ba,$ff,$36,$2a,$ff
00:126F BA
00:1270 FF
00:1271 36
00:1272 2A
00:1273 FF
                        	    61:         ;; Row 8
00:1274 20              	    62:         byte $20,$ca,$24,$ff,$ff,$2d
00:1275 CA
00:1276 24
00:1277 FF
00:1278 FF
00:1279 2D
00:127A 30              	    63:         byte $30,$ca,$ff,$38,$2c,$ff
00:127B CA
00:127C FF
00:127D 38
00:127E 2C
00:127F FF
00:1280 40              	    64:         byte $40,$ca,$25,$39,$ff,$2f
00:1281 CA
00:1282 25
00:1283 39
00:1284 FF
00:1285 2F
00:1286 50              	    65:         byte $50,$ca,$ff,$3a,$2e,$30
00:1287 CA
00:1288 FF
00:1289 3A
00:128A 2E
00:128B 30
00:128C 60              	    66:         byte $60,$ca,$27,$ff,$2f,$31
00:128D CA
00:128E 27
00:128F FF
00:1290 2F
00:1291 31
00:1292 68              	    67:         byte $68,$ca,$ff,$ff,$30,$32
00:1293 CA
00:1294 FF
00:1295 FF
00:1296 30
00:1297 32
00:1298 70              	    68:         byte $70,$ca,$28,$ff,$31,$33
00:1299 CA
00:129A 28
00:129B FF
00:129C 31
00:129D 33
00:129E 80              	    69:         byte $80,$ca,$ff,$3d,$32,$34
00:129F CA
00:12A0 FF
00:12A1 3D
00:12A2 32
00:12A3 34
00:12A4 90              	    70:         byte $90,$ca,$2a,$3e,$33,$ff
00:12A5 CA
00:12A6 2A
00:12A7 3E
00:12A8 33
00:12A9 FF
00:12AA A0              	    71:         byte $a0,$ca,$ff,$3f,$ff,$36
00:12AB CA
00:12AC FF
00:12AD 3F
00:12AE FF
00:12AF 36
00:12B0 B0              	    72:         byte $b0,$ca,$2b,$ff,$35,$ff
00:12B1 CA
00:12B2 2B
00:12B3 FF
00:12B4 35
00:12B5 FF
                        	    73:         ;; Row 9
00:12B6 20              	    74:         byte $20,$da,$ff,$41,$ff,$38
00:12B7 DA
00:12B8 FF
00:12B9 41
00:12BA FF
00:12BB 38
00:12BC 30              	    75:         byte $30,$da,$2d,$ff,$37,$39
00:12BD DA
00:12BE 2D
00:12BF FF
00:12C0 37
00:12C1 39
00:12C2 40              	    76:         byte $40,$da,$2e,$ff,$38,$ff
00:12C3 DA
00:12C4 2E
00:12C5 FF
00:12C6 38
00:12C7 FF
00:12C8 50              	    77:         byte $50,$da,$2f,$ff,$ff,$3b
00:12C9 DA
00:12CA 2F
00:12CB FF
00:12CC FF
00:12CD 3B
00:12CE 60              	    78:         byte $60,$da,$ff,$42,$3a,$ff
00:12CF DA
00:12D0 FF
00:12D1 42
00:12D2 3A
00:12D3 FF
00:12D4 70              	    79:         byte $70,$da,$ff,$43,$ff,$3d
00:12D5 DA
00:12D6 FF
00:12D7 43
00:12D8 FF
00:12D9 3D
00:12DA 80              	    80:         byte $80,$da,$33,$ff,$3c,$ff
00:12DB DA
00:12DC 33
00:12DD FF
00:12DE 3C
00:12DF FF
00:12E0 90              	    81:         byte $90,$da,$34,$ff,$ff,$3f
00:12E1 DA
00:12E2 34
00:12E3 FF
00:12E4 FF
00:12E5 3F
00:12E6 A0              	    82:         byte $a0,$da,$35,$ff,$3e,$40
00:12E7 DA
00:12E8 35
00:12E9 FF
00:12EA 3E
00:12EB 40
00:12EC B0              	    83:         byte $b0,$da,$ff,$44,$3f,$ff
00:12ED DA
00:12EE FF
00:12EF 44
00:12F0 3F
00:12F1 FF
                        	    84:         ;; Row 10
00:12F2 20              	    85:         byte $20,$ea,$37,$ff,$ff,$42
00:12F3 EA
00:12F4 37
00:12F5 FF
00:12F6 FF
00:12F7 42
00:12F8 60              	    86:         byte $60,$ea,$3b,$ff,$41,$43
00:12F9 EA
00:12FA 3B
00:12FB FF
00:12FC 41
00:12FD 43
00:12FE 70              	    87:         byte $70,$ea,$3c,$ff,$42,$44
00:12FF EA
00:1300 3C
00:1301 FF
00:1302 42
00:1303 44
00:1304 B0              	    88:         byte $b0,$ea,$40,$ff,$43,$ff
00:1305 EA
00:1306 40
00:1307 FF
00:1308 43
00:1309 FF
                        	    89: 
                        	    90: 
                        	    91:         ;; Pellet table
                        	    92:         ;; Format:        
                        	    93:         ;;  - word address (screen memory address)
                        	    94:         ;;  - byte status (0=eaten, 1=not eaten)
                        	    95:         ;;  - byte x,y (sprite coordinates of char)
                        	    96: pelltbl:
                        	    97:         ;; Row 1
00:130A 2900            	    98:         word $0029
00:130C 01              	    99:         byte 1,$20,$3a
00:130D 20
00:130E 3A
00:130F 2A00            	   100:         word $002a
00:1311 01              	   101:         byte 1,$28,$3a
00:1312 28
00:1313 3A
00:1314 2B00            	   102:         word $002b
00:1316 01              	   103:         byte 1,$30,$3a
00:1317 30
00:1318 3A
00:1319 2C00            	   104:         word $002c
00:131B 01              	   105:         byte 1,$38,$3a
00:131C 38
00:131D 3A
00:131E 2D00            	   106:         word $002d
00:1320 01              	   107:         byte 1,$40,$3a
00:1321 40
00:1322 3A
00:1323 2E00            	   108:         word $002e
00:1325 01              	   109:         byte 1,$48,$3a
00:1326 48
00:1327 3A
00:1328 2F00            	   110:         word $002f
00:132A 01              	   111:         byte 1,$50,$3a
00:132B 50
00:132C 3A
00:132D 3000            	   112:         word $0030
00:132F 01              	   113:         byte 1,$58,$3a
00:1330 58
00:1331 3A
00:1332 3100            	   114:         word $0031
00:1334 01              	   115:         byte 1,$60,$3a
00:1335 60
00:1336 3A
00:1337 3300            	   116:         word $0033
00:1339 01              	   117:         byte 1,$70,$3a
00:133A 70
00:133B 3A
00:133C 3400            	   118:         word $0034
00:133E 01              	   119:         byte 1,$78,$3a
00:133F 78
00:1340 3A
00:1341 3500            	   120:         word $0035
00:1343 01              	   121:         byte 1,$80,$3a
00:1344 80
00:1345 3A
00:1346 3600            	   122:         word $0036
00:1348 01              	   123:         byte 1,$88,$3a
00:1349 88
00:134A 3A
00:134B 3700            	   124:         word $0037
00:134D 01              	   125:         byte 1,$90,$3a
00:134E 90
00:134F 3A
00:1350 3800            	   126:         word $0038
00:1352 01              	   127:         byte 1,$98,$3a
00:1353 98
00:1354 3A
00:1355 3900            	   128:         word $0039
00:1357 01              	   129:         byte 1,$a0,$3a
00:1358 A0
00:1359 3A
00:135A 3A00            	   130:         word $003a
00:135C 01              	   131:         byte 1,$a8,$3a
00:135D A8
00:135E 3A
00:135F 3B00            	   132:         word $003b
00:1361 01              	   133:         byte 1,$b0,$3a
00:1362 B0
00:1363 3A
                        	   134:         ;; Row 2
00:1364 5100            	   135:         word $0051
00:1366 01              	   136:         byte 1,$20,$42          ;energizer
00:1367 20
00:1368 42
00:1369 5500            	   137:         word $0055
00:136B 01              	   138:         byte 1,$40,$42
00:136C 40
00:136D 42
00:136E 5900            	   139:         word $0059
00:1370 01              	   140:         byte 1,$60,$42
00:1371 60
00:1372 42
00:1373 5B00            	   141:         word $005b
00:1375 01              	   142:         byte 1,$70,$42
00:1376 70
00:1377 42
00:1378 5F00            	   143:         word $005f
00:137A 01              	   144:         byte 1,$90,$42
00:137B 90
00:137C 42
00:137D 6300            	   145:         word $0063
00:137F 01              	   146:         byte 1,$b0,$42          ;energizer
00:1380 B0
00:1381 42
                        	   147:         ;; Row 3
00:1382 7900            	   148:         word $0079
00:1384 01              	   149:         byte 1,$20,$4a
00:1385 20
00:1386 4A
00:1387 7D00            	   150:         word $007d
00:1389 01              	   151:         byte 1,$40,$4a
00:138A 40
00:138B 4A
00:138C 8100            	   152:         word $0081
00:138E 01              	   153:         byte 1,$60,$4a
00:138F 60
00:1390 4A
00:1391 8300            	   154:         word $0083
00:1393 01              	   155:         byte 1,$70,$4a
00:1394 70
00:1395 4A
00:1396 8700            	   156:         word $0087
00:1398 01              	   157:         byte 1,$90,$4a
00:1399 90
00:139A 4A
00:139B 8B00            	   158:         word $008b
00:139D 01              	   159:         byte 1,$b0,$4a
00:139E B0
00:139F 4A
                        	   160:         ;; Row 4
00:13A0 A100            	   161:         word $00a1
00:13A2 01              	   162:         byte 1,$20,$52
00:13A3 20
00:13A4 52
00:13A5 A200            	   163:         word $00a2
00:13A7 01              	   164:         byte 1,$28,$52
00:13A8 28
00:13A9 52
00:13AA A300            	   165:         word $00a3
00:13AC 01              	   166:         byte 1,$30,$52
00:13AD 30
00:13AE 52
00:13AF A400            	   167:         word $00a4
00:13B1 01              	   168:         byte 1,$38,$52
00:13B2 38
00:13B3 52
00:13B4 A500            	   169:         word $00a5
00:13B6 01              	   170:         byte 1,$40,$52
00:13B7 40
00:13B8 52
00:13B9 A600            	   171:         word $00a6
00:13BB 01              	   172:         byte 1,$48,$52
00:13BC 48
00:13BD 52
00:13BE A700            	   173:         word $00a7
00:13C0 01              	   174:         byte 1,$50,$52
00:13C1 50
00:13C2 52
00:13C3 A800            	   175:         word $00a8
00:13C5 01              	   176:         byte 1,$58,$52
00:13C6 58
00:13C7 52
00:13C8 A900            	   177:         word $00a9
00:13CA 01              	   178:         byte 1,$60,$52
00:13CB 60
00:13CC 52
00:13CD AA00            	   179:         word $00aa
00:13CF 01              	   180:         byte 1,$68,$52
00:13D0 68
00:13D1 52
00:13D2 AB00            	   181:         word $00ab
00:13D4 01              	   182:         byte 1,$70,$52
00:13D5 70
00:13D6 52
00:13D7 AC00            	   183:         word $00ac
00:13D9 01              	   184:         byte 1,$78,$52
00:13DA 78
00:13DB 52
00:13DC AD00            	   185:         word $00ad
00:13DE 01              	   186:         byte 1,$80,$52
00:13DF 80
00:13E0 52
00:13E1 AE00            	   187:         word $00ae
00:13E3 01              	   188:         byte 1,$88,$52
00:13E4 88
00:13E5 52
00:13E6 AF00            	   189:         word $00af
00:13E8 01              	   190:         byte 1,$90,$52
00:13E9 90
00:13EA 52
00:13EB B000            	   191:         word $00b0
00:13ED 01              	   192:         byte 1,$98,$52
00:13EE 98
00:13EF 52
00:13F0 B100            	   193:         word $00b1
00:13F2 01              	   194:         byte 1,$a0,$52
00:13F3 A0
00:13F4 52
00:13F5 B200            	   195:         word $00b2
00:13F7 01              	   196:         byte 1,$a8,$52
00:13F8 A8
00:13F9 52
00:13FA B300            	   197:         word $00b3
00:13FC 01              	   198:         byte 1,$b0,$52
00:13FD B0
00:13FE 52
                        	   199:         ;; Row 5
00:13FF C900            	   200:         word $00c9
00:1401 01              	   201:         byte 1,$20,$5a
00:1402 20
00:1403 5A
00:1404 CD00            	   202:         word $00cd
00:1406 01              	   203:         byte 1,$40,$5a
00:1407 40
00:1408 5A
00:1409 CF00            	   204:         word $00cf
00:140B 01              	   205:         byte 1,$50,$5a
00:140C 50
00:140D 5A
00:140E D500            	   206:         word $00d5
00:1410 01              	   207:         byte 1,$80,$5a
00:1411 80
00:1412 5A
00:1413 D700            	   208:         word $00d7
00:1415 01              	   209:         byte 1,$90,$5a
00:1416 90
00:1417 5A
00:1418 DB00            	   210:         word $00db
00:141A 01              	   211:         byte 1,$b0,$5a
00:141B B0
00:141C 5A
                        	   212:         ;; Row 6
00:141D F100            	   213:         word $00f1
00:141F 01              	   214:         byte 1,$20,$62
00:1420 20
00:1421 62
00:1422 F500            	   215:         word $00f5
00:1424 01              	   216:         byte 1,$40,$62
00:1425 40
00:1426 62
00:1427 F700            	   217:         word $00f7
00:1429 01              	   218:         byte 1,$50,$62
00:142A 50
00:142B 62
00:142C FD00            	   219:         word $00fd
00:142E 01              	   220:         byte 1,$80,$62
00:142F 80
00:1430 62
00:1431 FF00            	   221:         word $00ff
00:1433 01              	   222:         byte 1,$90,$62
00:1434 90
00:1435 62
00:1436 0301            	   223:         word $0103
00:1438 01              	   224:         byte 1,$b0,$62
00:1439 B0
00:143A 62
                        	   225:         ;; Row 7
00:143B 1901            	   226:         word $0119
00:143D 01              	   227:         byte 1,$20,$6a
00:143E 20
00:143F 6A
00:1440 1A01            	   228:         word $011a
00:1442 01              	   229:         byte 1,$28,$6a
00:1443 28
00:1444 6A
00:1445 1B01            	   230:         word $011b
00:1447 01              	   231:         byte 1,$30,$6a
00:1448 30
00:1449 6A
00:144A 1C01            	   232:         word $011c
00:144C 01              	   233:         byte 1,$38,$6a
00:144D 38
00:144E 6A
00:144F 1D01            	   234:         word $011d
00:1451 01              	   235:         byte 1,$40,$6a
00:1452 40
00:1453 6A
00:1454 1F01            	   236:         word $011f
00:1456 01              	   237:         byte 1,$50,$6a
00:1457 50
00:1458 6A
00:1459 2001            	   238:         word $0120
00:145B 01              	   239:         byte 1,$58,$6a
00:145C 58
00:145D 6A
00:145E 2101            	   240:         word $0121
00:1460 01              	   241:         byte 1,$60,$6a
00:1461 60
00:1462 6A
00:1463 2301            	   242:         word $0123
00:1465 01              	   243:         byte 1,$70,$6a
00:1466 70
00:1467 6A
00:1468 2401            	   244:         word $0124
00:146A 01              	   245:         byte 1,$78,$6a
00:146B 78
00:146C 6A
00:146D 2501            	   246:         word $0125
00:146F 01              	   247:         byte 1,$80,$6a
00:1470 80
00:1471 6A
00:1472 2701            	   248:         word $0127
00:1474 01              	   249:         byte 1,$90,$6a
00:1475 90
00:1476 6A
00:1477 2801            	   250:         word $0128
00:1479 01              	   251:         byte 1,$98,$6a
00:147A 98
00:147B 6A
00:147C 2901            	   252:         word $0129
00:147E 01              	   253:         byte 1,$a0,$6a
00:147F A0
00:1480 6A
00:1481 2A01            	   254:         word $012a
00:1483 01              	   255:         byte 1,$a8,$6a
00:1484 A8
00:1485 6A
00:1486 2B01            	   256:         word $012b
00:1488 01              	   257:         byte 1,$b0,$6a
00:1489 B0
00:148A 6A
                        	   258:         ;; Row 8
00:148B 4501            	   259:         word $0145
00:148D 01              	   260:         byte 1,$40,$72
00:148E 40
00:148F 72
00:1490 4901            	   261:         word $0149
00:1492 01              	   262:         byte 1,$60,$72
00:1493 60
00:1494 72
00:1495 4B01            	   263:         word $014b
00:1497 01              	   264:         byte 1,$70,$72
00:1498 70
00:1499 72
00:149A 4F01            	   265:         word $014f
00:149C 01              	   266:         byte 1,$90,$72
00:149D 90
00:149E 72
                        	   267:         ;; Row 9
00:149F 6D01            	   268:         word $016d
00:14A1 01              	   269:         byte 1,$40,$7a
00:14A2 40
00:14A3 7A
00:14A4 7701            	   270:         word $0177
00:14A6 01              	   271:         byte 1,$90,$7a
00:14A7 90
00:14A8 7A
                        	   272:         ;; Row 10
00:14A9 9501            	   273:         word $0195
00:14AB 01              	   274:         byte 1,$40,$82
00:14AC 40
00:14AD 82
00:14AE 9F01            	   275:         word $019f
00:14B0 01              	   276:         byte 1,$90,$82
00:14B1 90
00:14B2 82
                        	   277:         ;; Row 11
00:14B3 BD01            	   278:         word $01bd
00:14B5 01              	   279:         byte 1,$40,$8a
00:14B6 40
00:14B7 8A
00:14B8 C701            	   280:         word $01c7
00:14BA 01              	   281:         byte 1,$90,$8a
00:14BB 90
00:14BC 8A
                        	   282:         ;; Row 12
00:14BD E501            	   283:         word $01e5
00:14BF 01              	   284:         byte 1,$40,$92
00:14C0 40
00:14C1 92
00:14C2 EF01            	   285:         word $01ef
00:14C4 01              	   286:         byte 1,$90,$92
00:14C5 90
00:14C6 92
                        	   287:         ;; Row 13
00:14C7 0D02            	   288:         word $020d
00:14C9 01              	   289:         byte 1,$40,$9a
00:14CA 40
00:14CB 9A
00:14CC 1702            	   290:         word $0217
00:14CE 01              	   291:         byte 1,$90,$9a
00:14CF 90
00:14D0 9A
                        	   292:         ;; Row 14
00:14D1 3502            	   293:         word $0235
00:14D3 01              	   294:         byte 1,$40,$a2
00:14D4 40
00:14D5 A2
00:14D6 3F02            	   295:         word $023f
00:14D8 01              	   296:         byte 1,$90,$a2
00:14D9 90
00:14DA A2
                        	   297:         ;; Row 15
00:14DB 5D02            	   298:         word $025d
00:14DD 01              	   299:         byte 1,$40,$aa
00:14DE 40
00:14DF AA
00:14E0 6702            	   300:         word $0267
00:14E2 01              	   301:         byte 1,$90,$aa
00:14E3 90
00:14E4 AA
                        	   302:         ;; Row 16
00:14E5 8502            	   303:         word $0285
00:14E7 01              	   304:         byte 1,$40,$b2
00:14E8 40
00:14E9 B2
00:14EA 8F02            	   305:         word $028f
00:14EC 01              	   306:         byte 1,$90,$b2
00:14ED 90
00:14EE B2
                        	   307:         ;; Row 17
00:14EF A902            	   308:         word $02a9
00:14F1 01              	   309:         byte 1,$20,$ba
00:14F2 20
00:14F3 BA
00:14F4 AA02            	   310:         word $02aa
00:14F6 01              	   311:         byte 1,$28,$ba
00:14F7 28
00:14F8 BA
00:14F9 AB02            	   312:         word $02ab
00:14FB 01              	   313:         byte 1,$30,$ba
00:14FC 30
00:14FD BA
00:14FE AC02            	   314:         word $02ac
00:1500 01              	   315:         byte 1,$38,$ba
00:1501 38
00:1502 BA
00:1503 AD02            	   316:         word $02ad
00:1505 01              	   317:         byte 1,$40,$ba
00:1506 40
00:1507 BA
00:1508 AE02            	   318:         word $02ae
00:150A 01              	   319:         byte 1,$48,$ba
00:150B 48
00:150C BA
00:150D AF02            	   320:         word $02af
00:150F 01              	   321:         byte 1,$50,$ba
00:1510 50
00:1511 BA
00:1512 B002            	   322:         word $02b0
00:1514 01              	   323:         byte 1,$58,$ba
00:1515 58
00:1516 BA
00:1517 B102            	   324:         word $02b1
00:1519 01              	   325:         byte 1,$60,$ba
00:151A 60
00:151B BA
00:151C B302            	   326:         word $02b3
00:151E 01              	   327:         byte 1,$70,$ba
00:151F 70
00:1520 BA
00:1521 B402            	   328:         word $02b4
00:1523 01              	   329:         byte 1,$78,$ba
00:1524 78
00:1525 BA
00:1526 B502            	   330:         word $02b5
00:1528 01              	   331:         byte 1,$80,$ba
00:1529 80
00:152A BA
00:152B B602            	   332:         word $02b6
00:152D 01              	   333:         byte 1,$88,$ba
00:152E 88
00:152F BA
00:1530 B702            	   334:         word $02b7
00:1532 01              	   335:         byte 1,$90,$ba
00:1533 90
00:1534 BA
00:1535 B802            	   336:         word $02b8
00:1537 01              	   337:         byte 1,$98,$ba
00:1538 98
00:1539 BA
00:153A B902            	   338:         word $02b9
00:153C 01              	   339:         byte 1,$a0,$ba
00:153D A0
00:153E BA
00:153F BA02            	   340:         word $02ba
00:1541 01              	   341:         byte 1,$a8,$ba
00:1542 A8
00:1543 BA
00:1544 BB02            	   342:         word $02bb
00:1546 01              	   343:         byte 1,$b0,$ba
00:1547 B0
00:1548 BA
                        	   344:         ;; Row 18
00:1549 D102            	   345:         word $02d1
00:154B 01              	   346:         byte 1,$20,$c2
00:154C 20
00:154D C2
00:154E D502            	   347:         word $02d5
00:1550 01              	   348:         byte 1,$40,$c2
00:1551 40
00:1552 C2
00:1553 D902            	   349:         word $02d9
00:1555 01              	   350:         byte 1,$60,$c2
00:1556 60
00:1557 C2
00:1558 DB02            	   351:         word $02db
00:155A 01              	   352:         byte 1,$70,$c2
00:155B 70
00:155C C2
00:155D DF02            	   353:         word $02df
00:155F 01              	   354:         byte 1,$90,$c2
00:1560 90
00:1561 C2
00:1562 E302            	   355:         word $02e3
00:1564 01              	   356:         byte 1,$b0,$c2
00:1565 B0
00:1566 C2
                        	   357:         ;; Row 19
00:1567 F902            	   358:         word $02f9
00:1569 01              	   359:         byte 1,$20,$ca          ;energizer
00:156A 20
00:156B CA
00:156C FA02            	   360:         word $02fa
00:156E 01              	   361:         byte 1,$28,$ca
00:156F 28
00:1570 CA
00:1571 FB02            	   362:         word $02fb
00:1573 01              	   363:         byte 1,$30,$ca
00:1574 30
00:1575 CA
00:1576 FD02            	   364:         word $02fd
00:1578 01              	   365:         byte 1,$40,$ca
00:1579 40
00:157A CA
00:157B FE02            	   366:         word $02fe
00:157D 01              	   367:         byte 1,$48,$ca
00:157E 48
00:157F CA
00:1580 FF02            	   368:         word $02ff
00:1582 01              	   369:         byte 1,$50,$ca
00:1583 50
00:1584 CA
00:1585 0003            	   370:         word $0300
00:1587 01              	   371:         byte 1,$58,$ca
00:1588 58
00:1589 CA
00:158A 0103            	   372:         word $0301
00:158C 01              	   373:         byte 1,$60,$ca
00:158D 60
00:158E CA
00:158F 0303            	   374:         word $0303
00:1591 01              	   375:         byte 1,$70,$ca
00:1592 70
00:1593 CA
00:1594 0403            	   376:         word $0304
00:1596 01              	   377:         byte 1,$78,$ca
00:1597 78
00:1598 CA
00:1599 0503            	   378:         word $0305
00:159B 01              	   379:         byte 1,$80,$ca
00:159C 80
00:159D CA
00:159E 0603            	   380:         word $0306
00:15A0 01              	   381:         byte 1,$88,$ca
00:15A1 88
00:15A2 CA
00:15A3 0703            	   382:         word $0307
00:15A5 01              	   383:         byte 1,$90,$ca
00:15A6 90
00:15A7 CA
00:15A8 0903            	   384:         word $0309
00:15AA 01              	   385:         byte 1,$a0,$ca
00:15AB A0
00:15AC CA
00:15AD 0A03            	   386:         word $030a
00:15AF 01              	   387:         byte 1,$a8,$ca
00:15B0 A8
00:15B1 CA
00:15B2 0B03            	   388:         word $030b
00:15B4 01              	   389:         byte 1,$b0,$ca          ;energizer
00:15B5 B0
00:15B6 CA
                        	   390:         ;; Row 20
00:15B7 2303            	   391:         word $0323
00:15B9 01              	   392:         byte 1,$30,$d2
00:15BA 30
00:15BB D2
00:15BC 2503            	   393:         word $0325
00:15BE 01              	   394:         byte 1,$40,$d2
00:15BF 40
00:15C0 D2
00:15C1 2703            	   395:         word $0327
00:15C3 01              	   396:         byte 1,$50,$d2
00:15C4 50
00:15C5 D2
00:15C6 2D03            	   397:         word $032d
00:15C8 01              	   398:         byte 1,$80,$d2
00:15C9 80
00:15CA D2
00:15CB 2F03            	   399:         word $032f
00:15CD 01              	   400:         byte 1,$90,$d2
00:15CE 90
00:15CF D2
00:15D0 3103            	   401:         word $0331
00:15D2 01              	   402:         byte 1,$a0,$d2
00:15D3 A0
00:15D4 D2
                        	   403:         ;; Row 21
00:15D5 4903            	   404:         word $0349
00:15D7 01              	   405:         byte 1,$20,$da
00:15D8 20
00:15D9 DA
00:15DA 4A03            	   406:         word $034a
00:15DC 01              	   407:         byte 1,$28,$da
00:15DD 28
00:15DE DA
00:15DF 4B03            	   408:         word $034b
00:15E1 01              	   409:         byte 1,$30,$da
00:15E2 30
00:15E3 DA
00:15E4 4C03            	   410:         word $034c
00:15E6 01              	   411:         byte 1,$38,$da
00:15E7 38
00:15E8 DA
00:15E9 4D03            	   412:         word $034d
00:15EB 01              	   413:         byte 1,$40,$da
00:15EC 40
00:15ED DA
00:15EE 4F03            	   414:         word $034f
00:15F0 01              	   415:         byte 1,$50,$da
00:15F1 50
00:15F2 DA
00:15F3 5003            	   416:         word $0350
00:15F5 01              	   417:         byte 1,$58,$da
00:15F6 58
00:15F7 DA
00:15F8 5103            	   418:         word $0351
00:15FA 01              	   419:         byte 1,$60,$da
00:15FB 60
00:15FC DA
00:15FD 5303            	   420:         word $0353
00:15FF 01              	   421:         byte 1,$70,$da
00:1600 70
00:1601 DA
00:1602 5403            	   422:         word $0354
00:1604 01              	   423:         byte 1,$78,$da
00:1605 78
00:1606 DA
00:1607 5503            	   424:         word $0355
00:1609 01              	   425:         byte 1,$80,$da
00:160A 80
00:160B DA
00:160C 5703            	   426:         word $0357
00:160E 01              	   427:         byte 1,$90,$da
00:160F 90
00:1610 DA
00:1611 5803            	   428:         word $0358
00:1613 01              	   429:         byte 1,$98,$da
00:1614 98
00:1615 DA
00:1616 5903            	   430:         word $0359
00:1618 01              	   431:         byte 1,$a0,$da
00:1619 A0
00:161A DA
00:161B 5A03            	   432:         word $035a
00:161D 01              	   433:         byte 1,$a8,$da
00:161E A8
00:161F DA
00:1620 5B03            	   434:         word $035b
00:1622 01              	   435:         byte 1,$b0,$da
00:1623 B0
00:1624 DA
                        	   436:         ;; Row 22
00:1625 7103            	   437:         word $0371
00:1627 01              	   438:         byte 1,$20,$e2
00:1628 20
00:1629 E2
00:162A 7903            	   439:         word $0379
00:162C 01              	   440:         byte 1,$60,$e2
00:162D 60
00:162E E2
00:162F 7B03            	   441:         word $037b
00:1631 01              	   442:         byte 1,$70,$e2
00:1632 70
00:1633 E2
00:1634 8303            	   443:         word $0383
00:1636 01              	   444:         byte 1,$b0,$e2
00:1637 B0
00:1638 E2
                        	   445:         ;; Row 23
00:1639 9903            	   446:         word $0399
00:163B 01              	   447:         byte 1,$20,$ea
00:163C 20
00:163D EA
00:163E 9A03            	   448:         word $039a
00:1640 01              	   449:         byte 1,$28,$ea
00:1641 28
00:1642 EA
00:1643 9B03            	   450:         word $039b
00:1645 01              	   451:         byte 1,$30,$ea
00:1646 30
00:1647 EA
00:1648 9C03            	   452:         word $039c
00:164A 01              	   453:         byte 1,$38,$ea
00:164B 38
00:164C EA
00:164D 9D03            	   454:         word $039d
00:164F 01              	   455:         byte 1,$40,$ea
00:1650 40
00:1651 EA
00:1652 9E03            	   456:         word $039e
00:1654 01              	   457:         byte 1,$48,$ea
00:1655 48
00:1656 EA
00:1657 9F03            	   458:         word $039f
00:1659 01              	   459:         byte 1,$50,$ea
00:165A 50
00:165B EA
00:165C A003            	   460:         word $03a0
00:165E 01              	   461:         byte 1,$58,$ea
00:165F 58
00:1660 EA
00:1661 A103            	   462:         word $03a1
00:1663 01              	   463:         byte 1,$60,$ea
00:1664 60
00:1665 EA
00:1666 A203            	   464:         word $03a2
00:1668 01              	   465:         byte 1,$68,$ea
00:1669 68
00:166A EA
00:166B A303            	   466:         word $03a3
00:166D 01              	   467:         byte 1,$70,$ea
00:166E 70
00:166F EA
00:1670 A403            	   468:         word $03a4
00:1672 01              	   469:         byte 1,$78,$ea
00:1673 78
00:1674 EA
00:1675 A503            	   470:         word $03a5
00:1677 01              	   471:         byte 1,$80,$ea
00:1678 80
00:1679 EA
00:167A A603            	   472:         word $03a6
00:167C 01              	   473:         byte 1,$88,$ea
00:167D 88
00:167E EA
00:167F A703            	   474:         word $03a7
00:1681 01              	   475:         byte 1,$90,$ea
00:1682 90
00:1683 EA
00:1684 A803            	   476:         word $03a8
00:1686 01              	   477:         byte 1,$98,$ea
00:1687 98
00:1688 EA
00:1689 A903            	   478:         word $03a9
00:168B 01              	   479:         byte 1,$a0,$ea
00:168C A0
00:168D EA
00:168E AA03            	   480:         word $03aa
00:1690 01              	   481:         byte 1,$a8,$ea
00:1691 A8
00:1692 EA
00:1693 AB03            	   482:         word $03ab
00:1695 01              	   483:         byte 1,$b0,$ea
00:1696 B0
00:1697 EA
                        	   484:         ;; End marker
00:1698 FFFF            	   485:         word $ffff
00:169A FF              	   486:         byte $ff,$ff,$ff
00:169B FF
00:169C FF
                        	   487:         
                        	   488:         ;; Energizer list
                        	   489:         ;; Index into pelltbl
                        	   490: enzrlst:
00:169D 12              	   491:         byte $12
00:169E 17              	   492:         byte $17
00:169F 79              	   493:         byte $79
00:16A0 88              	   494:         byte $88
                        	   495: 
                        	   496:         ;; Pac-Man animation frames
                        	   497:         ;; Format:
                        	   498:         ;;  - byte sprite offset values
                        	   499: pacalstn:                       ;north-facing animation frames
00:16A1 00              	   500:         byte $00,$07,$08,$09,$08,$07
00:16A2 07
00:16A3 08
00:16A4 09
00:16A5 08
00:16A6 07
                        	   501: pacalsts:                       ;south-facing animation frames
00:16A7 00              	   502:         byte $00,$0a,$0b,$0c,$0b,$0a
00:16A8 0A
00:16A9 0B
00:16AA 0C
00:16AB 0B
00:16AC 0A
                        	   503: pacalstw:                       ;west-facing animation frames
00:16AD 00              	   504:         byte $00,$01,$02,$03,$02,$01
00:16AE 01
00:16AF 02
00:16B0 03
00:16B1 02
00:16B2 01
                        	   505: pacalste:                       ;east-facing animation frames
00:16B3 00              	   506:         byte $00,$04,$05,$06,$05,$04
00:16B4 04
00:16B5 05
00:16B6 06
00:16B7 05
00:16B8 04
                        	   507: 
                        	   508:         ;; Index in pelltbl of leftmost+rightmost pellet in row by sprite y loc
                        	   509:         ;; Format:
                        	   510:         ;;  - byte y (sprite y loc of row)
                        	   511:         ;;  - byte ixl (pelltbl index of leftmost pellet in row)
                        	   512:         ;;  - byte ixr (pelltbl index of rightmost pellet in row)
                        	   513: plrowix:
00:16B9 3A              	   514:         byte $3a,$00,$11        ;row 1
00:16BA 00
00:16BB 11
00:16BC 42              	   515:         byte $42,$12,$17        ;row 2
00:16BD 12
00:16BE 17
00:16BF 4A              	   516:         byte $4a,$18,$1d        ;row 3
00:16C0 18
00:16C1 1D
00:16C2 52              	   517:         byte $52,$1e,$30        ;row 4
00:16C3 1E
00:16C4 30
00:16C5 5A              	   518:         byte $5a,$31,$36        ;row 5
00:16C6 31
00:16C7 36
00:16C8 62              	   519:         byte $62,$37,$3c        ;row 6
00:16C9 37
00:16CA 3C
00:16CB 6A              	   520:         byte $6a,$3d,$4c        ;row 7
00:16CC 3D
00:16CD 4C
00:16CE 72              	   521:         byte $72,$4d,$50        ;row 8
00:16CF 4D
00:16D0 50
00:16D1 7A              	   522:         byte $7a,$51,$52        ;row 9
00:16D2 51
00:16D3 52
00:16D4 82              	   523:         byte $82,$53,$54        ;row 10
00:16D5 53
00:16D6 54
00:16D7 8A              	   524:         byte $8a,$55,$56        ;row 11
00:16D8 55
00:16D9 56
00:16DA 92              	   525:         byte $92,$57,$58        ;row 12
00:16DB 57
00:16DC 58
00:16DD 9A              	   526:         byte $9a,$59,$5a        ;row 13
00:16DE 59
00:16DF 5A
00:16E0 A2              	   527:         byte $a2,$5b,$5c        ;row 14
00:16E1 5B
00:16E2 5C
00:16E3 AA              	   528:         byte $aa,$5d,$5e        ;row 15
00:16E4 5D
00:16E5 5E
00:16E6 B2              	   529:         byte $b2,$5f,$60        ;row 16
00:16E7 5F
00:16E8 60
00:16E9 BA              	   530:         byte $ba,$61,$72        ;row 17
00:16EA 61
00:16EB 72
00:16EC C2              	   531:         byte $c2,$73,$78        ;row 18
00:16ED 73
00:16EE 78
00:16EF CA              	   532:         byte $ca,$79,$88        ;row 19
00:16F0 79
00:16F1 88
00:16F2 D2              	   533:         byte $d2,$89,$8e        ;row 20
00:16F3 89
00:16F4 8E
00:16F5 DA              	   534:         byte $da,$8f,$9e        ;row 21
00:16F6 8F
00:16F7 9E
00:16F8 E2              	   535:         byte $e2,$9f,$a2        ;row 22
00:16F9 9F
00:16FA A2
00:16FB EA              	   536:         byte $ea,$a3,$b5        ;row 23
00:16FC A3
00:16FD B5
                        	   537: 
                        	   538:         ;; Fruit sprite table
                        	   539:         ;; Format:
                        	   540:         ;;  - byte lvl (level number)
                        	   541:         ;;  - byte spx (sprite index)
                        	   542:         ;;  - word ofs (sp0mem offset)
                        	   543:         ;;  - word pts (bonus points: 4 BCD digits)
                        	   544: frtsptbl:
                        	   545:         ;; 1st level: Cherries
00:16FE 00              	   546:         byte $00,$0d
00:16FF 0D
00:1700 4003            	   547:         word $0d*$40,$0100
00:1702 0001
                        	   548:         ;; 2nd level: Strawberry
00:1704 01              	   549:         byte $01,$0f
00:1705 0F
00:1706 C003            	   550:         word $0f*$40,$0300
00:1708 0003
                        	   551:         ;; 3rd & 4th level: Peach
00:170A 02              	   552:         byte $02,$11
00:170B 11
00:170C 4004            	   553:         word $11*$40,$0500
00:170E 0005
00:1710 03              	   554:         byte $03,$11
00:1711 11
00:1712 4004            	   555:         word $11*$40,$0500
00:1714 0005
                        	   556:         ;; 5th & 6th level: Apple
00:1716 04              	   557:         byte $04,$13
00:1717 13
00:1718 C004            	   558:         word $13*$40,$0700
00:171A 0007
00:171C 05              	   559:         byte $05,$13
00:171D 13
00:171E C004            	   560:         word $13*$40,$0700
00:1720 0007
                        	   561:         ;; 7th & 8th level: Grapes
00:1722 06              	   562:         byte $06,$15
00:1723 15
00:1724 4005            	   563:         word $15*$40,$1000
00:1726 0010
00:1728 07              	   564:         byte $07,$15
00:1729 15
00:172A 4005            	   565:         word $15*$40,$1000
00:172C 0010
                        	   566:         ;; 9th & 10th levels: Galaxian
00:172E 08              	   567:         byte $08,$17
00:172F 17
00:1730 C005            	   568:         word $17*$40,$2000
00:1732 0020
00:1734 09              	   569:         byte $09,$17
00:1735 17
00:1736 C005            	   570:         word $17*$40,$2000
00:1738 0020
                        	   571:         ;; 11th & 12th level: Bell
00:173A 0A              	   572:         byte $0a,$19
00:173B 19
00:173C 4006            	   573:         word $19*$40,$3000
00:173E 0030
00:1740 0B              	   574:         byte $0b,$19
00:1741 19
00:1742 4006            	   575:         word $19*$40,$3000
00:1744 0030
                        	   576:         ;; level 13 onwards: Key
00:1746 0C              	   577:         byte $0c,$1b
00:1747 1B
00:1748 C006            	   578:         word $1b*$40,$5000
00:174A 0050
                        	   579:         ;; End Marker
00:174C FF              	   580:         byte $ff
                        	   581: 

Source: "./src/startup.asm"
                        	    38:         
                        	    39:         ;; Include assets
                        	    40:         *=charset
01:4000 3C666E6E60623C00	    41:         incbin assets/charset,2
01:4008 183C667E66666600
01:4010 7C66667C66667C00
01:4018 3C66606060663C00
01:4020 786C6666666C7800
01:4028 7E60607860607E00
01:4030 7E60607860606000
01:4038 3C66606E66663C00
01:4040 6666667E66666600
01:4048 3C18181818183C00
01:4050 1E0C0C0C0C6C3800
01:4058 666C7870786C6600
01:4060 6060606060607E00
01:4068 63777F6B63636300
01:4070 66767E7E6E666600
01:4078 3C66666666663C00
01:4080 7C66667C60606000
01:4088 3C666666663C0E00
01:4090 7C66667C786C6600
01:4098 3C66603C06663C00
01:40A0 7E18181818181800
01:40A8 6666666666663C00
01:40B0 66666666663C1800
01:40B8 6363636B7F776300
01:40C0 66663C183C666600
01:40C8 6666663C18181800
01:40D0 7E060C1830607E00
01:40D8 3C30303030303C00
01:40E0 0C12307C3062FC00
01:40E8 3C0C0C0C0C0C3C00
01:40F0 00183C7E18181818
01:40F8 0010307F7F301000
01:4100 0000000000000000
01:4108 1818181800001800
01:4110 6666660000000000
01:4118 6666FF66FF666600
01:4120 183E603C067C1800
01:4128 62660C1830664600
01:4130 3C663C3867663F00
01:4138 060C180000000000
01:4140 0C18303030180C00
01:4148 30180C0C0C183000
01:4150 00663CFF3C660000
01:4158 0018187E18180000
01:4160 0000000000181830
01:4168 0000007E00000000
01:4170 0000000000181800
01:4178 0003060C18306000
01:4180 3C666E7666663C00
01:4188 1818381818187E00
01:4190 3C66060C30607E00
01:4198 3C66061C06663C00
01:41A0 060E1E667F060600
01:41A8 7E607C0606663C00
01:41B0 3C66607C66663C00
01:41B8 7E660C1818181800
01:41C0 3C66663C66663C00
01:41C8 3C66663E06663C00
01:41D0 0000180000180000
01:41D8 0000180000181830
01:41E0 0E18306030180E00
01:41E8 00007E007E000000
01:41F0 70180C060C187000
01:41F8 3C66060C18001800
01:4200 00000F1020232424
01:4208 24242320100F0000
01:4210 0000F00804C42424
01:4218 2424C40408F00000
01:4220 0000FF0000FF0000
01:4228 2424242424242424
01:4230 2424242424180000
01:4238 0000182424242424
01:4240 0000F80404F80000
01:4248 00001F20201F0000
01:4250 0000FF0000C32424
01:4258 2424C30000FF0000
01:4260 2424232020232424
01:4268 2424C40404C42424
01:4270 00003F2020272424
01:4278 24242720203F0000
01:4280 0000FC0404E42424
01:4288 2424E40404FC0000
01:4290 000000FFFF000000
01:4298 0000001000000000
01:42A0 0000387C7C380000
01:42A8 0000000000000000
01:42B0 0000000000000000
01:42B8 0000000000000000
01:42C0 0000000000000000
01:42C8 0000000000000000
01:42D0 0000000000000000
01:42D8 0000000000000000
01:42E0 0000000000000000
01:42E8 0000000000000000
01:42F0 0000000000000000
01:42F8 0000000000000000
01:4300 0000000000000000
01:4308 0000000000000000
01:4310 0000000000000000
01:4318 0000000000000000
01:4320 0000000000000000
01:4328 0000000000000000
01:4330 0000000000000000
01:4338 0000000000000000
01:4340 0000000000000000
01:4348 0000000000000000
01:4350 0000000000000000
01:4358 0000000000000000
01:4360 0000000000000000
01:4368 0000000000000000
01:4370 0000000000000000
01:4378 0000000000000000
01:4380 0000000000000000
01:4388 0000000000000000
01:4390 0000000000000000
01:4398 0000000000000000
01:43A0 0000000000000000
01:43A8 0000000000000000
01:43B0 0000000000000000
01:43B8 0000000000000000
01:43C0 0000000000000000
01:43C8 0000000000000000
01:43D0 0000000000000000
01:43D8 0000000000000000
01:43E0 0000000000000000
01:43E8 0000000000000000
01:43F0 0000000000000000
01:43F8 0000000000000000
01:4400 0000000000000000
01:4408 0000000000000000
01:4410 0000000000000000
01:4418 0000000000000000
01:4420 0000000000000000
01:4428 0000000000000000
01:4430 0000000000000000
01:4438 0000000000000000
01:4440 0000000000000000
01:4448 0000000000000000
01:4450 0000000000000000
01:4458 0000000000000000
01:4460 0000000000000000
01:4468 0000000000000000
01:4470 0000000000000000
01:4478 0000000000000000
01:4480 0000000000000000
01:4488 0000000000000000
01:4490 0000000000000000
01:4498 0000000000000000
01:44A0 0000000000000000
01:44A8 0000000000000000
01:44B0 0000000000000000
01:44B8 0000000000000000
01:44C0 0000000000000000
01:44C8 0000000000000000
01:44D0 0000000000000000
01:44D8 0000000000000000
01:44E0 0000000000000000
01:44E8 0000000000000000
01:44F0 0000000000000000
01:44F8 0000000000000000
01:4500 0000000000000000
01:4508 0000000000000000
01:4510 0000000000000000
01:4518 0000000000000000
01:4520 0000000000000000
01:4528 0000000000000000
01:4530 0000000000000000
01:4538 0000000000000000
01:4540 0000000000000000
01:4548 0000000000000000
01:4550 0000000000000000
01:4558 0000000000000000
01:4560 0000000000000000
01:4568 0000000000000000
01:4570 0000000000000000
01:4578 0000000000000000
01:4580 0000000000000000
01:4588 0000000000000000
01:4590 0000000000000000
01:4598 0000000000000000
01:45A0 0000000000000000
01:45A8 0000000000000000
01:45B0 0000000000000000
01:45B8 0000000000000000
01:45C0 0000000000000000
01:45C8 0000000000000000
01:45D0 0000000000000000
01:45D8 0000000000000000
01:45E0 0000000000000000
01:45E8 0000000000000000
01:45F0 0000000000000000
01:45F8 0000000000000000
01:4600 0000000000000000
01:4608 0000000000000000
01:4610 0000000000000000
01:4618 0000000000000000
01:4620 0000000000000000
01:4628 0000000000000000
01:4630 0000000000000000
01:4638 0000000000000000
01:4640 0000000000000000
01:4648 0000000000000000
01:4650 0000000000000000
01:4658 0000000000000000
01:4660 0000000000000000
01:4668 0000000000000000
01:4670 0000000000000000
01:4678 0000000000000000
01:4680 0000000000000000
01:4688 0000000000000000
01:4690 0000000000000000
01:4698 0000000000000000
01:46A0 0000000000000000
01:46A8 0000000000000000
01:46B0 0000000000000000
01:46B8 0000000000000000
01:46C0 0000000000000000
01:46C8 0000000000000000
01:46D0 0000000000000000
01:46D8 0000000000000000
01:46E0 0000000000000000
01:46E8 0000000000000000
01:46F0 0000000000000000
01:46F8 0000000000000000
01:4700 0000000000000000
01:4708 0000000000000000
01:4710 0000000000000000
01:4718 0000000000000000
01:4720 0000000000000000
01:4728 0000000000000000
01:4730 0000000000000000
01:4738 0000000000000000
01:4740 0000000000000000
01:4748 0000000000000000
01:4750 0000000000000000
01:4758 0000000000000000
01:4760 0000000000000000
01:4768 0000000000000000
01:4770 0000000000000000
01:4778 0000000000000000
01:4780 0000000000000000
01:4788 0000000000000000
01:4790 0000000000000000
01:4798 0000000000000000
01:47A0 0000000000000000
01:47A8 0000000000000000
01:47B0 0000000000000000
01:47B8 0000000000000000
01:47C0 0000000000000000
01:47C8 0000000000000000
01:47D0 0000000000000000
01:47D8 0000000000000000
01:47E0 0000000000000000
01:47E8 5555555555555555
01:47F0 AAAAAAAAAAAAAAAA
01:47F8 FFFFFFFFFFFFFFFF
01:4800 0101010101010101
01:4808 0101010101010101
01:4810 0101010101010101
01:4818 0101010101010101
01:4820 0101010101010101
01:4828 0101010101010101
01:4830 0101010101010101
01:4838 0101010101010101
01:4840 0606060606060606
01:4848 0606060606060606
01:4850 06060F0F0F010101
01:4858 0101010101010101
01:4860 0101010101010101
01:4868 0101010101010101
01:4870 0101010101010101
01:4878 0101010101010101
01:4880 0101010101010101
01:4888 0101010101010101
01:4890 0101010101010101
01:4898 0101010101010101
01:48A0 0101010101010101
01:48A8 0101010101010101
01:48B0 0101010101010101
01:48B8 0101010101010101
01:48C0 0101010101010101
01:48C8 0101010101010101
01:48D0 0101010101010101
01:48D8 0101010101010101
01:48E0 0101010101010101
01:48E8 0101010101010101
01:48F0 0101010101010101
01:48F8 0101010101010101
                        	    42: 
                        	    43:         *=mazegfx
02:4BF0 E803E84327001800	    44:         incbin assets/mazegfx,2
02:4BF8 000F0B0628001900
02:4C00 4044444444444444
02:4C08 44444A4444444444
02:4C10 4444444442202020
02:4C18 2020202020202020
02:4C20 2020202020202020
02:4C28 4553535353535353
02:4C30 5353455353535353
02:4C38 5353535345202020
02:4C40 2020200809070820
02:4C48 13030F1205202020
02:4C50 4554404442534044
02:4C58 4253455340444253
02:4C60 4044425445202020
02:4C68 2020202020202020
02:4C70 2020202020202020
02:4C78 4553414443534144
02:4C80 4353465341444353
02:4C88 4144435345202020
02:4C90 2020202020202020
02:4C98 2020202030202020
02:4CA0 4553535353535353
02:4CA8 5353535353535353
02:4CB0 5353535345202020
02:4CB8 2020202020202020
02:4CC0 2020202020202020
02:4CC8 4553404442534753
02:4CD0 4044444442534753
02:4CD8 4044425345202020
02:4CE0 2020202020202020
02:4CE8 2020202020202020
02:4CF0 4553414443534553
02:4CF8 41444A4443534553
02:4D00 4144435345202020
02:4D08 2020202020202020
02:4D10 2020202020202020
02:4D18 4553535353534553
02:4D20 5353455353534553
02:4D28 5353535345202020
02:4D30 2020202020202020
02:4D38 2020311510202020
02:4D40 4144444442534C44
02:4D48 4853465349444D53
02:4D50 4044444443202020
02:4D58 2020202020202020
02:4D60 2020202020202020
02:4D68 2020202045534520
02:4D70 2020202020204553
02:4D78 4520202020202020
02:4D80 2020202020202020
02:4D88 2020202030202020
02:4D90 2020202045534520
02:4D98 4E52525250204553
02:4DA0 4520202020202020
02:4DA8 2020202020202020
02:4DB0 2020202020202020
02:4DB8 4444444443534620
02:4DC0 4520202045204653
02:4DC8 4144444444202020
02:4DD0 2020202020202020
02:4DD8 2020202020202020
02:4DE0 2020202020532020
02:4DE8 4520202045202053
02:4DF0 2020202020202020
02:4DF8 2020202020202020
02:4E00 2020202020202020
02:4E08 4444444442534720
02:4E10 4F44444451204753
02:4E18 4044444444202020
02:4E20 2020202020202020
02:4E28 2020202020202020
02:4E30 2020202045534520
02:4E38 2020202020204553
02:4E40 4520202020202020
02:4E48 2020202020202020
02:4E50 2020202020202020
02:4E58 2020202045534520
02:4E60 4044444442204553
02:4E68 4520202020202020
02:4E70 2020202020202020
02:4E78 2020202020202020
02:4E80 4044444443534620
02:4E88 41444A4443204653
02:4E90 4144444442202020
02:4E98 2020202020202020
02:4EA0 2020202020202020
02:4EA8 4553535353535353
02:4EB0 5353455353535353
02:4EB8 5353535345202020
02:4EC0 2020202020202020
02:4EC8 2020202020202020
02:4ED0 4553494442534944
02:4ED8 4853465349444853
02:4EE0 4044485345202020
02:4EE8 2020202020202020
02:4EF0 2020202020202020
02:4EF8 4554535345535353
02:4F00 5353205353535353
02:4F08 4553535445202020
02:4F10 2020202020202020
02:4F18 2020202020202020
02:4F20 4C44485346534753
02:4F28 49444A4448534753
02:4F30 465349444D202020
02:4F38 2020202020202020
02:4F40 2020202020202020
02:4F48 4553535353534553
02:4F50 5353455353534553
02:4F58 5353535345202020
02:4F60 2020202020202020
02:4F68 2020202020202020
02:4F70 4553494444444B44
02:4F78 4853465349444B44
02:4F80 4444485345202020
02:4F88 2020202020202020
02:4F90 2020202020202020
02:4F98 4553535353535353
02:4FA0 5353535353535353
02:4FA8 5353535345202020
02:4FB0 2020202020202020
02:4FB8 2020202020202020
02:4FC0 4144444444444444
02:4FC8 4444444444444444
02:4FD0 4444444443202020
02:4FD8 2020202020202020
02:4FE0 2020202020202020
                        	    45: 
                        	    46:         *=sp0mem
03:5000 3E00007F0000FF80	    47:         incbin assets/sprites,2
03:5008 00FF8000FF8000FF
03:5010 8000FF80007F0000
03:5018 3E00000000000000
03:5020 0000000000000000
03:5028 0000000000000000
03:5030 0000000000000000
03:5038 0000000000000087
03:5040 3E00007F0000FF80
03:5048 003F80000780003F
03:5050 8000FF80007F0000
03:5058 3E00000000000000
03:5060 0000000000000000
03:5068 0000000000000000
03:5070 0000000000000000
03:5078 0000000000000087
03:5080 7E0000FF00003F80
03:5088 000F80000780000F
03:5090 80003F8000FF0000
03:5098 7E00000000000000
03:50A0 0000000000000000
03:50A8 0000000000000000
03:50B0 0000000000000000
03:50B8 0000000000000087
03:50C0 FC00003F00000F80
03:50C8 0007800003800007
03:50D0 80000F80003F0000
03:50D8 FC00000000000000
03:50E0 0000000000000000
03:50E8 0000000000000000
03:50F0 0000000000000000
03:50F8 0000000000000087
03:5100 3E00007F0000FF80
03:5108 00FE0000F00000FE
03:5110 0000FF80007F0000
03:5118 3E00000000000000
03:5120 0000000000000000
03:5128 0000000000000000
03:5130 0000000000000000
03:5138 0000000000000087
03:5140 3F00007F8000FE00
03:5148 00F80000F00000F8
03:5150 0000FE00007F8000
03:5158 3F00000000000000
03:5160 0000000000000000
03:5168 0000000000000000
03:5170 0000000000000000
03:5178 0000000000000087
03:5180 1F80007E0000F800
03:5188 00F00000E00000F0
03:5190 0000F800007E0000
03:5198 1F80000000000000
03:51A0 0000000000000000
03:51A8 0000000000000000
03:51B0 0000000000000000
03:51B8 0000000000000087
03:51C0 220000630000F780
03:51C8 00F78000F78000FF
03:51D0 8000FF80007F0000
03:51D8 3E00000000000000
03:51E0 0000000000000000
03:51E8 0000000000000000
03:51F0 0000000000000000
03:51F8 0000000000000087
03:5200 410000C18000E380
03:5208 00E38000F78000FF
03:5210 8000FF80007F0000
03:5218 3E00000000000000
03:5220 0000000000000000
03:5228 0000000000000000
03:5230 0000000000000000
03:5238 0000000000000087
03:5240 808000808000C180
03:5248 00C18000E38000F7
03:5250 80007F00007F0000
03:5258 3E00000000000000
03:5260 0000000000000000
03:5268 0000000000000000
03:5270 0000000000000000
03:5278 0000000000000087
03:5280 3E00007F0000FF80
03:5288 00FF8000F78000F7
03:5290 8000F78000630000
03:5298 2200000000000000
03:52A0 0000000000000000
03:52A8 0000000000000000
03:52B0 0000000000000000
03:52B8 0000000000000087
03:52C0 3E00007F0000FF80
03:52C8 00FF8000F78000E3
03:52D0 8000E38000C18000
03:52D8 4100000000000000
03:52E0 0000000000000000
03:52E8 0000000000000000
03:52F0 0000000000000000
03:52F8 0000000000000087
03:5300 3E00007F00007F00
03:5308 00F78000E38000C1
03:5310 8000C18000808000
03:5318 8080000000000000
03:5320 0000000000000000
03:5328 0000000000000000
03:5330 0000000000000000
03:5338 0000000000000087
03:5340 0000000000004000
03:5348 00F00000E50000EF
03:5350 80006F80000F8000
03:5358 0700000000000000
03:5360 0000000000000000
03:5368 0000000000000000
03:5370 0000000000000000
03:5378 0000000000000082
03:5380 0700001900002200
03:5388 0002000002000000
03:5390 0000000000000000
03:5398 0000000000000000
03:53A0 0000000000000000
03:53A8 0000000000000000
03:53B0 0000000000000000
03:53B8 0000000000000089
03:53C0 0000000000006600
03:53C8 00FF0000DB0000FF
03:53D0 00007600003C0000
03:53D8 1800000000000000
03:53E0 0000000000000000
03:53E8 0000000000000000
03:53F0 0000000000000000
03:53F8 0000000000000082
03:5400 1000003C00001800
03:5408 0000000024000000
03:5410 0000080000000000
03:5418 0000000000000000
03:5420 0000000000000000
03:5428 0000000000000000
03:5430 0000000000000000
03:5438 0000000000000085
03:5440 0B00000E00000800
03:5448 0008000000000000
03:5450 0000000000000000
03:5458 0000000000000000
03:5460 0000000000000000
03:5468 0000000000000000
03:5470 0000000000000000
03:5478 0000000000000085
03:5480 0000000000000000
03:5488 003E00007F00007F
03:5490 00007F00007F0000
03:5498 3E00000000000000
03:54A0 0000000000000000
03:54A8 0000000000000000
03:54B0 0000000000000000
03:54B8 0000000000000088
                        	    48: 


Symbols by name:
addscr                           A:1076
bgcol0                           E:D021
blki                             E:0000
buf                              E:0016
c2ddra                           E:DD02
calcnd                           A:0BFB
charset                          E:4000
chkcon                           A:0D72
chkirq                           A:0C8E
chkmov                           A:0FDD
chkne                            A:0B7E
chknn                            A:0B9C
chkpde                           A:0D23
chkpdn                           A:0D2D
chkrve                           A:1000
chkrvn                           A:1010
chkrvw                           A:0FEE
chky                             A:0FC7
chx2spx                          A:0C53
chy2spy                          A:0C5B
ci1icr                           E:DC0D
ci1pra                           E:DC00
ci2cra                           E:DD0E
ci2crb                           E:DD0F
ci2icr                           E:DD0D
ci2pra                           E:DD00
cia1                             E:DC00
cia2                             E:DD00
cinv                             E:0314
colmem                           E:D800
coltab                           E:4800
decrem                           A:0D3A
djr0                             A:09AE
djr1                             A:09B2
djr2                             A:09B6
djr3                             A:09BA
dkgrey                           E:000B
e                                E:0005
enzraix                          E:00FD
enzrchr                          E:0054
enzrlst                          A:169D
enzrpts                          E:0050
extcol                           E:D020
fillcolmem                       A:095D
fillmaze                         A:09D9
filloop                          A:09DD
fincol                           A:0CFF
findpel                          A:0A16
finfil                           A:0A15
finnmi                           A:0F70
finras                           A:0D7F
fiprsc                           A:0909
flshfin                          A:0F6E
flshmaz                          A:0EB6
flshwht                          A:0F1A
fpckde                           A:0A4F
fpckdn                           A:0A89
fpds                             A:0AC1
fpinrow                          A:0B1F
fprixn                           A:0B0D
fprixs                           A:0AFB
frtena                           E:00FB
frtsptbl                         A:16FE
frttim                           E:0026
frxpos                           E:0067
frypos                           E:00A2
gameloop                         A:0F9E
gsthmnd                          E:001E
hidefrt                          A:115F
initsprt                         A:0C0A
initvic                          A:0930
irqblki                          E:0005
irqmsk                           E:D01A
irqtmp                           E:001F
irqwrd1                          E:001B
irqwrd2                          E:001D
isenzr                           A:0B3B
joybtn                           E:0092
joyx                             E:0096
joyy                             E:009B
ldanim                           A:0E2E
lpprsc                           A:0897
ltgrey                           E:000F
lvlfrtpts                        A:1094
lvlfrtspix                       A:10B7
lvlfrtspof                       A:10D2
lvlnum                           E:00A9
maxmen                           E:0003
maxpell                          E:00B6
mazegfx                          E:4BF0
move                             A:0FC0
movs                             A:0FD9
mula5                            A:0822
mula6                            A:084B
n                                E:0002
newgame                          A:0F76
nextlvl                          A:0F8A
nmenrem                          E:00A8
nmiblki                          E:000A
nminv                            E:0318
nmiwrd1                          E:0020
nmiwrd2                          E:0022
nodeadr                          A:0B4B
nodetbl                          A:116C
npelrem                          E:00A7
nxl                              A:080B
pacaix                           E:00FC
pacalste                         A:16B3
pacalstn                         A:16A1
pacalsts                         A:16A7
pacalstw                         A:16AD
pacdir                           E:00A3
pacdis                           E:00A5
pacnxd                           E:00A4
pacrem                           E:00A6
pacsrc                           E:009E
pacstnd                          E:0031
pactar                           E:009F
pdsouth                          A:0D37
pelcol                           A:0CB4
pelfound                         A:0AEB
pelladr                          A:09C6
pellchr                          E:0053
pellpts                          E:0010
pelltbl                          A:130A
pelnotfd                         A:0AF2
plrowix                          A:16B9
printchr                         A:091D
printcol                         A:090A
printscr                         A:0881
procirq                          A:0C84
procnmi                          A:0DC4
rasirq                           A:0D0C
raslin                           E:00FA
raster                           E:D012
rdinpt                           A:0FAE
readjoy2                         A:09A2
reverse                          A:1029
revs                             A:1020
rmpel                            A:0CD4
rstscr                           A:1043
s                                E:0003
scnmem                           E:4C00
score                            E:00F7
screnzr                          A:1069
scrfrt                           A:1050
scrmsdi                          E:0185
scroly                           E:D011
scrpel                           A:105C
setblu1                          A:0EC5
setblu2                          A:0EDA
setblu3                          A:0EEF
setblu4                          A:0F04
setcol1                          A:095F
setcol2                          A:0970
setcol3                          A:0981
setcol4                          A:0992
setnds                           A:0BCF
setnodis                         A:0B5E
setnsrc                          A:0D43
setupirq                         A:0C63
setupnmi                         A:0D89
setwht1                          A:0F1C
setwht2                          A:0F31
setwht3                          A:0F46
setwht4                          A:0F5B
showfrt                          A:10F3
sp0col                           E:D027
sp0loc                           E:0040
sp0mem                           E:5000
sp0ptr                           E:4FF8
sp0x                             E:D000
sp0y                             E:D001
sp1x                             E:D002
sp1y                             E:D003
sp2x                             E:D004
sp2y                             E:D005
spbgcl                           E:D01F
spcechr                          E:0020
spena                            E:D015
spspcl                           E:D01E
spx2chx                          A:0C43
spxscog                          E:0018
spy2chy                          A:0C4B
spyscog                          E:0032
sysirq                           E:EA7E
sysnmi                           E:FE56
ti2a                             E:DD04
ti2b                             E:DD06
tic                              A:0E8B
ticloop                          A:0E8F
timaev                           A:0DDC
timbev                           A:0E39
tmp                              E:001A
tocloop                          A:0E58
vic                              E:D000
vicirq                           E:D019
vmcsb                            E:D018
w                                E:0004
warp                             A:0C03
wrd1                             E:0016
wrd2                             E:0018
wrpnixe                          E:0021
wrpnixw                          E:001B

Symbols by value:
0000 blki
0002 n
0003 maxmen
0003 s
0004 w
0005 e
0005 irqblki
000A nmiblki
000B dkgrey
000F ltgrey
0010 pellpts
0016 buf
0016 wrd1
0018 spxscog
0018 wrd2
001A tmp
001B irqwrd1
001B wrpnixw
001D irqwrd2
001E gsthmnd
001F irqtmp
0020 nmiwrd1
0020 spcechr
0021 wrpnixe
0022 nmiwrd2
0026 frttim
0031 pacstnd
0032 spyscog
0040 sp0loc
0050 enzrpts
0053 pellchr
0054 enzrchr
0067 frxpos
0092 joybtn
0096 joyx
009B joyy
009E pacsrc
009F pactar
00A2 frypos
00A3 pacdir
00A4 pacnxd
00A5 pacdis
00A6 pacrem
00A7 npelrem
00A8 nmenrem
00A9 lvlnum
00B6 maxpell
00F7 score
00FA raslin
00FB frtena
00FC pacaix
00FD enzraix
0185 scrmsdi
0314 cinv
0318 nminv
080B nxl
0822 mula5
084B mula6
0881 printscr
0897 lpprsc
0909 fiprsc
090A printcol
091D printchr
0930 initvic
095D fillcolmem
095F setcol1
0970 setcol2
0981 setcol3
0992 setcol4
09A2 readjoy2
09AE djr0
09B2 djr1
09B6 djr2
09BA djr3
09C6 pelladr
09D9 fillmaze
09DD filloop
0A15 finfil
0A16 findpel
0A4F fpckde
0A89 fpckdn
0AC1 fpds
0AEB pelfound
0AF2 pelnotfd
0AFB fprixs
0B0D fprixn
0B1F fpinrow
0B3B isenzr
0B4B nodeadr
0B5E setnodis
0B7E chkne
0B9C chknn
0BCF setnds
0BFB calcnd
0C03 warp
0C0A initsprt
0C43 spx2chx
0C4B spy2chy
0C53 chx2spx
0C5B chy2spy
0C63 setupirq
0C84 procirq
0C8E chkirq
0CB4 pelcol
0CD4 rmpel
0CFF fincol
0D0C rasirq
0D23 chkpde
0D2D chkpdn
0D37 pdsouth
0D3A decrem
0D43 setnsrc
0D72 chkcon
0D7F finras
0D89 setupnmi
0DC4 procnmi
0DDC timaev
0E2E ldanim
0E39 timbev
0E58 tocloop
0E8B tic
0E8F ticloop
0EB6 flshmaz
0EC5 setblu1
0EDA setblu2
0EEF setblu3
0F04 setblu4
0F1A flshwht
0F1C setwht1
0F31 setwht2
0F46 setwht3
0F5B setwht4
0F6E flshfin
0F70 finnmi
0F76 newgame
0F8A nextlvl
0F9E gameloop
0FAE rdinpt
0FC0 move
0FC7 chky
0FD9 movs
0FDD chkmov
0FEE chkrvw
1000 chkrve
1010 chkrvn
1020 revs
1029 reverse
1043 rstscr
1050 scrfrt
105C scrpel
1069 screnzr
1076 addscr
1094 lvlfrtpts
10B7 lvlfrtspix
10D2 lvlfrtspof
10F3 showfrt
115F hidefrt
116C nodetbl
130A pelltbl
169D enzrlst
16A1 pacalstn
16A7 pacalsts
16AD pacalstw
16B3 pacalste
16B9 plrowix
16FE frtsptbl
4000 charset
4800 coltab
4BF0 mazegfx
4C00 scnmem
4FF8 sp0ptr
5000 sp0mem
D000 sp0x
D000 vic
D001 sp0y
D002 sp1x
D003 sp1y
D004 sp2x
D005 sp2y
D011 scroly
D012 raster
D015 spena
D018 vmcsb
D019 vicirq
D01A irqmsk
D01E spspcl
D01F spbgcl
D020 extcol
D021 bgcol0
D027 sp0col
D800 colmem
DC00 ci1pra
DC00 cia1
DC0D ci1icr
DD00 ci2pra
DD00 cia2
DD02 c2ddra
DD04 ti2a
DD06 ti2b
DD0D ci2icr
DD0E ci2cra
DD0F ci2crb
EA7E sysirq
FE56 sysnmi
