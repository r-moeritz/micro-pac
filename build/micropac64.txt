Sections:
00: "org0001:801" (801-1707)
01: "org0002:4000" (4000-4900)
02: "org0003:4bf0" (4BF0-4FE8)
03: "org0004:5000" (5000-5440)


Source: "./src/startup.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Program startup
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         org $0801
                        	     6: 
                        	     7:         ;; BASIC header
00:0801 0B08            	     8:         word nxl,10
00:0803 0A00
00:0805 9E              	     9:         byte $9e
00:0806 32303631        	    10:         string "2061"
00:080A 00
00:080B 0000            	    11: nxl:    word 0
                        	    12: 
                        	    13:         ;; Program initialization
00:080D 203009          	    14:         jsr initvic
00:0810 205D09          	    15:         jsr fillcolmem
00:0813 200A0C          	    16:         jsr initsprt
00:0816 205E0F          	    17:         jsr newgame
00:0819 20690C          	    18:         jsr setupirq
00:081C 20710D          	    19:         jsr setupnmi
00:081F 4C860F          	    20:         jmp gameloop
                        	    21: 
                        	    22:         ;; Include program modules
                        	    23:         include macros.asm

Source: "macros.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; General purpose macros
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5: 
                        	     6:         ;; Maths
                        	     7:         ;; ------------------------------------------------------------
                        	     8:         
                        	     9:         ;; Multiply value in .A by 8, ignore C flag
                        	    10:         ;; Reads:       .A
                        	    11:         ;; Writes:      .A
                        	    12: mula8:  macro
                        	    13:         clc
                        	    14:         asl
                        	    15:         asl
                        	    16:         asl
                        	    17:         endm
                        	    18:         
                        	    19:         ;; Divide value in .A by 8, ignore C flag
                        	    20:         ;; Reads:       .A
                        	    21:         ;; Writes:      .A      
                        	    22: diva8:  macro
                        	    23:         sec
                        	    24:         lsr
                        	    25:         lsr
                        	    26:         lsr
                        	    27:         endm
                        	    28: 
                        	    29:         ;; Add immediate value to byte and store
                        	    30: adcbimm: macro val, byt
                        	    31:         clc
                        	    32:         lda \byt
                        	    33:         adc #\val
                        	    34:         sta \byt
                        	    35:         endm
                        	    36: 
                        	    37:         ;; Subtract immediate value from byte and store
                        	    38: sbcbimm: macro val, byt
                        	    39:         sec
                        	    40:         lda \byt
                        	    41:         sbc #\val
                        	    42:         sta \byt
                        	    43:         endm
                        	    44: 
                        	    45:         ;; Add immediate word value to word and store
                        	    46: adcwimm: macro val, wrd
                        	    47:         clc
                        	    48:         lda \wrd
                        	    49:         adc #<\val
                        	    50:         sta \wrd
                        	    51:         lda \wrd+1
                        	    52:         adc #>\val
                        	    53:         sta \wrd+1
                        	    54:         endm
                        	    55: 
                        	    56:         ;; Subtract immediate word value from word and store
                        	    57: sbcwimm: macro val, wrd
                        	    58:         sec
                        	    59:         lda \wrd
                        	    60:         sbc #<\val
                        	    61:         sta \wrd
                        	    62:         lda \wrd+1
                        	    63:         sbc #>\val
                        	    64:         sta \wrd+1
                        	    65:         endm
                        	    66:         
                        	    67:         ;; Conditional jumps
                        	    68:         ;; ------------------------------------------------------------
                        	    69: 
                        	    70:         ;; BNE to distant address
                        	    71: jne:    macro adr
                        	    72:         beq :+
                        	    73:         jmp \adr
                        	    74: :
                        	    75:         endm
                        	    76: 
                        	    77:         ;; BEQ to distant address
                        	    78: jeq:    macro adr
                        	    79:         bne :+
                        	    80:         jmp \adr
                        	    81: :
                        	    82:         endm
                        	    83: 
                        	    84:         ;; BCS to distant address
                        	    85: jcs:    macro adr
                        	    86:         bcc :+
                        	    87:         jmp \adr
                        	    88: :
                        	    89:         endm
                        	    90: 
                        	    91:         ;; BCC to distant address
                        	    92: jcc:    macro adr
                        	    93:         bcs :+
                        	    94:         jmp \adr
                        	    95: :
                        	    96:         endm
                        	    97: 
                        	    98:         ;; BMI to distant address
                        	    99: jmi:    macro adr
                        	   100:         bpl :+
                        	   101:         jmp \adr
                        	   102: :
                        	   103:         endm
                        	   104:         
                        	   105:         ;; Stack operations
                        	   106:         ;; ------------------------------------------------------------
                        	   107: 
                        	   108:         ;; Push .X onto the stack
                        	   109: phx:    macro
                        	   110:         txa
                        	   111:         pha
                        	   112:         endm
                        	   113: 
                        	   114:         ;; Pop the top byte off the stack onto .X
                        	   115: plx:    macro
                        	   116:         pla
                        	   117:         tax
                        	   118:         endm
                        	   119: 
                        	   120:         ;; Push .Y onto the stack
                        	   121: phy:    macro
                        	   122:         tya
                        	   123:         pha
                        	   124:         endm
                        	   125: 
                        	   126:         ;; Pop the top byte off the stack onto .Y
                        	   127: ply:    macro
                        	   128:         pla
                        	   129:         tay
                        	   130:         endm
                        	   131: 
                        	   132:         ;; Memory operations
                        	   133:         ;; ------------------------------------------------------------
                        	   134: 
                        	   135:         ;; Swap bytes via the stack
                        	   136: swpbyt: macro byt1, byt2
                        	   137:         lda \byt1
                        	   138:         pha                     ;load byt1 & push onto the stack
                        	   139:         lda \byt2
                        	   140:         sta \byt1               ;load byt2 & save to byt1
                        	   141:         pla
                        	   142:         sta \byt2               ;pop byt1 off the stack & save to byt2
                        	   143:         endm
                        	   144:         
                        	   145:         ;; Load immediate value into byte
                        	   146: ldbimm: macro val, byt
                        	   147:         lda #\val
                        	   148:         sta \byt
                        	   149:         endm
                        	   150:         
                        	   151:         ;; Load immediate value into word
                        	   152: ldwimm: macro val, wrd
                        	   153:         lda #<\val
                        	   154:         sta \wrd
                        	   155:         lda #>\val
                        	   156:         sta \wrd+1
                        	   157:         endm
                        	   158: 
                        	   159:         ;; Load value into byte via pointer at index
                        	   160: ldbptr: macro ptr, idx, byt
                        	   161:         ldy #\idx
                        	   162:         lda (\ptr),y
                        	   163:         sta \byt
                        	   164:         endm
                        	   165:         
                        	   166:         ;; Load value into word via pointer at index
                        	   167: ldwptr: macro ptr, idx, wrd
                        	   168:         ldy #\idx
                        	   169:         lda (\ptr),y
                        	   170:         sta \wrd
                        	   171:         iny
                        	   172:         lda (\ptr),y
                        	   173:         sta \wrd+1
                        	   174:         endm
                        	   175: 
                        	   176:         ;; Copy value from one byte to another
                        	   177: cpbyt:  macro src, dst
                        	   178:         lda \src
                        	   179:         sta \dst
                        	   180:         endm
                        	   181: 
                        	   182:         ;; Copy value from one word to another
                        	   183: cpwrd:  macro src, dst
                        	   184:         lda \src
                        	   185:         sta \dst
                        	   186:         lda \src+1
                        	   187:         sta \dst+1
                        	   188:         endm
                        	   189: 
                        	   190:         ;; Increment pointer using X-based, indirect adressing to ensure
                        	   191:         ;; HB is updated along with LB.
                        	   192: incptrx: macro ptr
                        	   193:         clc
                        	   194:         lda \ptr,x
                        	   195:         adc #1
                        	   196:         sta \ptr,x
                        	   197:         inx
                        	   198:         lda \ptr,x
                        	   199:         adc #0
                        	   200:         sta \ptr,x
                        	   201:         dex
                        	   202:         endm
                        	   203: 
                        	   204:         ;; Increment word to ensure HB is updated along with LB.
                        	   205: incwrd: macro wrd
                        	   206:         clc
                        	   207:         lda \wrd
                        	   208:         adc #1
                        	   209:         sta \wrd
                        	   210:         lda \wrd+1
                        	   211:         adc #0
                        	   212:         sta \wrd+1
                        	   213:         endm
                        	   214: 

Source: "./src/startup.asm"
                        	    24:         include symbols.asm

Source: "symbols.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Symbol definitions
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         
                        	     6:         ;; Zero page memory locations
                        	     7:         ;; ------------------------------------------------------------
                        	     8: 
                        	     9:         ;; 15-byte buffer for use in sub-routines,
                        	    10:         ;; divided into 3x blocks of 5 bytes each.
                        	    11: buf:            equ $16         ;$16-$24
                        	    12:         
                        	    13:         ;; Block for game loop
                        	    14: wrd1:           equ buf
                        	    15: wrd2:           equ buf+$02
                        	    16: tmp:            equ buf+$04
                        	    17:         
                        	    18:         ;; Block for IRQ handler
                        	    19: irqwrd1:        equ buf+$05
                        	    20: irqwrd2:        equ buf+$07
                        	    21: irqtmp:         equ buf+$09
                        	    22:         
                        	    23:         ;; Block for NMI handler
                        	    24: nmiwrd1:        equ buf+$0a
                        	    25: nmiwrd2:        equ buf+$0c
                        	    26: nmitmp:         equ buf+$0e
                        	    27: 
                        	    28:         ;; Joystick data
                        	    29: joybtn:         equ $92         ;button value
                        	    30: joyx:           equ $96         ;x axis value
                        	    31: joyy:           equ $9b         ;y axis value
                        	    32: 
                        	    33:         ;; Pac-Man data
                        	    34: pacsrc:         equ $9e         ;source node
                        	    35: pactar:         equ $9f         ;target node
                        	    36: pacdir:         equ $a3         ;facing direction
                        	    37: pacnxd:         equ $a4         ;next direction
                        	    38: pacdis:         equ $a5         ;distance to target
                        	    39: pacrem:         equ $a6         ;distance remaining to target
                        	    40: 
                        	    41:         ;; Scoring, gameplay
                        	    42: npelrem:        equ $a7          ;number of pellets remaining
                        	    43: nmenrem:        equ $a8          ;number of remaining "men"
                        	    44: lvlnum:         equ $a9          ;level number
                        	    45: score:          equ $f7          ;player's score in BCD (4 bytes: $f7-$fa)
                        	    46: frtena:         equ $fd          ;whether or not fruit is enabled
                        	    47: 
                        	    48:         ;; Animation
                        	    49: pacaix:         equ $fb          ;Pac-Man animation frame index
                        	    50: enzraix:        equ $fc          ;energizer animation frame index
                        	    51: 
                        	    52:         ;; Still available: $fd,$fe
                        	    53:         
                        	    54:         ;; Memory-mapped hardware registers
                        	    55:         ;; ------------------------------------------------------------
                        	    56:         
                        	    57:         ;; VIC II registers
                        	    58: vic:            equ $d000
                        	    59: sp0x:           equ vic
                        	    60: sp0y:           equ vic + $01
                        	    61: sp1x:           equ vic + $02
                        	    62: sp1y:           equ vic + $03
                        	    63: sp2x:           equ vic + $04
                        	    64: sp2y:           equ vic + $05
                        	    65: sp3x:           equ vic + $06
                        	    66: sp3y:           equ vic + $07
                        	    67: sp4x:           equ vic + $08
                        	    68: sp4y:           equ vic + $09
                        	    69: sp5x:           equ vic + $0a
                        	    70: sp5y:           equ vic + $0b
                        	    71: sp6x:           equ vic + $0c
                        	    72: sp6y:           equ vic + $0d
                        	    73: sp7x:           equ vic + $0e
                        	    74: sp7y:           equ vic + $0f
                        	    75: scroly:         equ vic + $11
                        	    76: raster:         equ vic + $12
                        	    77: spena:          equ vic + $15
                        	    78: vmcsb:          equ vic + $18
                        	    79: vicirq:         equ vic + $19
                        	    80: irqmsk:         equ vic + $1a
                        	    81: spbgcl:         equ vic + $1f
                        	    82: extcol:         equ vic + $20
                        	    83: bgcol0:         equ vic + $21
                        	    84: sp0col:         equ vic + $27
                        	    85: 
                        	    86:         ;; CIA1 registers
                        	    87: cia1:           equ $dc00
                        	    88: ci1pra:         equ cia1
                        	    89: ci1icr:         equ cia1 + $0d
                        	    90: 
                        	    91:         ;; CIA2 registers
                        	    92: cia2:           equ $dd00
                        	    93: ci2pra:         equ cia2
                        	    94: c2ddra:         equ cia2 + $02
                        	    95: ti2a:           equ cia2 + $04
                        	    96: ti2b:           equ cia2 + $06
                        	    97: ci2icr:         equ cia2 + $0d
                        	    98: ci2cra:         equ cia2 + $0e
                        	    99: ci2crb:         equ cia2 + $0f
                        	   100: 
                        	   101: 
                        	   102:         ;; Operating system memory locations
                        	   103:         ;; ------------------------------------------------------------
                        	   104:         
                        	   105:         ;; Interrupt vectors
                        	   106: cinv:           equ $0314       ;IRQ vector
                        	   107: nminv:          equ $0318       ;NMI vector
                        	   108: 
                        	   109:         ;; Interrupt routines
                        	   110: sysirq:         equ $ea7e       ;kernal IRQ handler
                        	   111: sysnmi:         equ $fe56       ;kernal NMI handler
                        	   112: 
                        	   113: 
                        	   114:         ;; Program memory locations
                        	   115:         ;; ------------------------------------------------------------
                        	   116:         
                        	   117: charset:        equ $4000       ;character set definition
                        	   118: coltab:         equ $4800       ;colour table
                        	   119: mazegfx:        equ $4bf0       ;Pac-Man maze
                        	   120: scnmem:         equ $4c00       ;screen memory
                        	   121: colmem:         equ $d800       ;colour memory
                        	   122: sp0mem:         equ $5000       ;sprite 0 address
                        	   123: sp0ptr:         equ $4ff8       ;sprite 0 pointer
                        	   124: sp0loc:         equ $1000/$40   ;sp0mem
                        	   125: 
                        	   126: 
                        	   127:         ;; Constants
                        	   128:         ;; ------------------------------------------------------------
                        	   129: 
                        	   130:         ;; Misc.
                        	   131: raslin:         equ 250         ;line for raster interrupt
                        	   132: spxscog:        equ 24          ;sprite x screen origin
                        	   133: spyscog:        equ 50          ;sprite y screen origin
                        	   134: maxpell:        equ 182         ;maximum number of pellets (incl. energizers)
                        	   135: maxmen:         equ 3           ;maximum number of "men"
                        	   136: 
                        	   137:         ;; Fruit
                        	   138: frxpos:        equ $67          ;fruit x loc
                        	   139: frypos:        equ $a2          ;fruit y loc
                        	   140: frttim:        equ 38           ;fruit timer: 39 x 240ms = 9.1s
                        	   141: 
                        	   142:         ;; Screen memory indexes
                        	   143: scrmsdi:        equ $185        ;most significant digit of score
                        	   144:         
                        	   145:         ;; Node indexes
                        	   146: wrpnixw:        equ $1b         ;western warp tunnel node index
                        	   147: wrpnixe:        equ $21         ;eastern warp tunnel node index
                        	   148: pacstnd:        equ $31         ;Pac-Man's starting node index        
                        	   149: gsthmnd:        equ $1e         ;ghost home node        
                        	   150: 
                        	   151:         ;; Character constants
                        	   152: spcechr:        equ $20         ;space char
                        	   153: pellchr:        equ $53         ;pellet char
                        	   154: enzrchr:        equ $54         ;energizer char
                        	   155: 
                        	   156:         ;; Colour constants
                        	   157: dkgrey:         equ $0b         ;dark grey
                        	   158: ltgrey:         equ $0f         ;light grey
                        	   159:         
                        	   160:         ;; Compass directions
                        	   161: n:              equ 2
                        	   162: s:              equ 3
                        	   163: w:              equ 4
                        	   164: e:              equ 5
                        	   165: 
                        	   166:         ;; Scores, expressed as BCD pairs
                        	   167: pellpts:        equ %00010000   ;10 pts for pellets
                        	   168: enzrpts:        equ %01010000   ;50 pts for energizers
                        	   169: 
                        	   170:         ;; Index into buf to access memory block
                        	   171:         ;; reservedf for gameloop
                        	   172: blki:           equ $00
                        	   173:         
                        	   174:         ;; Index into buf to access memory block
                        	   175:         ;; reserved for IRQ handler
                        	   176: irqblki:        equ $05
                        	   177: 
                        	   178:         ;; Index into buf to access memory block
                        	   179:         ;; reserved for NMI handler
                        	   180: nmiblki:        equ $0a
                        	   181: 
                        	   182:         ;; The number of pellets that need to be eaten for bonus items
                        	   183:         ;; to appear the 1st and 2nd time
                        	   184: nbonpel1:     equ 52
                        	   185: nbonpel2:     equ 127
                        	   186: 

Source: "./src/startup.asm"
                        	    25:         include maths.asm

Source: "maths.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maths sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Multiply by 5
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (multiplicand)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
00:0822 E8              	    12: mula5:  inx
00:0823 E8              	    13:         inx
00:0824 9516            	    14:         sta buf,x               ;stash original .A in wrd2 (lo)
00:0826 18              	    15:         clc
00:0827 0A              	    16:         asl                     ;multiply by 2
00:0828 A8              	    17:         tay                     ;stash product in .Y
00:0829 A900            	    18:         lda #0
00:082B 2A              	    19:         rol
00:082C E8              	    20:         inx
00:082D 9516            	    21:         sta buf,x               ;stash .C in wrd2 (hi)
00:082F 98              	    22:         tya                     ;restore product from .Y
00:0830 0A              	    23:         asl                     ;multiply by 2
00:0831 A8              	    24:         tay                     ;stash product in .Y
00:0832 B516            	    25:         lda buf,x               
00:0834 2A              	    26:         rol                     ;restore .C from wrd2 (hi)
00:0835 CA              	    27:         dex
00:0836 CA              	    28:         dex
00:0837 9516            	    29:         sta buf,x               ;write hi byte to wrd1 (hi)
00:0839 98              	    30:         tya                     ;restore product from .Y
00:083A E8              	    31:         inx
00:083B 7516            	    32:         adc buf,x               ;add original .A value
00:083D CA              	    33:         dex
00:083E CA              	    34:         dex
00:083F 9516            	    35:         sta buf,x               ;write lo byte to wrd1 (lo)
00:0841 A900            	    36:         lda #0
00:0843 2A              	    37:         rol
00:0844 E8              	    38:         inx
00:0845 7516            	    39:         adc buf,x               ;add .C to hi byte
00:0847 9516            	    40:         sta buf,x               ;and write to wrd1 (hi)
00:0849 CA              	    41:         dex
00:084A 60              	    42:         rts
                        	    43:         
                        	    44:         ;; Multiply by 6
                        	    45:         ;; Reads:
                        	    46:         ;;  - .A (multiplicand)
                        	    47:         ;;  - .X (offset to memory block in buf)
                        	    48:         ;; Writes:
                        	    49:         ;;  - Result is stored in 1st word of memory block
                        	    50:         ;;  - 2nd word of memory block is used as a work area        
00:084B E8              	    51: mula6:  inx
00:084C E8              	    52:         inx
00:084D 9516            	    53:         sta buf,x
00:084F 18              	    54:         clc
00:0850 0A              	    55:         asl
00:0851 A8              	    56:         tay
00:0852 A900            	    57:         lda #0
00:0854 2A              	    58:         rol
00:0855 E8              	    59:         inx
00:0856 9516            	    60:         sta buf,x
00:0858 98              	    61:         tya
00:0859 0A              	    62:         asl
00:085A A8              	    63:         tay
00:085B B516            	    64:         lda buf,x
00:085D 2A              	    65:         rol
00:085E CA              	    66:         dex
00:085F CA              	    67:         dex
00:0860 9516            	    68:         sta buf,x
00:0862 98              	    69:         tya
00:0863 E8              	    70:         inx
00:0864 7516            	    71:         adc buf,x
00:0866 A8              	    72:         tay
00:0867 A900            	    73:         lda #0
00:0869 2A              	    74:         rol
00:086A CA              	    75:         dex
00:086B 7516            	    76:         adc buf,x
00:086D 9516            	    77:         sta buf,x
00:086F 98              	    78:         tya
00:0870 E8              	    79:         inx
00:0871 7516            	    80:         adc buf,x
00:0873 CA              	    81:         dex
00:0874 CA              	    82:         dex
00:0875 9516            	    83:         sta buf,x
00:0877 A900            	    84:         lda #0
00:0879 2A              	    85:         rol
00:087A E8              	    86:         inx
00:087B 7516            	    87:         adc buf,x
00:087D 9516            	    88:         sta buf,x
00:087F CA              	    89:         dex
00:0880 60              	    90:         rts
                        	    91: 

Source: "./src/startup.asm"
                        	    26:         include io.asm

Source: "io.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; I/O related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Write the player's score to screen memory
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Clobbers .A, .X, and .Y
                        	     8:         ;; Reads:
                        	     9:         ;;  - score
                        	    10:         ;;  - irqwrd1
                        	    11:         ;; Writes:
                        	    12:         ;;  - irqwrd1
                        	    13:         ;;  - irqwrd2
                        	    14:         ;;  - irqtmp
                        	    15: printscr:
                        	    16:         ;; Each of the 4 bytes comprising score contains 2 BCD digits.
                        	    17:         ;; Each digit needs to be extracted and turned into a
                        	    18:         ;; printable character. Then, each digit can be written to
                        	    19:         ;; screen memory using printchr. We skip leading zeroes.
                        	    20:         ldwimm scrmsdi, irqwrd1
00:0881 A985            	     1M         lda #<scrmsdi
00:0883 851B            	     2M         sta irqwrd1
00:0885 A901            	     3M         lda #>scrmsdi
00:0887 851C            	     4M         sta irqwrd1+1
                        	    21:         cpwrd irqwrd1, irqwrd2
00:0889 A51B            	     1M         lda irqwrd1
00:088B 851D            	     2M         sta irqwrd2
00:088D A51C            	     3M         lda irqwrd1+1
00:088F 851E            	     4M         sta irqwrd2+1
                        	    22:         ldbimm 0, irqtmp
00:0891 A900            	     1M         lda #0
00:0893 851F            	     2M         sta irqtmp
00:0895 A203            	    23:         ldx #3
00:0897 3070            	    24: lpprsc: bmi fiprsc
                        	    25:         ;; print hi-nybble BCD char
00:0899 B5F7            	    26:         lda score,x
00:089B 4A              	    27:         lsr
00:089C 4A              	    28:         lsr
00:089D 4A              	    29:         lsr
00:089E 4A              	    30:         lsr                     ;shift BCD digit into lo-nybble
00:089F F007            	    31:         beq :+
00:08A1 A001            	    32:         ldy #1
00:08A3 841F            	    33:         sty irqtmp
00:08A5 4CAF08          	    34:         jmp :++
00:08A8 A41F            	    35: :       ldy irqtmp
00:08AA D003            	    36:         bne :+
00:08AC 4CBB08          	    37:         jmp :++
00:08AF 0930            	    38: :       ora #%00110000          ;convert to printable char
00:08B1 A8              	    39:         tay                     ;place char in .Y
                        	    40:         phx                     ;save .X onto stack
00:08B2 8A              	     1M         txa
00:08B3 48              	     2M         pha
00:08B4 A205            	    41:         ldx #irqblki            ;load block index into .X
00:08B6 201D09          	    42:         jsr printchr            ;print char
                        	    43:         plx                     ;restore .X from stack
00:08B9 68              	     1M         pla
00:08BA AA              	     2M         tax
                        	    44: :       incwrd irqwrd2
00:08BB 18              	     1M         clc
00:08BC A51D            	     2M         lda irqwrd2
00:08BE 6901            	     3M         adc #1
00:08C0 851D            	     4M         sta irqwrd2
00:08C2 A51E            	     5M         lda irqwrd2+1
00:08C4 6900            	     6M         adc #0
00:08C6 851E            	     7M         sta irqwrd2+1
                        	    45:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08C8 A51D            	     1M         lda irqwrd2
00:08CA 851B            	     2M         sta irqwrd1  
00:08CC A51E            	     3M         lda irqwrd2+1
00:08CE 851C            	     4M         sta irqwrd1  +1
                        	    46:         
                        	    47:         ;; print lo-nybble BCD char
00:08D0 B5F7            	    48: :       lda score,x
00:08D2 290F            	    49:         and #%00001111          ;mask out hi-nybble
00:08D4 F007            	    50:         beq :+
00:08D6 A001            	    51:         ldy #1        
00:08D8 841F            	    52:         sty irqtmp
00:08DA 4CE408          	    53:         jmp :++
00:08DD A41F            	    54: :       ldy irqtmp
00:08DF D003            	    55:         bne :+
00:08E1 4CF008          	    56:         jmp :++
00:08E4 0930            	    57: :       ora #%00110000          ;convert to printable char
00:08E6 A8              	    58:         tay                     ;place char in .Y
                        	    59:         phx                     ;save .X onto stack
00:08E7 8A              	     1M         txa
00:08E8 48              	     2M         pha
00:08E9 A205            	    60:         ldx #irqblki            ;load block index into .X
00:08EB 201D09          	    61:         jsr printchr            ;print char
                        	    62:         plx                     ;restore .X from stack
00:08EE 68              	     1M         pla
00:08EF AA              	     2M         tax
                        	    63: :       incwrd irqwrd2
00:08F0 18              	     1M         clc
00:08F1 A51D            	     2M         lda irqwrd2
00:08F3 6901            	     3M         adc #1
00:08F5 851D            	     4M         sta irqwrd2
00:08F7 A51E            	     5M         lda irqwrd2+1
00:08F9 6900            	     6M         adc #0
00:08FB 851E            	     7M         sta irqwrd2+1
                        	    64:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08FD A51D            	     1M         lda irqwrd2
00:08FF 851B            	     2M         sta irqwrd1  
00:0901 A51E            	     3M         lda irqwrd2+1
00:0903 851C            	     4M         sta irqwrd1  +1
00:0905 CA              	    65:         dex                     ;decrement .X
00:0906 4C9708          	    66:         jmp lpprsc
00:0909 60              	    67: fiprsc: rts
                        	    68:         
                        	    69:         ;; Write value in .Y to colour memory at 16-bit offset
                        	    70:         ;; in memory block.
                        	    71:         ;; Reads:
                        	    72:         ;;  - .Y (value to write to colour memory)
                        	    73:         ;;  - .X (buf offset to access memory block )
                        	    74:         ;;  - 1st word in memory block at offset
                        	    75:         ;; Writes:
                        	    76:         ;;  - 1st word in memory block at offset
                        	    77: printcol:       
00:090A 18              	    78:         clc
00:090B A900            	    79:         lda #<colmem
00:090D 7516            	    80:         adc buf,x
00:090F 9516            	    81:         sta buf,x
00:0911 E8              	    82:         inx                     ;hi-byte
00:0912 A9D8            	    83:         lda #>colmem
00:0914 7516            	    84:         adc buf,x
00:0916 9516            	    85:         sta buf,x
00:0918 CA              	    86:         dex                     ;lo-byte
00:0919 98              	    87:         tya
00:091A 8116            	    88:         sta (buf,x)             ;write to colour memory
00:091C 60              	    89:         rts
                        	    90: 
                        	    91:         ;; Write char in .Y to screen memory at 16-bit offset
                        	    92:         ;; in memory block.
                        	    93:         ;; Reads:
                        	    94:         ;;  - .Y (char to write to screen memory)
                        	    95:         ;;  - .X (buf offset to access memory block )
                        	    96:         ;;  - 1st word in memory block at offset
                        	    97:         ;; Writes:
                        	    98:         ;;  - 1st word in memory block at offset
                        	    99: printchr:
                        	   100:         ;; Write char to screen memory
00:091D 18              	   101:         clc        
00:091E A900            	   102:         lda #<scnmem
00:0920 7516            	   103:         adc buf,x
00:0922 9516            	   104:         sta buf,x
00:0924 E8              	   105:         inx                     ;hi-byte
00:0925 A94C            	   106:         lda #>scnmem
00:0927 7516            	   107:         adc buf,x
00:0929 9516            	   108:         sta buf,x
00:092B CA              	   109:         dex                     ;lo-byte
00:092C 98              	   110:         tya
00:092D 8116            	   111:         sta (buf,x)             ;write to screen memory
00:092F 60              	   112:         rts
                        	   113: 
                        	   114:         ;; Initialize VIC-II
                        	   115:         ;;  - Select 16K video bank
                        	   116:         ;;  - Select screen memory location
                        	   117:         ;;  - Select character memory location
                        	   118:         ;;  - Set border & background colours
                        	   119: initvic:
                        	   120:         ;; select vic bank
00:0930 A903            	   121:         lda #3
00:0932 0D02DD          	   122:         ora c2ddra
00:0935 8D02DD          	   123:         sta c2ddra
00:0938 A9FC            	   124:         lda #$fc
00:093A 2D00DD          	   125:         and ci2pra
00:093D 0902            	   126:         ora #2
00:093F 8D00DD          	   127:         sta ci2pra
                        	   128: 
                        	   129:         ;; select screen memory loc
00:0942 A90F            	   130:         lda #$0f
00:0944 2D18D0          	   131:         and vmcsb
00:0947 0930            	   132:         ora #$30
00:0949 8D18D0          	   133:         sta vmcsb
                        	   134: 
                        	   135:         ;; select char memory loc
00:094C A9F1            	   136:         lda #$f1
00:094E 2D18D0          	   137:         and vmcsb
00:0951 8D18D0          	   138:         sta vmcsb
                        	   139: 
                        	   140:         ;; set border & background colours
00:0954 A900            	   141:         lda #0
00:0956 8D20D0          	   142:         sta extcol
00:0959 8D21D0          	   143:         sta bgcol0
00:095C 60              	   144:         rts
                        	   145: 
                        	   146:         ;; Fill colour memory from colour table
                        	   147: fillcolmem:
                        	   148:         ;; populate colour memory
00:095D A200            	   149:         ldx #0
                        	   150: setcol1:
00:095F BD004C          	   151:         lda scnmem,x
00:0962 A8              	   152:         tay
00:0963 B90048          	   153:         lda coltab,y
00:0966 9D00D8          	   154:         sta colmem,x
00:0969 E8              	   155:         inx
00:096A E0FA            	   156:         cpx #250
00:096C D0F1            	   157:         bne setcol1
00:096E A200            	   158:         ldx #0
                        	   159: setcol2:
00:0970 BDFA4C          	   160:         lda scnmem+250,x
00:0973 A8              	   161:         tay
00:0974 B90048          	   162:         lda coltab,y
00:0977 9DFAD8          	   163:         sta colmem+250,x
00:097A E8              	   164:         inx
00:097B E0FA            	   165:         cpx #250
00:097D D0F1            	   166:         bne setcol2
00:097F A200            	   167:         ldx #0
                        	   168: setcol3:
00:0981 BDF44D          	   169:         lda scnmem+500,x
00:0984 A8              	   170:         tay
00:0985 B90048          	   171:         lda coltab,y
00:0988 9DF4D9          	   172:         sta colmem+500,x
00:098B E8              	   173:         inx
00:098C E0FA            	   174:         cpx #250
00:098E D0F1            	   175:         bne setcol3
00:0990 A200            	   176:         ldx #0
                        	   177: setcol4:
00:0992 BDEE4E          	   178:         lda scnmem+750,x
00:0995 A8              	   179:         tay
00:0996 B90048          	   180:         lda coltab,y
00:0999 9DEEDA          	   181:         sta colmem+750,x
00:099C E8              	   182:         inx
00:099D E0FA            	   183:         cpx #250
00:099F D0F1            	   184:         bne setcol4
00:09A1 60              	   185:         rts
                        	   186:         
                        	   187:         ;; Read joystick in port 2
                        	   188:         ;; Writes:
                        	   189:         ;;  - joyx = $01: stick moved right
                        	   190:         ;;  - joyx = $ff: stick moved left
                        	   191:         ;;  - joyy = $01: stick moved down
                        	   192:         ;;  - joyy = $ff: stick moved up
                        	   193:         ;;  - joybtn = $01: button pressed
                        	   194: readjoy2:
00:09A2 78              	   195:         sei
00:09A3 AD00DC          	   196:         lda ci1pra
00:09A6 A000            	   197:         ldy #0
00:09A8 A200            	   198:         ldx #0
00:09AA 4A              	   199:         lsr
00:09AB B001            	   200:         bcs djr0
00:09AD 88              	   201:         dey
00:09AE 4A              	   202: djr0:   lsr
00:09AF B001            	   203:         bcs djr1
00:09B1 C8              	   204:         iny
00:09B2 4A              	   205: djr1:   lsr
00:09B3 B001            	   206:         bcs djr2
00:09B5 CA              	   207:         dex
00:09B6 4A              	   208: djr2:   lsr
00:09B7 B001            	   209:         bcs djr3
00:09B9 E8              	   210:         inx
00:09BA 4A              	   211: djr3:   lsr
00:09BB 8696            	   212:         stx joyx
00:09BD 849B            	   213:         sty joyy
00:09BF A900            	   214:         lda #0
00:09C1 2A              	   215:         rol
00:09C2 8592            	   216:         sta joybtn
00:09C4 58              	   217:         cli
00:09C5 60              	   218:         rts
                        	   219: 

Source: "./src/startup.asm"
                        	    27:         include maze.asm

Source: "maze.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maze related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert pellet table index to pellet memory address.
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (pellet table index)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of buf at offset .X
                        	    11:         ;;  - 2nd word of buf at offset .X is used as a work area
                        	    12: pelladr:
00:09C6 202208          	    13:         jsr mula5               ;multiply pellet index by 5
00:09C9 18              	    14:         clc
00:09CA B516            	    15:         lda buf,x               ;load product (lo)
00:09CC 69C4            	    16:         adc #<pelltbl           ;add pellet table address (lo)
00:09CE 9516            	    17:         sta buf,x               ;write sum (lo)
00:09D0 E8              	    18:         inx
00:09D1 B516            	    19:         lda buf,x               ;load product (hi)
00:09D3 6912            	    20:         adc #>pelltbl           ;add pellet table address (hi)
00:09D5 9516            	    21:         sta buf,x               ;write sum (hi)
00:09D7 CA              	    22:         dex
00:09D8 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Fill maze with pellets
                        	    26:         ;; May only be called from gameloop!
                        	    27: fillmaze:
                        	    28:         ldbimm 0, tmp           ;store pellet index in tmp
00:09D9 A900            	     1M         lda #0
00:09DB 851A            	     2M         sta tmp           
                        	    29: filloop:
00:09DD A51A            	    30:         lda tmp
00:09DF A200            	    31:         ldx #blki
00:09E1 20C609          	    32:         jsr pelladr             ;get pellet address
00:09E4 A001            	    33:         ldy #1
00:09E6 B116            	    34:         lda (wrd1),y
00:09E8 C9FF            	    35:         cmp #$ff                ;end marker?
00:09EA F029            	    36:         beq finfil              ;yep, we're done
00:09EC A901            	    37:         lda #1
00:09EE A002            	    38:         ldy #2
00:09F0 9116            	    39:         sta (wrd1),y            ;set pellet status        
                        	    40:         ldwptr wrd1, 0, wrd2
00:09F2 A000            	     1M         ldy #0
00:09F4 B116            	     2M         lda (wrd1),y
00:09F6 8518            	     3M         sta wrd2
00:09F8 C8              	     4M         iny
00:09F9 B116            	     5M         lda (wrd1),y
00:09FB 8519            	     6M         sta wrd2+1
00:09FD A204            	    41:         ldx #blki+4
00:09FF 203B0B          	    42:         jsr isenzr              ;is pellet an energizer?
00:0A02 F005            	    43:         beq :+
00:0A04 A053            	    44:         ldy #pellchr            ;no, it's a regular pellet
00:0A06 4C0B0A          	    45:         jmp :++
00:0A09 A054            	    46: :       ldy #enzrchr            ;yes, it's an energizer        
00:0A0B A202            	    47: :       ldx #blki+2
00:0A0D 201D09          	    48:         jsr printchr            ;print pellet char
00:0A10 E61A            	    49:         inc tmp
00:0A12 4CDD09          	    50:         jmp filloop
00:0A15 60              	    51: finfil: rts
                        	    52: 
                        	    53:         ;; Find pellet collided with by searching in the opposite direction
                        	    54:         ;; to which Pac-Man is facing.
                        	    55:         ;; May only be called from IRQ handler!
                        	    56:         ;; Reads:
                        	    57:         ;;  - sp0x, sp0y
                        	    58:         ;;  - pacdir (direction Pac-Man is facing)
                        	    59:         ;; Writes:
                        	    60:         ;;  - irqwrd1: pellet address
                        	    61:         ;;  - irqtmp: pellet index
                        	    62: findpel:
                        	    63:         ;; if pacdir=#w then find 1st pellet in row with x>=sp0x
                        	    64:         ;; if pacdir=#e then find last pellet in row with x<=sp0x
                        	    65:         ;; if pacdir=#n then find pellet in row-1 with x=sp0x
                        	    66:         ;; if pacdir=#s then find pellet in row+1 with x=sp0x
00:0A16 A5A3            	    67:         lda pacdir
00:0A18 C904            	    68:         cmp #w
00:0A1A D033            	    69:         bne fpckde
                        	    70:         cpbyt sp0y, irqtmp
00:0A1C AD01D0          	     1M         lda sp0y
00:0A1F 851F            	     2M         sta irqtmp
00:0A21 201F0B          	    71:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	    72:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A24 A51D            	     1M         lda irqwrd2
00:0A26 851F            	     2M         sta irqtmp   
00:0A28 A205            	    73:         ldx #irqblki
00:0A2A A51F            	    74: :       lda irqtmp              ;load index of west-most pellet in row
00:0A2C 20C609          	    75:         jsr pelladr             ;load pellet address into irqwrd1
00:0A2F A003            	    76:         ldy #3
                        	    77:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A31 AD00D0          	     1M         lda sp0x
00:0A34 851D            	     2M         sta irqwrd2     
00:0A36 C61D            	    78:         dec irqwrd2             ;decrement irqwrd2 (lo) to give some leeway
00:0A38 B11B            	    79:         lda (irqwrd1),y         ;load pellet x loc
00:0A3A C51D            	    80:         cmp irqwrd2
00:0A3C B005            	    81:         bcs :+                  ;pellet x loc >= sp0x?
00:0A3E E61F            	    82:         inc irqtmp              ;no, try next pellet to the east
00:0A40 4C2A0A          	    83:         jmp :-
00:0A43 A002            	    84: :       ldy #2
00:0A45 B11B            	    85:         lda (irqwrd1),y         ;yes, load pellet state
                        	    86:         jeq pelnotfd            ;has pellet already been eaten?
00:0A47 D003            	     1M         bne :+
00:0A49 4CF20A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A4C 4CEB0A          	    87:         jmp pelfound
00:0A4F C905            	    88: fpckde: cmp #e
00:0A51 D036            	    89:         bne fpckdn
                        	    90:         cpbyt sp0y, irqtmp
00:0A53 AD01D0          	     1M         lda sp0y
00:0A56 851F            	     2M         sta irqtmp
00:0A58 201F0B          	    91:         jsr fpinrow             ;get indexes of west-most & east-most pellets
00:0A5B A001            	    92:         ldy #1
00:0A5D B91D00          	    93:         lda irqwrd2,y
00:0A60 851F            	    94:         sta irqtmp              ;store index of west-most pellet
00:0A62 A205            	    95:         ldx #irqblki
00:0A64 A51F            	    96: :       lda irqtmp
00:0A66 20C609          	    97:         jsr pelladr
                        	    98:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A69 AD00D0          	     1M         lda sp0x
00:0A6C 851D            	     2M         sta irqwrd2     
00:0A6E E61D            	    99:         inc irqwrd2             ;increment irqwrd2 (lo) to give some leeway
00:0A70 A51D            	   100:         lda irqwrd2
00:0A72 A003            	   101:         ldy #3
00:0A74 D11B            	   102:         cmp (irqwrd1),y
00:0A76 B005            	   103:         bcs :+                  ;sp0x >= pellet x loc
00:0A78 C61F            	   104:         dec irqtmp              ;no, try next pellet to the west
00:0A7A 4C640A          	   105:         jmp :-
00:0A7D A002            	   106: :       ldy #2
00:0A7F B11B            	   107:         lda (irqwrd1),y         ;yes, load pellet state
                        	   108:         jeq pelnotfd            ;has pellet already been eaten?
00:0A81 D003            	     1M         bne :+
00:0A83 4CF20A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A86 4CEB0A          	   109:         jmp pelfound
00:0A89 C902            	   110: fpckdn: cmp #n
00:0A8B D034            	   111:         bne fpds
                        	   112:         cpbyt sp0y, irqtmp      ;store sp0y in irqtmp
00:0A8D AD01D0          	     1M         lda sp0y
00:0A90 851F            	     2M         sta irqtmp      
                        	   113:         sbcbimm 3, irqtmp       ;subtract 3 from irqtmp to try to find row
00:0A92 38              	     1M         sec
00:0A93 A51F            	     2M         lda irqtmp       
00:0A95 E903            	     3M         sbc #3
00:0A97 851F            	     4M         sta irqtmp       
00:0A99 20FB0A          	   114:         jsr fprixs
00:0A9C 201F0B          	   115:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   116:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A9F A51D            	     1M         lda irqwrd2
00:0AA1 851F            	     2M         sta irqtmp   
00:0AA3 A205            	   117:         ldx #irqblki
00:0AA5 A51F            	   118: :       lda irqtmp
00:0AA7 20C609          	   119:         jsr pelladr
00:0AAA AD00D0          	   120:         lda sp0x
00:0AAD A003            	   121:         ldy #3
00:0AAF D11B            	   122:         cmp (irqwrd1),y
00:0AB1 F005            	   123:         beq :+                  ;sp0x = pellet x loc?
00:0AB3 E61F            	   124:         inc irqtmp              ;no, try next pellet to the east
00:0AB5 4CA50A          	   125:         jmp :-
00:0AB8 A002            	   126: :       ldy #2
00:0ABA B11B            	   127:         lda (irqwrd1),y         ;yes, load pellet state
00:0ABC F034            	   128:         beq pelnotfd            ;has pellet already been eaten?
00:0ABE 4CEB0A          	   129:         jmp pelfound
                        	   130: fpds:   cpbyt sp0y, irqtmp
00:0AC1 AD01D0          	     1M         lda sp0y
00:0AC4 851F            	     2M         sta irqtmp
00:0AC6 200D0B          	   131:         jsr fprixn
00:0AC9 201F0B          	   132:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   133:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0ACC A51D            	     1M         lda irqwrd2
00:0ACE 851F            	     2M         sta irqtmp   
00:0AD0 A205            	   134:         ldx #irqblki
00:0AD2 A51F            	   135: :       lda irqtmp
00:0AD4 20C609          	   136:         jsr pelladr
00:0AD7 AD00D0          	   137:         lda sp0x
00:0ADA A003            	   138:         ldy #3
00:0ADC D11B            	   139:         cmp (irqwrd1),y
00:0ADE F005            	   140:         beq :+                  ;sp0x = pellet x loc?
00:0AE0 E61F            	   141:         inc irqtmp              ;no, try next pellet to the east
00:0AE2 4CD20A          	   142:         jmp :-
00:0AE5 A002            	   143: :       ldy #2
00:0AE7 B11B            	   144:         lda (irqwrd1),y         ;yes, load pellet state
00:0AE9 F007            	   145:         beq pelnotfd            ;has pellet already been eaten?
                        	   146: pelfound:
00:0AEB A900            	   147:         lda #0
00:0AED A002            	   148:         ldy #2
00:0AEF 911B            	   149:         sta (irqwrd1),y         ;pellet not yet eaten, mark as eaten
00:0AF1 60              	   150:         rts        
                        	   151: pelnotfd:
                        	   152:         ldwimm $ffff, irqwrd1   ;pellet already eaten
00:0AF2 A9FF            	     1M         lda #<$ffff
00:0AF4 851B            	     2M         sta irqwrd1   
00:0AF6 A9FF            	     3M         lda #>$ffff
00:0AF8 851C            	     4M         sta irqwrd1   +1
00:0AFA 60              	   153:         rts
                        	   154: 
                        	   155:         ;; Get y loc of next row to the south of the y loc in irqtmp
                        	   156:         ;; Reads:
                        	   157:         ;;  - irqtmp: y loc to find row south of
                        	   158:         ;; Writes:
                        	   159:         ;;  - irqtmp: y loc of next row to the south
00:0AFB A000            	   160: fprixs: ldy #0
00:0AFD B97316          	   161: :       lda plrowix,y
00:0B00 C51F            	   162:         cmp irqtmp
00:0B02 B006            	   163:         bcs :+
00:0B04 C8              	   164:         iny
00:0B05 C8              	   165:         iny
00:0B06 C8              	   166:         iny
00:0B07 4CFD0A          	   167:         jmp :-
00:0B0A 851F            	   168: :       sta irqtmp
00:0B0C 60              	   169:         rts
                        	   170:         
                        	   171:         ;; Get y loc of next row to the north of the y loc in irqtmp
                        	   172:         ;; Reads:
                        	   173:         ;;  - irqtmp: y loc to find row north of
                        	   174:         ;; Writes:
                        	   175:         ;;  - irqtmp: y loc of next row to the north
00:0B0D A042            	   176: fprixn: ldy #66
00:0B0F B97316          	   177: :       lda plrowix,y
00:0B12 C51F            	   178:         cmp irqtmp
00:0B14 9006            	   179:         bcc :+
00:0B16 88              	   180:         dey
00:0B17 88              	   181:         dey
00:0B18 88              	   182:         dey
00:0B19 4C0F0B          	   183:         jmp :-
00:0B1C 851F            	   184: :       sta irqtmp
00:0B1E 60              	   185:         rts
                        	   186:         
                        	   187:         
                        	   188:         ;; Get pellet table indexes of west-most & east-most pellets 
                        	   189:         ;; in row whose sprite y loc is in irqtmp
                        	   190:         ;; May only be called from IRQ handler!
                        	   191:         ;; Reads:
                        	   192:         ;;  - irqtmp: pellet row y loc
                        	   193:         ;; Writes:
                        	   194:         ;;  - irqwrd2: indexes of west-most & east-most pellets in row
                        	   195: fpinrow:
00:0B1F A000            	   196:         ldy #0
00:0B21 B97316          	   197: :       lda plrowix,y
00:0B24 C51F            	   198:         cmp irqtmp
00:0B26 F006            	   199:         beq :+
00:0B28 C8              	   200:         iny
00:0B29 C8              	   201:         iny
00:0B2A C8              	   202:         iny
00:0B2B 4C210B          	   203:         jmp :-
00:0B2E C8              	   204: :       iny
00:0B2F B97316          	   205:         lda plrowix,y
00:0B32 851D            	   206:         sta irqwrd2
00:0B34 C8              	   207:         iny
00:0B35 B97316          	   208:         lda plrowix,y
00:0B38 851E            	   209:         sta irqwrd2+1
00:0B3A 60              	   210:         rts
                        	   211: 
                        	   212:         ;; Check whether or not pellet at index is an energizer
                        	   213:         ;; Reads:
                        	   214:         ;;  - .X: index into buffer to access memory block
                        	   215:         ;;  - 1st byte of memory block: pellet index
                        	   216:         ;; Writes:
                        	   217:         ;;  - .Z is set if pellet is an energizer
00:0B3B A003            	   218: isenzr: ldy #3
00:0B3D 300B            	   219: :       bmi :+
00:0B3F B516            	   220:         lda buf,x
00:0B41 D95716          	   221:         cmp enzrlst,y
00:0B44 F004            	   222:         beq :+
00:0B46 88              	   223:         dey
00:0B47 4C3D0B          	   224:         jmp :-
00:0B4A 60              	   225: :       rts
                        	   226: 

Source: "./src/startup.asm"
                        	    28:         include nodes.asm

Source: "nodes.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Node-related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert node index to node address
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (node index)
                        	     8:         ;;  - .X (offset into buf to access memory block)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
                        	    12: nodeadr:
00:0B4B 204B08          	    13:         jsr mula6
00:0B4E 18              	    14:         clc
00:0B4F B516            	    15:         lda buf,x
00:0B51 6926            	    16:         adc #<nodetbl
00:0B53 9516            	    17:         sta buf,x
00:0B55 E8              	    18:         inx
00:0B56 B516            	    19:         lda buf,x
00:0B58 6911            	    20:         adc #>nodetbl
00:0B5A 9516            	    21:         sta buf,x
00:0B5C CA              	    22:         dex
00:0B5D 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Calculate distance from Pac-Man's source node to target node
                        	    26:         ;; Reads:
                        	    27:         ;;  - pacsrc (source node)
                        	    28:         ;;  - pactar (target node)
                        	    29:         ;;  - pacdir (compass direction)
                        	    30:         ;;  - .X (offset into buf to access memory block)
                        	    31:         ;; Writes:
                        	    32:         ;;  - pacdis (total distance)
                        	    33:         ;;  - pacrem (distance remaining)
                        	    34:         ;;  - 1st & 2nd word of memory block are used for calculations
                        	    35: setnodis:
00:0B5E A5A3            	    36:         lda pacdir
00:0B60 C904            	    37:         cmp #w
00:0B62 D01A            	    38:         bne chkne
00:0B64 A59F            	    39:         lda pactar
00:0B66 C921            	    40:         cmp #wrpnixe            ;eastern warp tunnel node
                        	    41:         jeq warp
00:0B68 D003            	     1M         bne :+
00:0B6A 4C030C          	     2M         jmp warp
                        	     3M :
00:0B6D A59E            	    42:         lda pacsrc
00:0B6F 204B0B          	    43:         jsr nodeadr             
00:0B72 A116            	    44:         lda (buf,x)             ;get source x coord...
00:0B74 48              	    45:         pha                     ;... and stash it on the stack
00:0B75 A59F            	    46:         lda pactar
00:0B77 204B0B          	    47:         jsr nodeadr             ;get target node address
00:0B7A 68              	    48:         pla                     ;restore source x coord
00:0B7B 4CFB0B          	    49:         jmp calcnd
00:0B7E C905            	    50: chkne:  cmp #e
00:0B80 D01A            	    51:         bne chknn
00:0B82 A59F            	    52:         lda pactar
00:0B84 C91B            	    53:         cmp #wrpnixw             ;western warp tunnel node
                        	    54:         jeq warp
00:0B86 D003            	     1M         bne :+
00:0B88 4C030C          	     2M         jmp warp
                        	     3M :
00:0B8B A59F            	    55:         lda pactar
00:0B8D 204B0B          	    56:         jsr nodeadr             
00:0B90 A116            	    57:         lda (buf,x)             ;get target x coord...
00:0B92 48              	    58:         pha                     ;... and stash it on the stack
00:0B93 A59E            	    59:         lda pacsrc
00:0B95 204B0B          	    60:         jsr nodeadr             ;get source node address
00:0B98 68              	    61:         pla                     ;restore target x coord
00:0B99 4CFB0B          	    62:         jmp calcnd
00:0B9C C902            	    63: chknn:  cmp #n
00:0B9E D02F            	    64:         bne setnds
00:0BA0 A59E            	    65:         lda pacsrc
00:0BA2 204B0B          	    66:         jsr nodeadr
                        	    67:         incptrx buf             ;advance pointer; we need y coord
00:0BA5 18              	     1M         clc
00:0BA6 B516            	     2M         lda buf             ,x
00:0BA8 6901            	     3M         adc #1
00:0BAA 9516            	     4M         sta buf             ,x
00:0BAC E8              	     5M         inx
00:0BAD B516            	     6M         lda buf             ,x
00:0BAF 6900            	     7M         adc #0
00:0BB1 9516            	     8M         sta buf             ,x
00:0BB3 CA              	     9M         dex
00:0BB4 A116            	    68:         lda (buf,x)             ;get source y coord...
00:0BB6 48              	    69:         pha                     ;... and stash it on the stack
00:0BB7 A59F            	    70:         lda pactar
00:0BB9 204B0B          	    71:         jsr nodeadr             ;get target node address
                        	    72:         incptrx buf             ;advance pointer; we need y coord
00:0BBC 18              	     1M         clc
00:0BBD B516            	     2M         lda buf             ,x
00:0BBF 6901            	     3M         adc #1
00:0BC1 9516            	     4M         sta buf             ,x
00:0BC3 E8              	     5M         inx
00:0BC4 B516            	     6M         lda buf             ,x
00:0BC6 6900            	     7M         adc #0
00:0BC8 9516            	     8M         sta buf             ,x
00:0BCA CA              	     9M         dex
00:0BCB 68              	    73:         pla                     ;restore source y coord
00:0BCC 4CFB0B          	    74:         jmp calcnd
00:0BCF A59F            	    75: setnds: lda pactar
00:0BD1 204B0B          	    76:         jsr nodeadr
                        	    77:         incptrx buf             ;advance pointer; we need y coord
00:0BD4 18              	     1M         clc
00:0BD5 B516            	     2M         lda buf             ,x
00:0BD7 6901            	     3M         adc #1
00:0BD9 9516            	     4M         sta buf             ,x
00:0BDB E8              	     5M         inx
00:0BDC B516            	     6M         lda buf             ,x
00:0BDE 6900            	     7M         adc #0
00:0BE0 9516            	     8M         sta buf             ,x
00:0BE2 CA              	     9M         dex
00:0BE3 A116            	    78:         lda (buf,x)             ;get target y coord...
00:0BE5 48              	    79:         pha                     ;... and stash it on the stack
00:0BE6 A59E            	    80:         lda pacsrc
00:0BE8 204B0B          	    81:         jsr nodeadr
                        	    82:         incptrx buf             ;advance pointer; we need y coord
00:0BEB 18              	     1M         clc
00:0BEC B516            	     2M         lda buf             ,x
00:0BEE 6901            	     3M         adc #1
00:0BF0 9516            	     4M         sta buf             ,x
00:0BF2 E8              	     5M         inx
00:0BF3 B516            	     6M         lda buf             ,x
00:0BF5 6900            	     7M         adc #0
00:0BF7 9516            	     8M         sta buf             ,x
00:0BF9 CA              	     9M         dex
00:0BFA 68              	    83:         pla                     ;restore target y coord
00:0BFB 38              	    84: calcnd: sec
00:0BFC E116            	    85:         sbc (buf,x)
00:0BFE 85A5            	    86:         sta pacdis
00:0C00 85A6            	    87:         sta pacrem
00:0C02 60              	    88:         rts
00:0C03 A900            	    89: warp:   lda #0
00:0C05 85A5            	    90:         sta pacdis
00:0C07 85A6            	    91:         sta pacrem
00:0C09 60              	    92:         rts
                        	    93: 

Source: "./src/startup.asm"
                        	    29:         include sprites.asm

Source: "sprites.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Sprite sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Initialize sprites
                        	     6: initsprt:
                        	     7:         ;; Sprite 0: Pac-Man
                        	     8:         ldbimm sp0loc, sp0ptr   ;set sprite 0 pointer
00:0C0A A940            	     1M         lda #sp0loc
00:0C0C 8DF84F          	     2M         sta sp0ptr   
00:0C0F AD3F50          	     9:         lda sp0mem+$3f          ;read byte 63
00:0C12 290F            	    10:         and #%00001111          ;mask out hi nybble
00:0C14 8D27D0          	    11:         sta sp0col              ;set sprite 0 (Pac-Man) colour        
00:0C17 A931            	    12:         lda #pacstnd
00:0C19 A200            	    13:         ldx #0
00:0C1B 204B0B          	    14:         jsr nodeadr             ;get address of Pac's starting node
                        	    15:         ldbptr wrd1, 0, sp0x    ;set Pac's x loc
00:0C1E A000            	     1M         ldy #0
00:0C20 B116            	     2M         lda (wrd1),y
00:0C22 8D00D0          	     3M         sta sp0x    
                        	    16:         ldbptr wrd1, 1, sp0y    ;set Pac's y loc
00:0C25 A001            	     1M         ldy #1
00:0C27 B116            	     2M         lda (wrd1),y
00:0C29 8D01D0          	     3M         sta sp0y    
00:0C2C A901            	    17:         lda #%00000001
00:0C2E 8D15D0          	    18:         sta spena               ;enable sprite 0 (Pac-Man)
                        	    19:         ;; Init Pac's direction & calc distance between source & target nodes
                        	    20:         ldbimm w, pacdir        ;set Pac's initial direction to west
00:0C31 A904            	     1M         lda #w
00:0C33 85A3            	     2M         sta pacdir        
                        	    21:         ldbimm pacstnd, pacsrc  ;set Pac's starting node as source node
00:0C35 A931            	     1M         lda #pacstnd
00:0C37 859E            	     2M         sta pacsrc  
                        	    22:         ldbptr wrd1, w, pactar  ;set western neighbour as target node
00:0C39 A004            	     1M         ldy #w
00:0C3B B116            	     2M         lda (wrd1),y
00:0C3D 859F            	     3M         sta pactar  
00:0C3F 205E0B          	    23:         jsr setnodis            ;calculate distance between source & target
00:0C42 60              	    24:         rts
                        	    25: 
                        	    26:         ;; Disable all sprites
                        	    27: dissprt:
00:0C43 A900            	    28:         lda #0
00:0C45 8D15D0          	    29:         sta spena
00:0C48 60              	    30:         rts
                        	    31: 
                        	    32:         ;; Convert sprite x loc in .A to char x loc
                        	    33: spx2chx:
00:0C49 38              	    34:         sec
00:0C4A E918            	    35:         sbc #spxscog
                        	    36:         diva8
00:0C4C 38              	     1M         sec
00:0C4D 4A              	     2M         lsr
00:0C4E 4A              	     3M         lsr
00:0C4F 4A              	     4M         lsr
00:0C50 60              	    37:         rts
                        	    38: 
                        	    39:         ;; Convert sprite y loc in .A to char y loc
                        	    40: spy2chy:
00:0C51 38              	    41:         sec
00:0C52 E932            	    42:         sbc #spyscog
                        	    43:         diva8
00:0C54 38              	     1M         sec
00:0C55 4A              	     2M         lsr
00:0C56 4A              	     3M         lsr
00:0C57 4A              	     4M         lsr
00:0C58 60              	    44:         rts
                        	    45: 
                        	    46:         ;; Convert char x loc in .A to sprite x loc
                        	    47: chx2spx:
                        	    48:         mula8
00:0C59 18              	     1M         clc
00:0C5A 0A              	     2M         asl
00:0C5B 0A              	     3M         asl
00:0C5C 0A              	     4M         asl
00:0C5D 18              	    49:         clc
00:0C5E 6918            	    50:         adc #spxscog
00:0C60 60              	    51:         rts
                        	    52: 
                        	    53:         ;; Convert char y loc in .A to sprite y loc
                        	    54: chy2spy:
                        	    55:         mula8
00:0C61 18              	     1M         clc
00:0C62 0A              	     2M         asl
00:0C63 0A              	     3M         asl
00:0C64 0A              	     4M         asl
00:0C65 18              	    56:         clc
00:0C66 6932            	    57:         adc #spyscog
00:0C68 60              	    58:         rts
                        	    59: 

Source: "./src/startup.asm"
                        	    30:         include irq.asm

Source: "irq.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; IRQ handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for raster IRQ.
                        	     6: setupirq:
00:0C69 78              	     7:         sei
                        	     8:         ldbimm $7f, ci1icr
00:0C6A A97F            	     1M         lda #$7f
00:0C6C 8D0DDC          	     2M         sta ci1icr
                        	     9:         ldbimm $03, irqmsk ;enable raster IRQ & mob-data collision
00:0C6F A903            	     1M         lda #$03
00:0C71 8D1AD0          	     2M         sta irqmsk 
                        	    10:         ldbimm $1b, scroly
00:0C74 A91B            	     1M         lda #$1b
00:0C76 8D11D0          	     2M         sta scroly
                        	    11:         ldbimm raslin, raster
00:0C79 A9FA            	     1M         lda #raslin
00:0C7B 8D12D0          	     2M         sta raster
                        	    12:         ldwimm procirq, cinv
00:0C7E A98A            	     1M         lda #<procirq
00:0C80 8D1403          	     2M         sta cinv
00:0C83 A90C            	     3M         lda #>procirq
00:0C85 8D1503          	     4M         sta cinv+1
00:0C88 58              	    13:         cli
00:0C89 60              	    14:         rts
                        	    15: 
                        	    16:         ;; IRQ handler. Here we implement logic for events such as:
                        	    17:         ;;  - Pac-Man's movement (player controlled but we need to 
                        	    18:         ;;    update sprite coordinates, distance remaining to target
                        	    19:         ;;     node, set new target on reaching target node, etc.)
                        	    20:         ;;  - Pac-Man's dying & updating remaining lives
                        	    21:         ;;  - Ghosts going into/out of fright mode, or being eaten
                        	    22: procirq:
00:0C8A A5A7            	    23:         lda npelrem
00:0C8C D006            	    24:         bne chkirq              ;don't handle IRQ when no pellets left
00:0C8E 0E19D0          	    25:         asl vicirq              ;acknowledge IRQ
00:0C91 4C7EEA          	    26:         jmp sysirq              ;return from interrupt
                        	    27:         
00:0C94 AD1FD0          	    28: chkirq: lda spbgcl              ;clear collision register by reading it
00:0C97 AD19D0          	    29:         lda vicirq
00:0C9A 2902            	    30:         and #$02                ;check for sprite-background collision
                        	    31:         jeq rasirq
00:0C9C D003            	     1M         bne :+
00:0C9E 4CF40C          	     2M         jmp rasirq
                        	     3M :
                        	    32:        
                        	    33:         ;; Handle sprite-background collision IRQ
00:0CA1 20160A          	    34:         jsr findpel             ;find pellet collided with & mark as eaten
00:0CA4 A51C            	    35:         lda irqwrd1+1           ;load pellet address hi-byte
00:0CA6 C9FF            	    36:         cmp #$ff                ;pellet found?
                        	    37:         jeq fincol              ;no, do nothing
00:0CA8 D003            	     1M         bne :+
00:0CAA 4CE70C          	     2M         jmp fincol              
                        	     3M :
00:0CAD A209            	    38:         ldx #irqblki+4
00:0CAF 203B0B          	    39:         jsr isenzr              ;yes, is it an energizer?
00:0CB2 D008            	    40:         bne :+
00:0CB4 A207            	    41:         ldx #irqblki+2
00:0CB6 204510          	    42:         jsr screnzr             ;yes, score it
00:0CB9 4CC10C          	    43:         jmp rmpel
00:0CBC A207            	    44: :       ldx #irqblki+2
00:0CBE 203810          	    45:         jsr scrpell             ;no, score as regular pellet
                        	    46: rmpel:  ldwptr irqwrd1, 0, irqwrd2
00:0CC1 A000            	     1M         ldy #0
00:0CC3 B11B            	     2M         lda (irqwrd1),y
00:0CC5 851D            	     3M         sta irqwrd2
00:0CC7 C8              	     4M         iny
00:0CC8 B11B            	     5M         lda (irqwrd1),y
00:0CCA 851E            	     6M         sta irqwrd2+1
00:0CCC A020            	    47:         ldy #spcechr
00:0CCE 201D09          	    48:         jsr printchr            ;erase pellet
00:0CD1 208108          	    49:         jsr printscr            ;print score
                        	    50:         ldbimm 6, irqtmp        ;set number of flashes in irqtmp
00:0CD4 A906            	     1M         lda #6
00:0CD6 851F            	     2M         sta irqtmp        
00:0CD8 C6A7            	    51:         dec npelrem             ;decrement pellets remaining
00:0CDA 20AC10          	    52:         jsr showfrt             ;conditionally enable bonus fruit
00:0CDD A5A7            	    53:         lda npelrem
                        	    54:         jne fincol
00:0CDF F003            	     1M         beq :+
00:0CE1 4CE70C          	     2M         jmp fincol
                        	     3M :
00:0CE4 20430C          	    55:         jsr dissprt
00:0CE7 AD19D0          	    56: fincol: lda vicirq
00:0CEA 2901            	    57:         and #$01
00:0CEC D006            	    58:         bne rasirq
00:0CEE 0E19D0          	    59:         asl vicirq              ;acknowledge IRQ
00:0CF1 4C7EEA          	    60:         jmp sysirq              ;return from interrupt
                        	    61: 
                        	    62:         ;; Handle raster IRQ
00:0CF4 A5A7            	    63: rasirq: lda npelrem
                        	    64:         jeq finras              ;don't process IRQ if all pellets eaten
00:0CF6 D003            	     1M         bne :+
00:0CF8 4C670D          	     2M         jmp finras              
                        	     3M :
00:0CFB A5A6            	    65:         lda pacrem
00:0CFD F02C            	    66:         beq setnsrc
00:0CFF A5A3            	    67:         lda pacdir
00:0D01 C904            	    68:         cmp #w
00:0D03 D006            	    69:         bne chkpde
00:0D05 CE00D0          	    70:         dec sp0x
00:0D08 4C220D          	    71:         jmp decrem
00:0D0B C905            	    72: chkpde: cmp #e
00:0D0D D006            	    73:         bne chkpdn
00:0D0F EE00D0          	    74:         inc sp0x
00:0D12 4C220D          	    75:         jmp decrem
00:0D15 C902            	    76: chkpdn: cmp #n
00:0D17 D006            	    77:         bne pdsouth
00:0D19 CE01D0          	    78:         dec sp0y
00:0D1C 4C220D          	    79:         jmp decrem
                        	    80: pdsouth:
00:0D1F EE01D0          	    81:         inc sp0y
00:0D22 C6A6            	    82: decrem: dec pacrem
00:0D24 A5A6            	    83:         lda pacrem
00:0D26 F003            	    84:         beq setnsrc
00:0D28 4C670D          	    85:         jmp finras
                        	    86: setnsrc:
                        	    87:         cpbyt pactar, pacsrc    ;set target node as new source node
00:0D2B A59F            	     1M         lda pactar
00:0D2D 859E            	     2M         sta pacsrc    
00:0D2F A205            	    88:         ldx #irqblki
00:0D31 204B0B          	    89:         jsr nodeadr             ;load node address into irqwrd1
                        	    90:         ldbptr irqwrd1, 0, sp0x ;store node x loc into sp0x
00:0D34 A000            	     1M         ldy #0
00:0D36 B11B            	     2M         lda (irqwrd1),y
00:0D38 8D00D0          	     3M         sta sp0x 
                        	    91:         ldbptr irqwrd1, 1, sp0y ;store node y loc into sp0y
00:0D3B A001            	     1M         ldy #1
00:0D3D B11B            	     2M         lda (irqwrd1),y
00:0D3F 8D01D0          	     3M         sta sp0y 
00:0D42 A4A4            	    92:         ldy pacnxd              ;new direction?
00:0D44 F014            	    93:         beq chkcon              ;if not, check for node in current direction
00:0D46 B11B            	    94:         lda (irqwrd1),y         ;yes, load node
00:0D48 C9FF            	    95:         cmp #$ff
00:0D4A F00E            	    96:         beq chkcon
00:0D4C C91E            	    97:         cmp #gsthmnd
00:0D4E F00A            	    98:         beq chkcon
00:0D50 859F            	    99:         sta pactar
00:0D52 84A3            	   100:         sty pacdir
00:0D54 205E0B          	   101:         jsr setnodis
00:0D57 4C670D          	   102:         jmp finras
00:0D5A A4A3            	   103: chkcon: ldy pacdir
00:0D5C B11B            	   104:         lda (irqwrd1),y
00:0D5E C9FF            	   105:         cmp #$ff
00:0D60 F005            	   106:         beq finras
00:0D62 859F            	   107:         sta pactar              ;set new target...
00:0D64 205E0B          	   108:         jsr setnodis            ;... and calculate distance
                        	   109: finras: ldbimm 0, pacnxd        ;clear out next direction
00:0D67 A900            	     1M         lda #0
00:0D69 85A4            	     2M         sta pacnxd        
00:0D6B 0E19D0          	   110:         asl vicirq              ;acknowledge IRQ
00:0D6E 4C7EEA          	   111:         jmp sysirq              ;return from interrupt
                        	   112: 

Source: "./src/startup.asm"
                        	    31:         include nmi.asm

Source: "nmi.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; NMI handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for CIA2 timer NMI.
                        	     6: setupnmi:
00:0D71 78              	     7:         sei
                        	     8:         ldwimm $740d, ti2a              ;timer A fires every ~30ms (PAL)
00:0D72 A90D            	     1M         lda #<$740d
00:0D74 8D04DD          	     2M         sta ti2a              
00:0D77 A974            	     3M         lda #>$740d
00:0D79 8D05DD          	     4M         sta ti2a              +1
                        	     9:         ldwimm 8, ti2b                  ;timer B fires every ~240ms (PAL)
00:0D7C A908            	     1M         lda #<8
00:0D7E 8D06DD          	     2M         sta ti2b                  
00:0D81 A900            	     3M         lda #>8
00:0D83 8D07DD          	     4M         sta ti2b                  +1
                        	    10:         ldbimm %00010001, ci2cra
00:0D86 A911            	     1M         lda #%00010001
00:0D88 8D0EDD          	     2M         sta ci2cra
                        	    11:         ldbimm %01010001, ci2crb
00:0D8B A951            	     1M         lda #%01010001
00:0D8D 8D0FDD          	     2M         sta ci2crb
00:0D90 AD0DDD          	    12:         lda ci2icr
                        	    13:         ldbimm %10000011, ci2icr        ;allow interrupts from both timers
00:0D93 A983            	     1M         lda #%10000011
00:0D95 8D0DDD          	     2M         sta ci2icr        
                        	    14:         ldbimm 0, pacaix                ;init Pac-Man's animation index
00:0D98 A900            	     1M         lda #0
00:0D9A 85FB            	     2M         sta pacaix                
                        	    15:         ldbimm 0, enzraix               ;init energizer animation index
00:0D9C A900            	     1M         lda #0
00:0D9E 85FC            	     2M         sta enzraix               
                        	    16:         ldwimm procnmi, nminv
00:0DA0 A9AC            	     1M         lda #<procnmi
00:0DA2 8D1803          	     2M         sta nminv
00:0DA5 A90D            	     3M         lda #>procnmi
00:0DA7 8D1903          	     4M         sta nminv+1
00:0DAA 58              	    17:         cli
00:0DAB 60              	    18:         rts
                        	    19: 
                        	    20:         ;; NMI handler. Here we animate the various in-game objects such as:
                        	    21:         ;;  - Pac-Man (in-game and death animations)
                        	    22:         ;;  - Energizers (phase)
                        	    23:         ;;  - The ghosts (regular, fright, and death animations)
                        	    24:         ;; We also handle timer events such as:
                        	    25:         ;;  - Fruit (appearance and disappearance)
                        	    26:         ;;  - Ghosts switching between scatter & chase mode
                        	    27: procnmi:
00:0DAC 48              	    28:         pha
                        	    29:         phx
00:0DAD 8A              	     1M         txa
00:0DAE 48              	     2M         pha
                        	    30:         phy                             ;push .A, .X, and .Y onto the stack
00:0DAF 98              	     1M         tya
00:0DB0 48              	     2M         pha
00:0DB1 AD0DDD          	    31:         lda ci2icr
00:0DB4 A8              	    32:         tay
00:0DB5 2902            	    33:         and #%00000010
                        	    34:         jne timbev
00:0DB7 F003            	     1M         beq :+
00:0DB9 4C210E          	     2M         jmp timbev
                        	     3M :
00:0DBC 98              	    35:         tya
00:0DBD 2901            	    36:         and #%00000001
                        	    37:         jeq sysnmi
00:0DBF D003            	     1M         bne :+
00:0DC1 4C56FE          	     2M         jmp sysnmi
                        	     3M :
                        	    38:         
                        	    39:         ;; Timer A fired: animate Pac-Man
00:0DC4 A5A7            	    40: timaev: lda npelrem
                        	    41:         jeq finnmi                      ;don't animate PM if all pellets eaten
00:0DC6 D003            	     1M         bne :+
00:0DC8 4C580F          	     2M         jmp finnmi                      
                        	     3M :
00:0DCB A5A6            	    42:         lda pacrem
                        	    43:         jeq finnmi                      ;don't animate PM if he's not moving
00:0DCD D003            	     1M         bne :+
00:0DCF 4C580F          	     2M         jmp finnmi                      
                        	     3M :
00:0DD2 E6FB            	    44:         inc pacaix
00:0DD4 A4FB            	    45:         ldy pacaix
00:0DD6 C006            	    46:         cpy #6                          ;past final animation?
00:0DD8 9005            	    47:         bcc :+
                        	    48:         ldbimm 0, pacaix                ;yes, reset animation index
00:0DDA A900            	     1M         lda #0
00:0DDC 85FB            	     2M         sta pacaix                
00:0DDE A8              	    49:         tay
00:0DDF A5A3            	    50: :       lda pacdir                      ;no, check Pac-Man's direction
00:0DE1 C902            	    51:         cmp #n
00:0DE3 F013            	    52:         beq :+
00:0DE5 C903            	    53:         cmp #s
00:0DE7 F01A            	    54:         beq :++
00:0DE9 C904            	    55:         cmp #w
00:0DEB F021            	    56:         beq :+++
                        	    57:         ldwimm pacalste, nmiwrd1        ;east
00:0DED A96D            	     1M         lda #<pacalste
00:0DEF 8520            	     2M         sta nmiwrd1        
00:0DF1 A916            	     3M         lda #>pacalste
00:0DF3 8521            	     4M         sta nmiwrd1        +1
00:0DF5 4C160E          	    58:         jmp ldanim
                        	    59: :       ldwimm pacalstn, nmiwrd1        ;north
00:0DF8 A95B            	     1M         lda #<pacalstn
00:0DFA 8520            	     2M         sta nmiwrd1        
00:0DFC A916            	     3M         lda #>pacalstn
00:0DFE 8521            	     4M         sta nmiwrd1        +1
00:0E00 4C160E          	    60:         jmp ldanim
                        	    61: :       ldwimm pacalsts, nmiwrd1        ;south
00:0E03 A961            	     1M         lda #<pacalsts
00:0E05 8520            	     2M         sta nmiwrd1        
00:0E07 A916            	     3M         lda #>pacalsts
00:0E09 8521            	     4M         sta nmiwrd1        +1
00:0E0B 4C160E          	    62:         jmp ldanim
                        	    63: :       ldwimm pacalstw, nmiwrd1        ;west
00:0E0E A967            	     1M         lda #<pacalstw
00:0E10 8520            	     2M         sta nmiwrd1        
00:0E12 A916            	     3M         lda #>pacalstw
00:0E14 8521            	     4M         sta nmiwrd1        +1
00:0E16 18              	    64: ldanim: clc
00:0E17 B120            	    65:         lda (nmiwrd1),y
00:0E19 6940            	    66:         adc #sp0loc
00:0E1B 8DF84F          	    67:         sta sp0ptr
00:0E1E 4C580F          	    68:         jmp finnmi
                        	    69:         
                        	    70:         ;; Timer B fired:
                        	    71:         ;;  - animate energizers
                        	    72:         ;;  - flash maze on level end
                        	    73:         ;;  - hide fruit
00:0E21 A5FD            	    74: timbev: lda frtena
00:0E23 F00C            	    75:         beq :++                         ;fruit enabled?
00:0E25 C926            	    76:         cmp #frttim
00:0E27 D006            	    77:         bne :+                          ;yes, fruit timer expired?
00:0E29 201911          	    78:         jsr hidefrt                     ;yes, hide fruit
00:0E2C 4C310E          	    79:         jmp :++
00:0E2F E6FD            	    80: :       inc frtena                      ;no, increment timer
00:0E31 A5A7            	    81: :       lda npelrem
                        	    82:         jeq flshmaz                     ;all pellets eaten, flash maze
00:0E33 D003            	     1M         bne :+
00:0E35 4C9E0E          	     2M         jmp flshmaz                     
                        	     3M :
00:0E38 A5FC            	    83:         lda enzraix
00:0E3A F037            	    84:         beq tic
00:0E3C C6FC            	    85:         dec enzraix
00:0E3E A003            	    86:         ldy #3
                        	    87: tocloop:
                        	    88:         jmi finnmi
00:0E40 1003            	     1M         bpl :+
00:0E42 4C580F          	     2M         jmp finnmi
                        	     3M :
                        	    89:         phy                             ;save loop counter onto stack        
00:0E45 98              	     1M         tya
00:0E46 48              	     2M         pha
00:0E47 B95716          	    90:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0E4A A20A            	    91:         ldx #nmiblki
00:0E4C 20C609          	    92:         jsr pelladr                     ;load pellet address into nmiwrd1
00:0E4F A002            	    93:         ldy #2
00:0E51 B120            	    94:         lda (nmiwrd1),y                 ;load pellet state
00:0E53 D006            	    95:         bne :+                          ;has the pellet been eaten?
                        	    96:         ply                             ;yes, next energizer
00:0E55 68              	     1M         pla
00:0E56 A8              	     2M         tay
00:0E57 88              	    97:         dey
00:0E58 4C400E          	    98:         jmp tocloop
                        	    99: :       ldwptr nmiwrd1, 0, nmiwrd2      ;energizer not eaten
00:0E5B A000            	     1M         ldy #0
00:0E5D B120            	     2M         lda (nmiwrd1),y
00:0E5F 8522            	     3M         sta nmiwrd2      
00:0E61 C8              	     4M         iny
00:0E62 B120            	     5M         lda (nmiwrd1),y
00:0E64 8523            	     6M         sta nmiwrd2      +1
00:0E66 A00F            	   100:         ldy #ltgrey
00:0E68 A20C            	   101:         ldx #nmiblki+2
00:0E6A 200A09          	   102:         jsr printcol                    ;colour energizer light grey
                        	   103:         ply                             ;pop loop counter off the stack
00:0E6D 68              	     1M         pla
00:0E6E A8              	     2M         tay
00:0E6F 88              	   104:         dey
00:0E70 4C400E          	   105:         jmp tocloop
00:0E73 E6FC            	   106: tic:    inc enzraix
00:0E75 A003            	   107:         ldy #3
                        	   108: ticloop:
                        	   109:         jmi finnmi
00:0E77 1003            	     1M         bpl :+
00:0E79 4C580F          	     2M         jmp finnmi
                        	     3M :
                        	   110:         phy                             ;push loop counter onto stack
00:0E7C 98              	     1M         tya
00:0E7D 48              	     2M         pha
00:0E7E B95716          	   111:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0E81 A20A            	   112:         ldx #nmiblki
00:0E83 20C609          	   113:         jsr pelladr                     ;load pellet address into nmiwrd1
                        	   114:         ldwptr nmiwrd1, 0, nmiwrd2
00:0E86 A000            	     1M         ldy #0
00:0E88 B120            	     2M         lda (nmiwrd1),y
00:0E8A 8522            	     3M         sta nmiwrd2
00:0E8C C8              	     4M         iny
00:0E8D B120            	     5M         lda (nmiwrd1),y
00:0E8F 8523            	     6M         sta nmiwrd2+1
00:0E91 A00B            	   115:         ldy #dkgrey
00:0E93 A20C            	   116:         ldx #nmiblki+2
00:0E95 200A09          	   117:         jsr printcol                    ;colour energizer dark grey
                        	   118:         ply                             ;pop loop counter off the stack
00:0E98 68              	     1M         pla
00:0E99 A8              	     2M         tay
00:0E9A 88              	   119:         dey
00:0E9B 4C770E          	   120:         jmp ticloop
                        	   121: flshmaz:
00:0E9E A51F            	   122:         lda irqtmp                      ;HACK: read number of flashes remaining from irqtmp
                        	   123:         jeq finnmi
00:0EA0 D003            	     1M         bne :+
00:0EA2 4C580F          	     2M         jmp finnmi
                        	     3M :
00:0EA5 6A              	   124:         ror
                        	   125:         jcc flshwht                     ;flash white on even, blue on odd
00:0EA6 B003            	     1M         bcs :+
00:0EA8 4C020F          	     2M         jmp flshwht                     
                        	     3M :
00:0EAB A200            	   126:         ldx #0
                        	   127: setblu1:
00:0EAD BD00D8          	   128:         lda colmem,x                    ;load value in colmem at pos
00:0EB0 290F            	   129:         and #%00001111                  ;mask out high nybble
00:0EB2 C901            	   130:         cmp #$01
00:0EB4 D005            	   131:         bne :+                          ;is colour = white?
00:0EB6 A906            	   132:         lda #$06
00:0EB8 9D00D8          	   133:         sta colmem,x                    ;yes, make it blue
00:0EBB E8              	   134: :       inx                     
00:0EBC E0FA            	   135:         cpx #250
00:0EBE D0ED            	   136:         bne setblu1
00:0EC0 A200            	   137:         ldx #0
                        	   138: setblu2:
00:0EC2 BDFAD8          	   139:         lda colmem+250,x                ;load value in colmem at pos
00:0EC5 290F            	   140:         and #%00001111                  ;mask out high nybble
00:0EC7 C901            	   141:         cmp #$01
00:0EC9 D005            	   142:         bne :+                          ;is colour = white?
00:0ECB A906            	   143:         lda #$06
00:0ECD 9DFAD8          	   144:         sta colmem+250,x                ;yes, make it blue
00:0ED0 E8              	   145: :       inx                     
00:0ED1 E0FA            	   146:         cpx #250
00:0ED3 D0ED            	   147:         bne setblu2
00:0ED5 A200            	   148:         ldx #0
                        	   149: setblu3:
00:0ED7 BDF4D9          	   150:         lda colmem+500,x                ;load value in colmem at pos
00:0EDA 290F            	   151:         and #%00001111                  ;mask out high nybble
00:0EDC C901            	   152:         cmp #$01
00:0EDE D005            	   153:         bne :+                          ;is colour = white?
00:0EE0 A906            	   154:         lda #$06
00:0EE2 9DF4D9          	   155:         sta colmem+500,x                ;yes, make it blue
00:0EE5 E8              	   156: :       inx                     
00:0EE6 E0FA            	   157:         cpx #250
00:0EE8 D0ED            	   158:         bne setblu3
00:0EEA A200            	   159:         ldx #0
                        	   160: setblu4:
00:0EEC BDEEDA          	   161:         lda colmem+750,x                ;load value in colmem at pos
00:0EEF 290F            	   162:         and #%00001111                  ;mask out high nybble
00:0EF1 C901            	   163:         cmp #$01
00:0EF3 D005            	   164:         bne :+                          ;is colour = white?
00:0EF5 A906            	   165:         lda #$06
00:0EF7 9DEEDA          	   166:         sta colmem+750,x                ;yes, make it blue
00:0EFA E8              	   167: :       inx
00:0EFB E0FA            	   168:         cpx #250
00:0EFD D0ED            	   169:         bne setblu4
00:0EFF 4C560F          	   170:         jmp flshfin
                        	   171: flshwht:
00:0F02 A200            	   172:         ldx #0
                        	   173: setwht1:
00:0F04 BD00D8          	   174:         lda colmem,x                    ;load value in colmem at pos
00:0F07 290F            	   175:         and #%00001111                  ;mask out high nybble
00:0F09 C906            	   176:         cmp #$06
00:0F0B D005            	   177:         bne :+                          ;is colour = blue?
00:0F0D A901            	   178:         lda #$01
00:0F0F 9D00D8          	   179:         sta colmem,x                    ;yes, make it white
00:0F12 E8              	   180: :       inx                     
00:0F13 E0FA            	   181:         cpx #250
00:0F15 D0ED            	   182:         bne setwht1
00:0F17 A200            	   183:         ldx #0
                        	   184: setwht2:
00:0F19 BDFAD8          	   185:         lda colmem+250,x                ;load value in colmem at pos
00:0F1C 290F            	   186:         and #%00001111                  ;mask out high nybble
00:0F1E C906            	   187:         cmp #$06
00:0F20 D005            	   188:         bne :+                          ;is colour = blue?
00:0F22 A901            	   189:         lda #$01
00:0F24 9DFAD8          	   190:         sta colmem+250,x                ;yes, make it white
00:0F27 E8              	   191: :       inx                     
00:0F28 E0FA            	   192:         cpx #250
00:0F2A D0ED            	   193:         bne setwht2
00:0F2C A200            	   194:         ldx #0
                        	   195: setwht3:
00:0F2E BDF4D9          	   196:         lda colmem+500,x                ;load value in colmem at pos
00:0F31 290F            	   197:         and #%00001111                  ;mask out high nybble
00:0F33 C906            	   198:         cmp #$06
00:0F35 D005            	   199:         bne :+                          ;is colour = blue?
00:0F37 A901            	   200:         lda #$01
00:0F39 9DF4D9          	   201:         sta colmem+500,x                ;yes, make it white
00:0F3C E8              	   202: :       inx                     
00:0F3D E0FA            	   203:         cpx #250
00:0F3F D0ED            	   204:         bne setwht3
00:0F41 A200            	   205:         ldx #0
                        	   206: setwht4:
00:0F43 BDEEDA          	   207:         lda colmem+750,x                ;load value in colmem at pos
00:0F46 290F            	   208:         and #%00001111                  ;mask out high nybble
00:0F48 C906            	   209:         cmp #$06
00:0F4A D005            	   210:         bne :+                          ;is colour = blue?
00:0F4C A901            	   211:         lda #$01
00:0F4E 9DEEDA          	   212:         sta colmem+750,x                ;yes, make it white
00:0F51 E8              	   213: :       inx                     
00:0F52 E0FA            	   214:         cpx #250
00:0F54 D0ED            	   215:         bne setwht4
                        	   216: flshfin:
00:0F56 C61F            	   217:         dec irqtmp                      ;decrement flashes remaining
                        	   218:         
                        	   219:         ;; Restore machine state & return from NMI
                        	   220: finnmi: ply
00:0F58 68              	     1M         pla
00:0F59 A8              	     2M         tay
                        	   221:         plx
00:0F5A 68              	     1M         pla
00:0F5B AA              	     2M         tax
00:0F5C 68              	   222:         pla                             ;restore .Y, .X, and .A from stack
00:0F5D 40              	   223:         rti
                        	   224: 

Source: "./src/startup.asm"
                        	    32:         include game.asm

Source: "game.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Game-logic related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Initialize variables when starting a new game
                        	     6: newgame:
                        	     7:         ldbimm maxpell, npelrem
00:0F5E A9B6            	     1M         lda #maxpell
00:0F60 85A7            	     2M         sta npelrem
                        	     8:         ldbimm maxmen, nmenrem
00:0F62 A903            	     1M         lda #maxmen
00:0F64 85A8            	     2M         sta nmenrem
00:0F66 A900            	     9:         lda #0
00:0F68 85A9            	    10:         sta lvlnum
00:0F6A 85FD            	    11:         sta frtena
00:0F6C 202B10          	    12:         jsr rstscr              ;reset score
00:0F6F 4CD909          	    13:         jmp fillmaze            ;fill maze with pellets
                        	    14: 
                        	    15:         ;; Setup next game level
                        	    16: nextlvl:
00:0F72 E6A9            	    17:         inc lvlnum
00:0F74 20D909          	    18:         jsr fillmaze
00:0F77 205D09          	    19:         jsr fillcolmem
00:0F7A 200A0C          	    20:         jsr initsprt
                        	    21:         ldbimm maxpell, npelrem
00:0F7D A9B6            	     1M         lda #maxpell
00:0F7F 85A7            	     2M         sta npelrem
                        	    22:         ldbimm 0, frtena
00:0F81 A900            	     1M         lda #0
00:0F83 85FD            	     2M         sta frtena
00:0F85 60              	    23:         rts
                        	    24:         
                        	    25:         ;; Main game loop
                        	    26: gameloop:
00:0F86 A5A7            	    27:         lda npelrem             ;check remaining pellets
00:0F88 D00C            	    28:         bne rdinpt              ;if <> 0 read joystick input
00:0F8A A2FF            	    29: :       ldx #$ff
00:0F8C CA              	    30: :       dex
00:0F8D D0FD            	    31:         bne :-                  ;delay
00:0F8F A51F            	    32:         lda irqtmp              ;check if end level animation finished
00:0F91 D0F7            	    33:         bne :--                 ;no? wait a bit longer
00:0F93 20720F          	    34:         jsr nextlvl 
00:0F96 20A209          	    35: rdinpt: jsr readjoy2
00:0F99 A901            	    36:         lda #1
00:0F9B C596            	    37:         cmp joyx
00:0F9D F009            	    38:         beq move
00:0F9F B00E            	    39:         bcs chky
                        	    40:         ldbimm w, tmp
00:0FA1 A904            	     1M         lda #w
00:0FA3 851A            	     2M         sta tmp
00:0FA5 4CC50F          	    41:         jmp chkmov
                        	    42: move:   ldbimm e, tmp
00:0FA8 A905            	     1M         lda #e
00:0FAA 851A            	     2M         sta tmp
00:0FAC 4CC50F          	    43:         jmp chkmov
00:0FAF A901            	    44: chky:   lda #1
00:0FB1 C59B            	    45:         cmp joyy
00:0FB3 F00C            	    46:         beq movs
                        	    47:         jcs gameloop
00:0FB5 9003            	     1M         bcc :+
00:0FB7 4C860F          	     2M         jmp gameloop
                        	     3M :
                        	    48:         ldbimm n, tmp
00:0FBA A902            	     1M         lda #n
00:0FBC 851A            	     2M         sta tmp
00:0FBE 4CC50F          	    49:         jmp chkmov
                        	    50: movs:   ldbimm s, tmp
00:0FC1 A903            	     1M         lda #s
00:0FC3 851A            	     2M         sta tmp
00:0FC5 A5A6            	    51: chkmov: lda pacrem
00:0FC7 38              	    52:         sec
00:0FC8 E903            	    53:         sbc #3
                        	    54:         jcs chkrvw
00:0FCA 9003            	     1M         bcc :+
00:0FCC 4CD60F          	     2M         jmp chkrvw
                        	     3M :
                        	    55:         cpbyt tmp, pacnxd
00:0FCF A51A            	     1M         lda tmp
00:0FD1 85A4            	     2M         sta pacnxd
00:0FD3 4C860F          	    56:         jmp gameloop
00:0FD6 A5A3            	    57: chkrvw: lda pacdir
00:0FD8 C904            	    58:         cmp #w
00:0FDA D00C            	    59:         bne chkrve
00:0FDC A51A            	    60:         lda tmp
00:0FDE C905            	    61:         cmp #e
                        	    62:         jne gameloop
00:0FE0 F003            	     1M         beq :+
00:0FE2 4C860F          	     2M         jmp gameloop
                        	     3M :
00:0FE5 4C1110          	    63:         jmp reverse
00:0FE8 C905            	    64: chkrve: cmp #e
00:0FEA D00C            	    65:         bne chkrvn
00:0FEC A51A            	    66:         lda tmp
00:0FEE C904            	    67:         cmp #w
                        	    68:         jne gameloop
00:0FF0 F003            	     1M         beq :+
00:0FF2 4C860F          	     2M         jmp gameloop
                        	     3M :
00:0FF5 4C1110          	    69:         jmp reverse
00:0FF8 C902            	    70: chkrvn: cmp #n
00:0FFA D00C            	    71:         bne revs
00:0FFC A51A            	    72:         lda tmp
00:0FFE C903            	    73:         cmp #s
                        	    74:         jne gameloop
00:1000 F003            	     1M         beq :+
00:1002 4C860F          	     2M         jmp gameloop
                        	     3M :
00:1005 4C1110          	    75:         jmp reverse
                        	    76: revs:
00:1008 A51A            	    77:         lda tmp
00:100A C902            	    78:         cmp #n
                        	    79:         jne gameloop
00:100C F003            	     1M         beq :+
00:100E 4C860F          	     2M         jmp gameloop
                        	     3M :
                        	    80: reverse:
00:1011 78              	    81:         sei
                        	    82:         cpbyt tmp, pacdir
00:1012 A51A            	     1M         lda tmp
00:1014 85A3            	     2M         sta pacdir
                        	    83:         swpbyt pacsrc, pactar
00:1016 A59E            	     1M         lda pacsrc
00:1018 48              	     2M         pha                     ;load byt1 & push onto the stack
00:1019 A59F            	     3M         lda pactar
00:101B 859E            	     4M         sta pacsrc               ;load byt2 & save to byt1
00:101D 68              	     5M         pla
00:101E 859F            	     6M         sta pactar               ;pop byt1 off the stack & save to byt2
00:1020 A5A5            	    84:         lda pacdis
00:1022 38              	    85:         sec
00:1023 E5A6            	    86:         sbc pacrem
00:1025 85A6            	    87:         sta pacrem
00:1027 58              	    88:         cli
00:1028 4C860F          	    89:         jmp gameloop
                        	    90: 

Source: "./src/startup.asm"
                        	    33:         include score.asm

Source: "score.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Score related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Reset the score to 0
                        	     6: rstscr:
00:102B A900            	     7:         lda #0
00:102D A203            	     8:         ldx #3
00:102F 3006            	     9: :       bmi :+
00:1031 95F7            	    10:         sta score,x
00:1033 CA              	    11:         dex
00:1034 4C2F10          	    12:         jmp :-
00:1037 60              	    13: :       rts
                        	    14:         
                        	    15:         ;; Score pellet (10 pts)
                        	    16:         ;; Reads:
                        	    17:         ;;  - .X (offset to memory block)
                        	    18:         ;; Writes:
                        	    19:         ;;  - score
                        	    20: scrpell:
00:1038 A910            	    21:         lda #pellpts
00:103A 9516            	    22:         sta buf,x
00:103C E8              	    23:         inx
00:103D A900            	    24:         lda #0
00:103F 9516            	    25:         sta buf,x
00:1041 CA              	    26:         dex
00:1042 4C5210          	    27:         jmp addscr
                        	    28: 
                        	    29:         ;; Score energizer (50 pts)
                        	    30:         ;; Reads:
                        	    31:         ;;  - .X (offset to memory block)
                        	    32:         ;; Writes:
                        	    33:         ;;  - 1st word in memory block
                        	    34:         ;;  - score
                        	    35: screnzr:
00:1045 A950            	    36:         lda #enzrpts
00:1047 9516            	    37:         sta buf,x
00:1049 E8              	    38:         inx
00:104A A900            	    39:         lda #0
00:104C 9516            	    40:         sta buf,x
00:104E CA              	    41:         dex
00:104F 4C5210          	    42:         jmp addscr
                        	    43:       
                        	    44:         ;; Add 16-bit BCD value to score
                        	    45:         ;; Reads:
                        	    46:         ;;  - .X: index into buffer to access memory block
                        	    47:         ;;  - 1st word in memory block containing 4 BCD digits
                        	    48:         ;; Writes:
                        	    49:         ;;  - score
                        	    50: addscr:
00:1052 F8              	    51:         sed
00:1053 18              	    52:         clc
00:1054 A5F7            	    53:         lda score
00:1056 7516            	    54:         adc buf,x
00:1058 85F7            	    55:         sta score
00:105A A5F8            	    56:         lda score+1
00:105C E8              	    57:         inx
00:105D 7516            	    58:         adc buf,x 
00:105F 85F8            	    59:         sta score+1
00:1061 A5F9            	    60:         lda score+2
00:1063 6900            	    61:         adc #0
00:1065 85F9            	    62:         sta score+2
00:1067 A5FA            	    63:         lda score+3
00:1069 6900            	    64:         adc #0
00:106B 85FA            	    65:         sta score+3
00:106D D8              	    66:         cld
00:106E CA              	    67:         dex
00:106F 60              	    68:         rts
                        	    69: 

Source: "./src/startup.asm"
                        	    34:         include fruit.asm

Source: "fruit.asm"
                        	     1: 
                        	     2:         ;; ============================================================
                        	     3:         ;; Fruit related sub-routines
                        	     4:         ;; ============================================================
                        	     5: 
                        	     6:         ;; Get fruit sprite index by level number
                        	     7:         ;; Reads:
                        	     8:         ;;  - lvlnum
                        	     9:         ;;  - frtsptbl
                        	    10:         ;; Writes:
                        	    11:         ;;  - .A (fruit sprite index)
                        	    12:         ;; Clobbers:
                        	    13:         ;;  - .X
                        	    14: lvlfrtspix:
00:1070 A200            	    15:         ldx #0
00:1072 BDB816          	    16: :       lda frtsptbl,x
00:1075 C9FF            	    17:         cmp #$ff        
00:1077 F011            	    18:         beq :++                 ;end marker?
00:1079 C5A9            	    19:         cmp lvlnum
00:107B F009            	    20:         beq :+                  ;found row for level?
00:107D E8              	    21:         inx
00:107E E8              	    22:         inx
00:107F E8              	    23:         inx
00:1080 E8              	    24:         inx
00:1081 E8              	    25:         inx
00:1082 E8              	    26:         inx
00:1083 4C7210          	    27:         jmp :-                  ;no, keep looking
00:1086 E8              	    28: :       inx                     ;yes...
00:1087 BDB816          	    29:         lda frtsptbl,x          ;...load sprite index
00:108A 60              	    30: :       rts
                        	    31: 
                        	    32:         ;; Get fruit sp0mem offset
                        	    33:         ;; Reads:
                        	    34:         ;;  - lvlnum
                        	    35:         ;;  - frtsptbl
                        	    36:         ;; Writes:
                        	    37:         ;;  - .Y (offset lo byte)
                        	    38:         ;;  - .A (offset hi byte)
                        	    39:         ;; Clobbers:
                        	    40:         ;;  - .X
                        	    41: lvlfrtspof:
00:108B A200            	    42:         ldx #0
00:108D BDB816          	    43: :       lda frtsptbl,x
00:1090 C9FF            	    44:         cmp #$ff        
00:1092 F017            	    45:         beq :++                 ;end marker?
00:1094 C5A9            	    46:         cmp lvlnum
00:1096 F009            	    47:         beq :+                  ;found row for level?
00:1098 E8              	    48:         inx
00:1099 E8              	    49:         inx
00:109A E8              	    50:         inx
00:109B E8              	    51:         inx
00:109C E8              	    52:         inx
00:109D E8              	    53:         inx
00:109E 4C8D10          	    54:         jmp :-                  ;no, keep looking
00:10A1 E8              	    55: :       inx                     ;yes...
00:10A2 E8              	    56:         inx
00:10A3 BDB816          	    57:         lda frtsptbl,x          ;load offset (lo)
00:10A6 A8              	    58:         tay
00:10A7 E8              	    59:         inx
00:10A8 BDB816          	    60:         lda frtsptbl,x          ;load offset (hi)
00:10AB 60              	    61: :       rts
                        	    62:         
                        	    63:         ;; Check number of pellets remaining and enable fruit if
                        	    64:         ;; - 130 pellets remaining OR
                        	    65:         ;; - 55 pellets remaining
                        	    66:         ;; May only be called from IRQ handler!
                        	    67:         ;; Clobbers:
                        	    68:         ;;  - irqwrd1
                        	    69: showfrt:
00:10AC A5A7            	    70:         lda npelrem
00:10AE C982            	    71:         cmp #130
00:10B0 F005            	    72:         beq :+
00:10B2 C937            	    73:         cmp #55
00:10B4 F001            	    74:         beq :+
00:10B6 60              	    75:         rts
                        	    76:         ;; Set sprite pointers
00:10B7 207010          	    77: :       jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:10BA A8              	    78:         tay                     ;save sprite index to .Y
00:10BB 18              	    79:         clc
00:10BC 6940            	    80:         adc #sp0loc
00:10BE 8DF94F          	    81:         sta sp0ptr+1            ;Write to sprite 1 pointer 
00:10C1 C8              	    82:         iny                     ;increment sprite index in .Y
00:10C2 98              	    83:         tya                     ;transfer sprite index back to .A
00:10C3 18              	    84:         clc
00:10C4 6940            	    85:         adc #sp0loc
00:10C6 8DFA4F          	    86:         sta sp0ptr+2            ;Write to sprite 2 pointer
                        	    87:         ;; Set sprite colours
00:10C9 208B10          	    88:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:10CC 841B            	    89:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:10CE 851C            	    90:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	    91:         adcwimm sp0mem, irqwrd1
00:10D0 18              	     1M         clc
00:10D1 A51B            	     2M         lda irqwrd1
00:10D3 6900            	     3M         adc #<sp0mem
00:10D5 851B            	     4M         sta irqwrd1
00:10D7 A51C            	     5M         lda irqwrd1+1
00:10D9 6950            	     6M         adc #>sp0mem
00:10DB 851C            	     7M         sta irqwrd1+1
00:10DD A03F            	    92:         ldy #$3f                ;offset to sprite colour value
00:10DF B11B            	    93:         lda (irqwrd1),y         ;load sprite colour value
00:10E1 290F            	    94:         and #%00001111          ;mask out hi nybble
00:10E3 8D28D0          	    95:         sta sp0col+1            ;write to sprite 1 colour register 
                        	    96:         adcwimm $40, irqwrd1    ;Add $40 to offset to advance to next sprite
00:10E6 18              	     1M         clc
00:10E7 A51B            	     2M         lda irqwrd1    
00:10E9 6940            	     3M         adc #<$40
00:10EB 851B            	     4M         sta irqwrd1    
00:10ED A51C            	     5M         lda irqwrd1    +1
00:10EF 6900            	     6M         adc #>$40
00:10F1 851C            	     7M         sta irqwrd1    +1
00:10F3 B11D            	    97:         lda (irqwrd2),y         ;load sprite colour value
00:10F5 290F            	    98:         and #%00001111          ;mask out hi nybble
00:10F7 8D29D0          	    99:         sta sp0col+2            ;write to sprite 2 colour register
                        	   100:         ;; Set sprite x,y locations
                        	   101:         ldbimm frxpos, sp1x
00:10FA A967            	     1M         lda #frxpos
00:10FC 8D02D0          	     2M         sta sp1x
                        	   102:         ldbimm frxpos, sp2x
00:10FF A967            	     1M         lda #frxpos
00:1101 8D04D0          	     2M         sta sp2x
                        	   103:         ldbimm frypos, sp1y
00:1104 A9A2            	     1M         lda #frypos
00:1106 8D03D0          	     2M         sta sp1y
                        	   104:         ldbimm frypos, sp2y
00:1109 A9A2            	     1M         lda #frypos
00:110B 8D05D0          	     2M         sta sp2y
                        	   105:         ;; Enable sprites 1+2
00:110E AD15D0          	   106:         lda spena
00:1111 0906            	   107:         ora #%00000110
00:1113 8D15D0          	   108:         sta spena
                        	   109:         ;; Start fruit timer countdown
00:1116 E6FD            	   110:         inc frtena
00:1118 60              	   111:         rts
                        	   112: 
                        	   113:         ;; Hide fruit
                        	   114: hidefrt:
00:1119 AD15D0          	   115:         lda spena
00:111C 29F9            	   116:         and #%11111001
00:111E 8D15D0          	   117:         sta spena               ;disable sprites 1+2
                        	   118:         ldbimm 0, frtena        ;disable fruit timer
00:1121 A900            	     1M         lda #0
00:1123 85FD            	     2M         sta frtena        
00:1125 60              	   119:         rts
                        	   120: 

Source: "./src/startup.asm"
                        	    35: 
                        	    36:         ;; Include tables
                        	    37:         include tables.asm

Source: "tables.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Data table definitions
                        	     3:         ;; ============================================================
                        	     4:         
                        	     5:         ;; Node table
                        	     6:         ;; Format:        
                        	     7:         ;;  - byte x,y (node loc in sprite coords)
                        	     8:         ;;  - byte n,s,w,e (indices of neighboring nodes)
                        	     9: nodetbl:
                        	    10:         ;; Row 1
00:1126 20              	    11:         byte $20,$3a,$ff,$06,$ff,$01
00:1127 3A
00:1128 FF
00:1129 06
00:112A FF
00:112B 01
00:112C 40              	    12:         byte $40,$3a,$ff,$07,$00,$02
00:112D 3A
00:112E FF
00:112F 07
00:1130 00
00:1131 02
00:1132 60              	    13:         byte $60,$3a,$ff,$09,$01,$ff
00:1133 3A
00:1134 FF
00:1135 09
00:1136 01
00:1137 FF
00:1138 70              	    14:         byte $70,$3a,$ff,$0a,$ff,$04
00:1139 3A
00:113A FF
00:113B 0A
00:113C FF
00:113D 04
00:113E 90              	    15:         byte $90,$3a,$ff,$0c,$03,$05
00:113F 3A
00:1140 FF
00:1141 0C
00:1142 03
00:1143 05
00:1144 B0              	    16:         byte $b0,$3a,$ff,$0d,$04,$ff
00:1145 3A
00:1146 FF
00:1147 0D
00:1148 04
00:1149 FF
                        	    17:         ;; Row 2
00:114A 20              	    18:         byte $20,$52,$00,$0e,$ff,$07
00:114B 52
00:114C 00
00:114D 0E
00:114E FF
00:114F 07
00:1150 40              	    19:         byte $40,$52,$01,$0f,$06,$08
00:1151 52
00:1152 01
00:1153 0F
00:1154 06
00:1155 08
00:1156 50              	    20:         byte $50,$52,$ff,$10,$07,$09
00:1157 52
00:1158 FF
00:1159 10
00:115A 07
00:115B 09
00:115C 60              	    21:         byte $60,$52,$02,$ff,$08,$0a
00:115D 52
00:115E 02
00:115F FF
00:1160 08
00:1161 0A
00:1162 70              	    22:         byte $70,$52,$03,$ff,$09,$0b
00:1163 52
00:1164 03
00:1165 FF
00:1166 09
00:1167 0B
00:1168 80              	    23:         byte $80,$52,$ff,$13,$0a,$0c
00:1169 52
00:116A FF
00:116B 13
00:116C 0A
00:116D 0C
00:116E 90              	    24:         byte $90,$52,$04,$14,$0b,$0d
00:116F 52
00:1170 04
00:1171 14
00:1172 0B
00:1173 0D
00:1174 B0              	    25:         byte $b0,$52,$05,$15,$0c,$ff
00:1175 52
00:1176 05
00:1177 15
00:1178 0C
00:1179 FF
                        	    26:         ;; Row 3
00:117A 20              	    27:         byte $20,$6a,$06,$ff,$ff,$0f
00:117B 6A
00:117C 06
00:117D FF
00:117E FF
00:117F 0F
00:1180 40              	    28:         byte $40,$6a,$07,$1c,$0e,$ff
00:1181 6A
00:1182 07
00:1183 1C
00:1184 0E
00:1185 FF
00:1186 50              	    29:         byte $50,$6a,$08,$ff,$ff,$11
00:1187 6A
00:1188 08
00:1189 FF
00:118A FF
00:118B 11
00:118C 60              	    30:         byte $60,$6a,$ff,$17,$10,$ff
00:118D 6A
00:118E FF
00:118F 17
00:1190 10
00:1191 FF
00:1192 70              	    31:         byte $70,$6a,$ff,$19,$ff,$13
00:1193 6A
00:1194 FF
00:1195 19
00:1196 FF
00:1197 13
00:1198 80              	    32:         byte $80,$6a,$0b,$ff,$12,$ff
00:1199 6A
00:119A 0B
00:119B FF
00:119C 12
00:119D FF
00:119E 90              	    33:         byte $90,$6a,$0c,$20,$ff,$15
00:119F 6A
00:11A0 0C
00:11A1 20
00:11A2 FF
00:11A3 15
00:11A4 B0              	    34:         byte $b0,$6a,$0d,$ff,$14,$ff
00:11A5 6A
00:11A6 0D
00:11A7 FF
00:11A8 14
00:11A9 FF
                        	    35:         ;; Row 4
00:11AA 50              	    36:         byte $50,$7a,$ff,$1d,$ff,$17
00:11AB 7A
00:11AC FF
00:11AD 1D
00:11AE FF
00:11AF 17
00:11B0 60              	    37:         byte $60,$7a,$11,$ff,$16,$18
00:11B1 7A
00:11B2 11
00:11B3 FF
00:11B4 16
00:11B5 18
00:11B6 68              	    38:         byte $68,$7a,$ff,$1e,$17,$19
00:11B7 7A
00:11B8 FF
00:11B9 1E
00:11BA 17
00:11BB 19
00:11BC 70              	    39:         byte $70,$7a,$12,$ff,$18,$1a
00:11BD 7A
00:11BE 12
00:11BF FF
00:11C0 18
00:11C1 1A
00:11C2 80              	    40:         byte $80,$7a,$ff,$1f,$19,$ff
00:11C3 7A
00:11C4 FF
00:11C5 1F
00:11C6 19
00:11C7 FF
                        	    41:         ;; Row 5
00:11C8 18              	    42:         byte $18,$92,$ff,$ff,$21,$1c
00:11C9 92
00:11CA FF
00:11CB FF
00:11CC 21
00:11CD 1C
00:11CE 40              	    43:         byte $40,$92,$0f,$25,$1b,$1d
00:11CF 92
00:11D0 0F
00:11D1 25
00:11D2 1B
00:11D3 1D
00:11D4 50              	    44:         byte $50,$92,$16,$22,$1c,$ff
00:11D5 92
00:11D6 16
00:11D7 22
00:11D8 1C
00:11D9 FF
00:11DA 68              	    45:         byte $68,$92,$18,$ff,$ff,$ff
00:11DB 92
00:11DC 18
00:11DD FF
00:11DE FF
00:11DF FF
00:11E0 80              	    46:         byte $80,$92,$1a,$23,$ff,$20
00:11E1 92
00:11E2 1A
00:11E3 23
00:11E4 FF
00:11E5 20
00:11E6 90              	    47:         byte $90,$92,$14,$2a,$1f,$21
00:11E7 92
00:11E8 14
00:11E9 2A
00:11EA 1F
00:11EB 21
00:11EC B8              	    48:         byte $b8,$92,$ff,$ff,$20,$1b
00:11ED 92
00:11EE FF
00:11EF FF
00:11F0 20
00:11F1 1B
                        	    49:         ;; Row 6
00:11F2 50              	    50:         byte $50,$a2,$1d,$26,$ff,$23
00:11F3 A2
00:11F4 1D
00:11F5 26
00:11F6 FF
00:11F7 23
00:11F8 80              	    51:         byte $80,$a2,$1f,$29,$22,$ff
00:11F9 A2
00:11FA 1F
00:11FB 29
00:11FC 22
00:11FD FF
                        	    52:         ;; Row 7
00:11FE 20              	    53:         byte $20,$ba,$ff,$2c,$ff,$25
00:11FF BA
00:1200 FF
00:1201 2C
00:1202 FF
00:1203 25
00:1204 40              	    54:         byte $40,$ba,$1c,$2e,$24,$26
00:1205 BA
00:1206 1C
00:1207 2E
00:1208 24
00:1209 26
00:120A 50              	    55:         byte $50,$ba,$22,$ff,$25,$27
00:120B BA
00:120C 22
00:120D FF
00:120E 25
00:120F 27
00:1210 60              	    56:         byte $60,$ba,$ff,$30,$26,$ff
00:1211 BA
00:1212 FF
00:1213 30
00:1214 26
00:1215 FF
00:1216 70              	    57:         byte $70,$ba,$ff,$32,$ff,$29
00:1217 BA
00:1218 FF
00:1219 32
00:121A FF
00:121B 29
00:121C 80              	    58:         byte $80,$ba,$23,$ff,$28,$2a
00:121D BA
00:121E 23
00:121F FF
00:1220 28
00:1221 2A
00:1222 90              	    59:         byte $90,$ba,$20,$34,$29,$2b
00:1223 BA
00:1224 20
00:1225 34
00:1226 29
00:1227 2B
00:1228 B0              	    60:         byte $b0,$ba,$ff,$36,$2a,$ff
00:1229 BA
00:122A FF
00:122B 36
00:122C 2A
00:122D FF
                        	    61:         ;; Row 8
00:122E 20              	    62:         byte $20,$ca,$24,$ff,$ff,$2d
00:122F CA
00:1230 24
00:1231 FF
00:1232 FF
00:1233 2D
00:1234 30              	    63:         byte $30,$ca,$ff,$38,$2c,$ff
00:1235 CA
00:1236 FF
00:1237 38
00:1238 2C
00:1239 FF
00:123A 40              	    64:         byte $40,$ca,$25,$39,$ff,$2f
00:123B CA
00:123C 25
00:123D 39
00:123E FF
00:123F 2F
00:1240 50              	    65:         byte $50,$ca,$ff,$3a,$2e,$30
00:1241 CA
00:1242 FF
00:1243 3A
00:1244 2E
00:1245 30
00:1246 60              	    66:         byte $60,$ca,$27,$ff,$2f,$31
00:1247 CA
00:1248 27
00:1249 FF
00:124A 2F
00:124B 31
00:124C 68              	    67:         byte $68,$ca,$ff,$ff,$30,$32
00:124D CA
00:124E FF
00:124F FF
00:1250 30
00:1251 32
00:1252 70              	    68:         byte $70,$ca,$28,$ff,$31,$33
00:1253 CA
00:1254 28
00:1255 FF
00:1256 31
00:1257 33
00:1258 80              	    69:         byte $80,$ca,$ff,$3d,$32,$34
00:1259 CA
00:125A FF
00:125B 3D
00:125C 32
00:125D 34
00:125E 90              	    70:         byte $90,$ca,$2a,$3e,$33,$ff
00:125F CA
00:1260 2A
00:1261 3E
00:1262 33
00:1263 FF
00:1264 A0              	    71:         byte $a0,$ca,$ff,$3f,$ff,$36
00:1265 CA
00:1266 FF
00:1267 3F
00:1268 FF
00:1269 36
00:126A B0              	    72:         byte $b0,$ca,$2b,$ff,$35,$ff
00:126B CA
00:126C 2B
00:126D FF
00:126E 35
00:126F FF
                        	    73:         ;; Row 9
00:1270 20              	    74:         byte $20,$da,$ff,$41,$ff,$38
00:1271 DA
00:1272 FF
00:1273 41
00:1274 FF
00:1275 38
00:1276 30              	    75:         byte $30,$da,$2d,$ff,$37,$39
00:1277 DA
00:1278 2D
00:1279 FF
00:127A 37
00:127B 39
00:127C 40              	    76:         byte $40,$da,$2e,$ff,$38,$ff
00:127D DA
00:127E 2E
00:127F FF
00:1280 38
00:1281 FF
00:1282 50              	    77:         byte $50,$da,$2f,$ff,$ff,$3b
00:1283 DA
00:1284 2F
00:1285 FF
00:1286 FF
00:1287 3B
00:1288 60              	    78:         byte $60,$da,$ff,$42,$3a,$ff
00:1289 DA
00:128A FF
00:128B 42
00:128C 3A
00:128D FF
00:128E 70              	    79:         byte $70,$da,$ff,$43,$ff,$3d
00:128F DA
00:1290 FF
00:1291 43
00:1292 FF
00:1293 3D
00:1294 80              	    80:         byte $80,$da,$33,$ff,$3c,$ff
00:1295 DA
00:1296 33
00:1297 FF
00:1298 3C
00:1299 FF
00:129A 90              	    81:         byte $90,$da,$34,$ff,$ff,$3f
00:129B DA
00:129C 34
00:129D FF
00:129E FF
00:129F 3F
00:12A0 A0              	    82:         byte $a0,$da,$35,$ff,$3e,$40
00:12A1 DA
00:12A2 35
00:12A3 FF
00:12A4 3E
00:12A5 40
00:12A6 B0              	    83:         byte $b0,$da,$ff,$44,$3f,$ff
00:12A7 DA
00:12A8 FF
00:12A9 44
00:12AA 3F
00:12AB FF
                        	    84:         ;; Row 10
00:12AC 20              	    85:         byte $20,$ea,$37,$ff,$ff,$42
00:12AD EA
00:12AE 37
00:12AF FF
00:12B0 FF
00:12B1 42
00:12B2 60              	    86:         byte $60,$ea,$3b,$ff,$41,$43
00:12B3 EA
00:12B4 3B
00:12B5 FF
00:12B6 41
00:12B7 43
00:12B8 70              	    87:         byte $70,$ea,$3c,$ff,$42,$44
00:12B9 EA
00:12BA 3C
00:12BB FF
00:12BC 42
00:12BD 44
00:12BE B0              	    88:         byte $b0,$ea,$40,$ff,$43,$ff
00:12BF EA
00:12C0 40
00:12C1 FF
00:12C2 43
00:12C3 FF
                        	    89: 
                        	    90: 
                        	    91:         ;; Pellet table
                        	    92:         ;; Format:        
                        	    93:         ;;  - word address (screen memory address)
                        	    94:         ;;  - byte status (0=eaten, 1=not eaten)
                        	    95:         ;;  - byte x,y (sprite coordinates of char)
                        	    96: pelltbl:
                        	    97:         ;; Row 1
00:12C4 2900            	    98:         word $0029
00:12C6 01              	    99:         byte 1,$20,$3a
00:12C7 20
00:12C8 3A
00:12C9 2A00            	   100:         word $002a
00:12CB 01              	   101:         byte 1,$28,$3a
00:12CC 28
00:12CD 3A
00:12CE 2B00            	   102:         word $002b
00:12D0 01              	   103:         byte 1,$30,$3a
00:12D1 30
00:12D2 3A
00:12D3 2C00            	   104:         word $002c
00:12D5 01              	   105:         byte 1,$38,$3a
00:12D6 38
00:12D7 3A
00:12D8 2D00            	   106:         word $002d
00:12DA 01              	   107:         byte 1,$40,$3a
00:12DB 40
00:12DC 3A
00:12DD 2E00            	   108:         word $002e
00:12DF 01              	   109:         byte 1,$48,$3a
00:12E0 48
00:12E1 3A
00:12E2 2F00            	   110:         word $002f
00:12E4 01              	   111:         byte 1,$50,$3a
00:12E5 50
00:12E6 3A
00:12E7 3000            	   112:         word $0030
00:12E9 01              	   113:         byte 1,$58,$3a
00:12EA 58
00:12EB 3A
00:12EC 3100            	   114:         word $0031
00:12EE 01              	   115:         byte 1,$60,$3a
00:12EF 60
00:12F0 3A
00:12F1 3300            	   116:         word $0033
00:12F3 01              	   117:         byte 1,$70,$3a
00:12F4 70
00:12F5 3A
00:12F6 3400            	   118:         word $0034
00:12F8 01              	   119:         byte 1,$78,$3a
00:12F9 78
00:12FA 3A
00:12FB 3500            	   120:         word $0035
00:12FD 01              	   121:         byte 1,$80,$3a
00:12FE 80
00:12FF 3A
00:1300 3600            	   122:         word $0036
00:1302 01              	   123:         byte 1,$88,$3a
00:1303 88
00:1304 3A
00:1305 3700            	   124:         word $0037
00:1307 01              	   125:         byte 1,$90,$3a
00:1308 90
00:1309 3A
00:130A 3800            	   126:         word $0038
00:130C 01              	   127:         byte 1,$98,$3a
00:130D 98
00:130E 3A
00:130F 3900            	   128:         word $0039
00:1311 01              	   129:         byte 1,$a0,$3a
00:1312 A0
00:1313 3A
00:1314 3A00            	   130:         word $003a
00:1316 01              	   131:         byte 1,$a8,$3a
00:1317 A8
00:1318 3A
00:1319 3B00            	   132:         word $003b
00:131B 01              	   133:         byte 1,$b0,$3a
00:131C B0
00:131D 3A
                        	   134:         ;; Row 2
00:131E 5100            	   135:         word $0051
00:1320 01              	   136:         byte 1,$20,$42          ;energizer
00:1321 20
00:1322 42
00:1323 5500            	   137:         word $0055
00:1325 01              	   138:         byte 1,$40,$42
00:1326 40
00:1327 42
00:1328 5900            	   139:         word $0059
00:132A 01              	   140:         byte 1,$60,$42
00:132B 60
00:132C 42
00:132D 5B00            	   141:         word $005b
00:132F 01              	   142:         byte 1,$70,$42
00:1330 70
00:1331 42
00:1332 5F00            	   143:         word $005f
00:1334 01              	   144:         byte 1,$90,$42
00:1335 90
00:1336 42
00:1337 6300            	   145:         word $0063
00:1339 01              	   146:         byte 1,$b0,$42          ;energizer
00:133A B0
00:133B 42
                        	   147:         ;; Row 3
00:133C 7900            	   148:         word $0079
00:133E 01              	   149:         byte 1,$20,$4a
00:133F 20
00:1340 4A
00:1341 7D00            	   150:         word $007d
00:1343 01              	   151:         byte 1,$40,$4a
00:1344 40
00:1345 4A
00:1346 8100            	   152:         word $0081
00:1348 01              	   153:         byte 1,$60,$4a
00:1349 60
00:134A 4A
00:134B 8300            	   154:         word $0083
00:134D 01              	   155:         byte 1,$70,$4a
00:134E 70
00:134F 4A
00:1350 8700            	   156:         word $0087
00:1352 01              	   157:         byte 1,$90,$4a
00:1353 90
00:1354 4A
00:1355 8B00            	   158:         word $008b
00:1357 01              	   159:         byte 1,$b0,$4a
00:1358 B0
00:1359 4A
                        	   160:         ;; Row 4
00:135A A100            	   161:         word $00a1
00:135C 01              	   162:         byte 1,$20,$52
00:135D 20
00:135E 52
00:135F A200            	   163:         word $00a2
00:1361 01              	   164:         byte 1,$28,$52
00:1362 28
00:1363 52
00:1364 A300            	   165:         word $00a3
00:1366 01              	   166:         byte 1,$30,$52
00:1367 30
00:1368 52
00:1369 A400            	   167:         word $00a4
00:136B 01              	   168:         byte 1,$38,$52
00:136C 38
00:136D 52
00:136E A500            	   169:         word $00a5
00:1370 01              	   170:         byte 1,$40,$52
00:1371 40
00:1372 52
00:1373 A600            	   171:         word $00a6
00:1375 01              	   172:         byte 1,$48,$52
00:1376 48
00:1377 52
00:1378 A700            	   173:         word $00a7
00:137A 01              	   174:         byte 1,$50,$52
00:137B 50
00:137C 52
00:137D A800            	   175:         word $00a8
00:137F 01              	   176:         byte 1,$58,$52
00:1380 58
00:1381 52
00:1382 A900            	   177:         word $00a9
00:1384 01              	   178:         byte 1,$60,$52
00:1385 60
00:1386 52
00:1387 AA00            	   179:         word $00aa
00:1389 01              	   180:         byte 1,$68,$52
00:138A 68
00:138B 52
00:138C AB00            	   181:         word $00ab
00:138E 01              	   182:         byte 1,$70,$52
00:138F 70
00:1390 52
00:1391 AC00            	   183:         word $00ac
00:1393 01              	   184:         byte 1,$78,$52
00:1394 78
00:1395 52
00:1396 AD00            	   185:         word $00ad
00:1398 01              	   186:         byte 1,$80,$52
00:1399 80
00:139A 52
00:139B AE00            	   187:         word $00ae
00:139D 01              	   188:         byte 1,$88,$52
00:139E 88
00:139F 52
00:13A0 AF00            	   189:         word $00af
00:13A2 01              	   190:         byte 1,$90,$52
00:13A3 90
00:13A4 52
00:13A5 B000            	   191:         word $00b0
00:13A7 01              	   192:         byte 1,$98,$52
00:13A8 98
00:13A9 52
00:13AA B100            	   193:         word $00b1
00:13AC 01              	   194:         byte 1,$a0,$52
00:13AD A0
00:13AE 52
00:13AF B200            	   195:         word $00b2
00:13B1 01              	   196:         byte 1,$a8,$52
00:13B2 A8
00:13B3 52
00:13B4 B300            	   197:         word $00b3
00:13B6 01              	   198:         byte 1,$b0,$52
00:13B7 B0
00:13B8 52
                        	   199:         ;; Row 5
00:13B9 C900            	   200:         word $00c9
00:13BB 01              	   201:         byte 1,$20,$5a
00:13BC 20
00:13BD 5A
00:13BE CD00            	   202:         word $00cd
00:13C0 01              	   203:         byte 1,$40,$5a
00:13C1 40
00:13C2 5A
00:13C3 CF00            	   204:         word $00cf
00:13C5 01              	   205:         byte 1,$50,$5a
00:13C6 50
00:13C7 5A
00:13C8 D500            	   206:         word $00d5
00:13CA 01              	   207:         byte 1,$80,$5a
00:13CB 80
00:13CC 5A
00:13CD D700            	   208:         word $00d7
00:13CF 01              	   209:         byte 1,$90,$5a
00:13D0 90
00:13D1 5A
00:13D2 DB00            	   210:         word $00db
00:13D4 01              	   211:         byte 1,$b0,$5a
00:13D5 B0
00:13D6 5A
                        	   212:         ;; Row 6
00:13D7 F100            	   213:         word $00f1
00:13D9 01              	   214:         byte 1,$20,$62
00:13DA 20
00:13DB 62
00:13DC F500            	   215:         word $00f5
00:13DE 01              	   216:         byte 1,$40,$62
00:13DF 40
00:13E0 62
00:13E1 F700            	   217:         word $00f7
00:13E3 01              	   218:         byte 1,$50,$62
00:13E4 50
00:13E5 62
00:13E6 FD00            	   219:         word $00fd
00:13E8 01              	   220:         byte 1,$80,$62
00:13E9 80
00:13EA 62
00:13EB FF00            	   221:         word $00ff
00:13ED 01              	   222:         byte 1,$90,$62
00:13EE 90
00:13EF 62
00:13F0 0301            	   223:         word $0103
00:13F2 01              	   224:         byte 1,$b0,$62
00:13F3 B0
00:13F4 62
                        	   225:         ;; Row 7
00:13F5 1901            	   226:         word $0119
00:13F7 01              	   227:         byte 1,$20,$6a
00:13F8 20
00:13F9 6A
00:13FA 1A01            	   228:         word $011a
00:13FC 01              	   229:         byte 1,$28,$6a
00:13FD 28
00:13FE 6A
00:13FF 1B01            	   230:         word $011b
00:1401 01              	   231:         byte 1,$30,$6a
00:1402 30
00:1403 6A
00:1404 1C01            	   232:         word $011c
00:1406 01              	   233:         byte 1,$38,$6a
00:1407 38
00:1408 6A
00:1409 1D01            	   234:         word $011d
00:140B 01              	   235:         byte 1,$40,$6a
00:140C 40
00:140D 6A
00:140E 1F01            	   236:         word $011f
00:1410 01              	   237:         byte 1,$50,$6a
00:1411 50
00:1412 6A
00:1413 2001            	   238:         word $0120
00:1415 01              	   239:         byte 1,$58,$6a
00:1416 58
00:1417 6A
00:1418 2101            	   240:         word $0121
00:141A 01              	   241:         byte 1,$60,$6a
00:141B 60
00:141C 6A
00:141D 2301            	   242:         word $0123
00:141F 01              	   243:         byte 1,$70,$6a
00:1420 70
00:1421 6A
00:1422 2401            	   244:         word $0124
00:1424 01              	   245:         byte 1,$78,$6a
00:1425 78
00:1426 6A
00:1427 2501            	   246:         word $0125
00:1429 01              	   247:         byte 1,$80,$6a
00:142A 80
00:142B 6A
00:142C 2701            	   248:         word $0127
00:142E 01              	   249:         byte 1,$90,$6a
00:142F 90
00:1430 6A
00:1431 2801            	   250:         word $0128
00:1433 01              	   251:         byte 1,$98,$6a
00:1434 98
00:1435 6A
00:1436 2901            	   252:         word $0129
00:1438 01              	   253:         byte 1,$a0,$6a
00:1439 A0
00:143A 6A
00:143B 2A01            	   254:         word $012a
00:143D 01              	   255:         byte 1,$a8,$6a
00:143E A8
00:143F 6A
00:1440 2B01            	   256:         word $012b
00:1442 01              	   257:         byte 1,$b0,$6a
00:1443 B0
00:1444 6A
                        	   258:         ;; Row 8
00:1445 4501            	   259:         word $0145
00:1447 01              	   260:         byte 1,$40,$72
00:1448 40
00:1449 72
00:144A 4901            	   261:         word $0149
00:144C 01              	   262:         byte 1,$60,$72
00:144D 60
00:144E 72
00:144F 4B01            	   263:         word $014b
00:1451 01              	   264:         byte 1,$70,$72
00:1452 70
00:1453 72
00:1454 4F01            	   265:         word $014f
00:1456 01              	   266:         byte 1,$90,$72
00:1457 90
00:1458 72
                        	   267:         ;; Row 9
00:1459 6D01            	   268:         word $016d
00:145B 01              	   269:         byte 1,$40,$7a
00:145C 40
00:145D 7A
00:145E 7701            	   270:         word $0177
00:1460 01              	   271:         byte 1,$90,$7a
00:1461 90
00:1462 7A
                        	   272:         ;; Row 10
00:1463 9501            	   273:         word $0195
00:1465 01              	   274:         byte 1,$40,$82
00:1466 40
00:1467 82
00:1468 9F01            	   275:         word $019f
00:146A 01              	   276:         byte 1,$90,$82
00:146B 90
00:146C 82
                        	   277:         ;; Row 11
00:146D BD01            	   278:         word $01bd
00:146F 01              	   279:         byte 1,$40,$8a
00:1470 40
00:1471 8A
00:1472 C701            	   280:         word $01c7
00:1474 01              	   281:         byte 1,$90,$8a
00:1475 90
00:1476 8A
                        	   282:         ;; Row 12
00:1477 E501            	   283:         word $01e5
00:1479 01              	   284:         byte 1,$40,$92
00:147A 40
00:147B 92
00:147C EF01            	   285:         word $01ef
00:147E 01              	   286:         byte 1,$90,$92
00:147F 90
00:1480 92
                        	   287:         ;; Row 13
00:1481 0D02            	   288:         word $020d
00:1483 01              	   289:         byte 1,$40,$9a
00:1484 40
00:1485 9A
00:1486 1702            	   290:         word $0217
00:1488 01              	   291:         byte 1,$90,$9a
00:1489 90
00:148A 9A
                        	   292:         ;; Row 14
00:148B 3502            	   293:         word $0235
00:148D 01              	   294:         byte 1,$40,$a2
00:148E 40
00:148F A2
00:1490 3F02            	   295:         word $023f
00:1492 01              	   296:         byte 1,$90,$a2
00:1493 90
00:1494 A2
                        	   297:         ;; Row 15
00:1495 5D02            	   298:         word $025d
00:1497 01              	   299:         byte 1,$40,$aa
00:1498 40
00:1499 AA
00:149A 6702            	   300:         word $0267
00:149C 01              	   301:         byte 1,$90,$aa
00:149D 90
00:149E AA
                        	   302:         ;; Row 16
00:149F 8502            	   303:         word $0285
00:14A1 01              	   304:         byte 1,$40,$b2
00:14A2 40
00:14A3 B2
00:14A4 8F02            	   305:         word $028f
00:14A6 01              	   306:         byte 1,$90,$b2
00:14A7 90
00:14A8 B2
                        	   307:         ;; Row 17
00:14A9 A902            	   308:         word $02a9
00:14AB 01              	   309:         byte 1,$20,$ba
00:14AC 20
00:14AD BA
00:14AE AA02            	   310:         word $02aa
00:14B0 01              	   311:         byte 1,$28,$ba
00:14B1 28
00:14B2 BA
00:14B3 AB02            	   312:         word $02ab
00:14B5 01              	   313:         byte 1,$30,$ba
00:14B6 30
00:14B7 BA
00:14B8 AC02            	   314:         word $02ac
00:14BA 01              	   315:         byte 1,$38,$ba
00:14BB 38
00:14BC BA
00:14BD AD02            	   316:         word $02ad
00:14BF 01              	   317:         byte 1,$40,$ba
00:14C0 40
00:14C1 BA
00:14C2 AE02            	   318:         word $02ae
00:14C4 01              	   319:         byte 1,$48,$ba
00:14C5 48
00:14C6 BA
00:14C7 AF02            	   320:         word $02af
00:14C9 01              	   321:         byte 1,$50,$ba
00:14CA 50
00:14CB BA
00:14CC B002            	   322:         word $02b0
00:14CE 01              	   323:         byte 1,$58,$ba
00:14CF 58
00:14D0 BA
00:14D1 B102            	   324:         word $02b1
00:14D3 01              	   325:         byte 1,$60,$ba
00:14D4 60
00:14D5 BA
00:14D6 B302            	   326:         word $02b3
00:14D8 01              	   327:         byte 1,$70,$ba
00:14D9 70
00:14DA BA
00:14DB B402            	   328:         word $02b4
00:14DD 01              	   329:         byte 1,$78,$ba
00:14DE 78
00:14DF BA
00:14E0 B502            	   330:         word $02b5
00:14E2 01              	   331:         byte 1,$80,$ba
00:14E3 80
00:14E4 BA
00:14E5 B602            	   332:         word $02b6
00:14E7 01              	   333:         byte 1,$88,$ba
00:14E8 88
00:14E9 BA
00:14EA B702            	   334:         word $02b7
00:14EC 01              	   335:         byte 1,$90,$ba
00:14ED 90
00:14EE BA
00:14EF B802            	   336:         word $02b8
00:14F1 01              	   337:         byte 1,$98,$ba
00:14F2 98
00:14F3 BA
00:14F4 B902            	   338:         word $02b9
00:14F6 01              	   339:         byte 1,$a0,$ba
00:14F7 A0
00:14F8 BA
00:14F9 BA02            	   340:         word $02ba
00:14FB 01              	   341:         byte 1,$a8,$ba
00:14FC A8
00:14FD BA
00:14FE BB02            	   342:         word $02bb
00:1500 01              	   343:         byte 1,$b0,$ba
00:1501 B0
00:1502 BA
                        	   344:         ;; Row 18
00:1503 D102            	   345:         word $02d1
00:1505 01              	   346:         byte 1,$20,$c2
00:1506 20
00:1507 C2
00:1508 D502            	   347:         word $02d5
00:150A 01              	   348:         byte 1,$40,$c2
00:150B 40
00:150C C2
00:150D D902            	   349:         word $02d9
00:150F 01              	   350:         byte 1,$60,$c2
00:1510 60
00:1511 C2
00:1512 DB02            	   351:         word $02db
00:1514 01              	   352:         byte 1,$70,$c2
00:1515 70
00:1516 C2
00:1517 DF02            	   353:         word $02df
00:1519 01              	   354:         byte 1,$90,$c2
00:151A 90
00:151B C2
00:151C E302            	   355:         word $02e3
00:151E 01              	   356:         byte 1,$b0,$c2
00:151F B0
00:1520 C2
                        	   357:         ;; Row 19
00:1521 F902            	   358:         word $02f9
00:1523 01              	   359:         byte 1,$20,$ca          ;energizer
00:1524 20
00:1525 CA
00:1526 FA02            	   360:         word $02fa
00:1528 01              	   361:         byte 1,$28,$ca
00:1529 28
00:152A CA
00:152B FB02            	   362:         word $02fb
00:152D 01              	   363:         byte 1,$30,$ca
00:152E 30
00:152F CA
00:1530 FD02            	   364:         word $02fd
00:1532 01              	   365:         byte 1,$40,$ca
00:1533 40
00:1534 CA
00:1535 FE02            	   366:         word $02fe
00:1537 01              	   367:         byte 1,$48,$ca
00:1538 48
00:1539 CA
00:153A FF02            	   368:         word $02ff
00:153C 01              	   369:         byte 1,$50,$ca
00:153D 50
00:153E CA
00:153F 0003            	   370:         word $0300
00:1541 01              	   371:         byte 1,$58,$ca
00:1542 58
00:1543 CA
00:1544 0103            	   372:         word $0301
00:1546 01              	   373:         byte 1,$60,$ca
00:1547 60
00:1548 CA
00:1549 0303            	   374:         word $0303
00:154B 01              	   375:         byte 1,$70,$ca
00:154C 70
00:154D CA
00:154E 0403            	   376:         word $0304
00:1550 01              	   377:         byte 1,$78,$ca
00:1551 78
00:1552 CA
00:1553 0503            	   378:         word $0305
00:1555 01              	   379:         byte 1,$80,$ca
00:1556 80
00:1557 CA
00:1558 0603            	   380:         word $0306
00:155A 01              	   381:         byte 1,$88,$ca
00:155B 88
00:155C CA
00:155D 0703            	   382:         word $0307
00:155F 01              	   383:         byte 1,$90,$ca
00:1560 90
00:1561 CA
00:1562 0903            	   384:         word $0309
00:1564 01              	   385:         byte 1,$a0,$ca
00:1565 A0
00:1566 CA
00:1567 0A03            	   386:         word $030a
00:1569 01              	   387:         byte 1,$a8,$ca
00:156A A8
00:156B CA
00:156C 0B03            	   388:         word $030b
00:156E 01              	   389:         byte 1,$b0,$ca          ;energizer
00:156F B0
00:1570 CA
                        	   390:         ;; Row 20
00:1571 2303            	   391:         word $0323
00:1573 01              	   392:         byte 1,$30,$d2
00:1574 30
00:1575 D2
00:1576 2503            	   393:         word $0325
00:1578 01              	   394:         byte 1,$40,$d2
00:1579 40
00:157A D2
00:157B 2703            	   395:         word $0327
00:157D 01              	   396:         byte 1,$50,$d2
00:157E 50
00:157F D2
00:1580 2D03            	   397:         word $032d
00:1582 01              	   398:         byte 1,$80,$d2
00:1583 80
00:1584 D2
00:1585 2F03            	   399:         word $032f
00:1587 01              	   400:         byte 1,$90,$d2
00:1588 90
00:1589 D2
00:158A 3103            	   401:         word $0331
00:158C 01              	   402:         byte 1,$a0,$d2
00:158D A0
00:158E D2
                        	   403:         ;; Row 21
00:158F 4903            	   404:         word $0349
00:1591 01              	   405:         byte 1,$20,$da
00:1592 20
00:1593 DA
00:1594 4A03            	   406:         word $034a
00:1596 01              	   407:         byte 1,$28,$da
00:1597 28
00:1598 DA
00:1599 4B03            	   408:         word $034b
00:159B 01              	   409:         byte 1,$30,$da
00:159C 30
00:159D DA
00:159E 4C03            	   410:         word $034c
00:15A0 01              	   411:         byte 1,$38,$da
00:15A1 38
00:15A2 DA
00:15A3 4D03            	   412:         word $034d
00:15A5 01              	   413:         byte 1,$40,$da
00:15A6 40
00:15A7 DA
00:15A8 4F03            	   414:         word $034f
00:15AA 01              	   415:         byte 1,$50,$da
00:15AB 50
00:15AC DA
00:15AD 5003            	   416:         word $0350
00:15AF 01              	   417:         byte 1,$58,$da
00:15B0 58
00:15B1 DA
00:15B2 5103            	   418:         word $0351
00:15B4 01              	   419:         byte 1,$60,$da
00:15B5 60
00:15B6 DA
00:15B7 5303            	   420:         word $0353
00:15B9 01              	   421:         byte 1,$70,$da
00:15BA 70
00:15BB DA
00:15BC 5403            	   422:         word $0354
00:15BE 01              	   423:         byte 1,$78,$da
00:15BF 78
00:15C0 DA
00:15C1 5503            	   424:         word $0355
00:15C3 01              	   425:         byte 1,$80,$da
00:15C4 80
00:15C5 DA
00:15C6 5703            	   426:         word $0357
00:15C8 01              	   427:         byte 1,$90,$da
00:15C9 90
00:15CA DA
00:15CB 5803            	   428:         word $0358
00:15CD 01              	   429:         byte 1,$98,$da
00:15CE 98
00:15CF DA
00:15D0 5903            	   430:         word $0359
00:15D2 01              	   431:         byte 1,$a0,$da
00:15D3 A0
00:15D4 DA
00:15D5 5A03            	   432:         word $035a
00:15D7 01              	   433:         byte 1,$a8,$da
00:15D8 A8
00:15D9 DA
00:15DA 5B03            	   434:         word $035b
00:15DC 01              	   435:         byte 1,$b0,$da
00:15DD B0
00:15DE DA
                        	   436:         ;; Row 22
00:15DF 7103            	   437:         word $0371
00:15E1 01              	   438:         byte 1,$20,$e2
00:15E2 20
00:15E3 E2
00:15E4 7903            	   439:         word $0379
00:15E6 01              	   440:         byte 1,$60,$e2
00:15E7 60
00:15E8 E2
00:15E9 7B03            	   441:         word $037b
00:15EB 01              	   442:         byte 1,$70,$e2
00:15EC 70
00:15ED E2
00:15EE 8303            	   443:         word $0383
00:15F0 01              	   444:         byte 1,$b0,$e2
00:15F1 B0
00:15F2 E2
                        	   445:         ;; Row 23
00:15F3 9903            	   446:         word $0399
00:15F5 01              	   447:         byte 1,$20,$ea
00:15F6 20
00:15F7 EA
00:15F8 9A03            	   448:         word $039a
00:15FA 01              	   449:         byte 1,$28,$ea
00:15FB 28
00:15FC EA
00:15FD 9B03            	   450:         word $039b
00:15FF 01              	   451:         byte 1,$30,$ea
00:1600 30
00:1601 EA
00:1602 9C03            	   452:         word $039c
00:1604 01              	   453:         byte 1,$38,$ea
00:1605 38
00:1606 EA
00:1607 9D03            	   454:         word $039d
00:1609 01              	   455:         byte 1,$40,$ea
00:160A 40
00:160B EA
00:160C 9E03            	   456:         word $039e
00:160E 01              	   457:         byte 1,$48,$ea
00:160F 48
00:1610 EA
00:1611 9F03            	   458:         word $039f
00:1613 01              	   459:         byte 1,$50,$ea
00:1614 50
00:1615 EA
00:1616 A003            	   460:         word $03a0
00:1618 01              	   461:         byte 1,$58,$ea
00:1619 58
00:161A EA
00:161B A103            	   462:         word $03a1
00:161D 01              	   463:         byte 1,$60,$ea
00:161E 60
00:161F EA
00:1620 A203            	   464:         word $03a2
00:1622 01              	   465:         byte 1,$68,$ea
00:1623 68
00:1624 EA
00:1625 A303            	   466:         word $03a3
00:1627 01              	   467:         byte 1,$70,$ea
00:1628 70
00:1629 EA
00:162A A403            	   468:         word $03a4
00:162C 01              	   469:         byte 1,$78,$ea
00:162D 78
00:162E EA
00:162F A503            	   470:         word $03a5
00:1631 01              	   471:         byte 1,$80,$ea
00:1632 80
00:1633 EA
00:1634 A603            	   472:         word $03a6
00:1636 01              	   473:         byte 1,$88,$ea
00:1637 88
00:1638 EA
00:1639 A703            	   474:         word $03a7
00:163B 01              	   475:         byte 1,$90,$ea
00:163C 90
00:163D EA
00:163E A803            	   476:         word $03a8
00:1640 01              	   477:         byte 1,$98,$ea
00:1641 98
00:1642 EA
00:1643 A903            	   478:         word $03a9
00:1645 01              	   479:         byte 1,$a0,$ea
00:1646 A0
00:1647 EA
00:1648 AA03            	   480:         word $03aa
00:164A 01              	   481:         byte 1,$a8,$ea
00:164B A8
00:164C EA
00:164D AB03            	   482:         word $03ab
00:164F 01              	   483:         byte 1,$b0,$ea
00:1650 B0
00:1651 EA
                        	   484:         ;; End marker
00:1652 FFFF            	   485:         word $ffff
00:1654 FF              	   486:         byte $ff,$ff,$ff
00:1655 FF
00:1656 FF
                        	   487:         
                        	   488:         ;; Energizer list
                        	   489:         ;; Index into pelltbl
                        	   490: enzrlst:
00:1657 12              	   491:         byte $12
00:1658 17              	   492:         byte $17
00:1659 79              	   493:         byte $79
00:165A 88              	   494:         byte $88
                        	   495: 
                        	   496:         ;; Pac-Man animation frames
                        	   497:         ;; Format:
                        	   498:         ;;  - byte sprite offset values
                        	   499: pacalstn:                       ;north-facing animation frames
00:165B 00              	   500:         byte $00,$07,$08,$09,$08,$07
00:165C 07
00:165D 08
00:165E 09
00:165F 08
00:1660 07
                        	   501: pacalsts:                       ;south-facing animation frames
00:1661 00              	   502:         byte $00,$0a,$0b,$0c,$0b,$0a
00:1662 0A
00:1663 0B
00:1664 0C
00:1665 0B
00:1666 0A
                        	   503: pacalstw:                       ;west-facing animation frames
00:1667 00              	   504:         byte $00,$01,$02,$03,$02,$01
00:1668 01
00:1669 02
00:166A 03
00:166B 02
00:166C 01
                        	   505: pacalste:                       ;east-facing animation frames
00:166D 00              	   506:         byte $00,$04,$05,$06,$05,$04
00:166E 04
00:166F 05
00:1670 06
00:1671 05
00:1672 04
                        	   507: 
                        	   508:         ;; Index in pelltbl of leftmost+rightmost pellet in row by sprite y loc
                        	   509:         ;; Format:
                        	   510:         ;;  - byte y (sprite y loc of row)
                        	   511:         ;;  - byte ixl (pelltbl index of leftmost pellet in row)
                        	   512:         ;;  - byte ixr (pelltbl index of rightmost pellet in row)
                        	   513: plrowix:
00:1673 3A              	   514:         byte $3a,$00,$11        ;row 1
00:1674 00
00:1675 11
00:1676 42              	   515:         byte $42,$12,$17        ;row 2
00:1677 12
00:1678 17
00:1679 4A              	   516:         byte $4a,$18,$1d        ;row 3
00:167A 18
00:167B 1D
00:167C 52              	   517:         byte $52,$1e,$30        ;row 4
00:167D 1E
00:167E 30
00:167F 5A              	   518:         byte $5a,$31,$36        ;row 5
00:1680 31
00:1681 36
00:1682 62              	   519:         byte $62,$37,$3c        ;row 6
00:1683 37
00:1684 3C
00:1685 6A              	   520:         byte $6a,$3d,$4c        ;row 7
00:1686 3D
00:1687 4C
00:1688 72              	   521:         byte $72,$4d,$50        ;row 8
00:1689 4D
00:168A 50
00:168B 7A              	   522:         byte $7a,$51,$52        ;row 9
00:168C 51
00:168D 52
00:168E 82              	   523:         byte $82,$53,$54        ;row 10
00:168F 53
00:1690 54
00:1691 8A              	   524:         byte $8a,$55,$56        ;row 11
00:1692 55
00:1693 56
00:1694 92              	   525:         byte $92,$57,$58        ;row 12
00:1695 57
00:1696 58
00:1697 9A              	   526:         byte $9a,$59,$5a        ;row 13
00:1698 59
00:1699 5A
00:169A A2              	   527:         byte $a2,$5b,$5c        ;row 14
00:169B 5B
00:169C 5C
00:169D AA              	   528:         byte $aa,$5d,$5e        ;row 15
00:169E 5D
00:169F 5E
00:16A0 B2              	   529:         byte $b2,$5f,$60        ;row 16
00:16A1 5F
00:16A2 60
00:16A3 BA              	   530:         byte $ba,$61,$72        ;row 17
00:16A4 61
00:16A5 72
00:16A6 C2              	   531:         byte $c2,$73,$78        ;row 18
00:16A7 73
00:16A8 78
00:16A9 CA              	   532:         byte $ca,$79,$88        ;row 19
00:16AA 79
00:16AB 88
00:16AC D2              	   533:         byte $d2,$89,$8e        ;row 20
00:16AD 89
00:16AE 8E
00:16AF DA              	   534:         byte $da,$8f,$9e        ;row 21
00:16B0 8F
00:16B1 9E
00:16B2 E2              	   535:         byte $e2,$9f,$a2        ;row 22
00:16B3 9F
00:16B4 A2
00:16B5 EA              	   536:         byte $ea,$a3,$b5        ;row 23
00:16B6 A3
00:16B7 B5
                        	   537: 
                        	   538:         ;; Fruit sprite table
                        	   539:         ;; Format:
                        	   540:         ;;  - byte lvl (level number)
                        	   541:         ;;  - byte spx (sprite index)
                        	   542:         ;;  - word ofs (sp0mem offset)
                        	   543:         ;;  - word pts (bonus points)
                        	   544: frtsptbl:
                        	   545:         ;; 1st level: Cherries
00:16B8 00              	   546:         byte $00,$0d
00:16B9 0D
00:16BA 4003            	   547:         word $0d*$40,$0064
00:16BC 6400
                        	   548:         ;; 2nd level: Strawberry
00:16BE 01              	   549:         byte $01,$0f
00:16BF 0F
00:16C0 C003            	   550:         word $0f*$40,$012c
00:16C2 2C01
                        	   551:         ;; 3rd & 4th level: Peach
00:16C4 02              	   552:         byte $02,$11
00:16C5 11
00:16C6 4004            	   553:         word $11*$40,$01f4
00:16C8 F401
00:16CA 03              	   554:         byte $03,$13
00:16CB 13
00:16CC C004            	   555:         word $13*$40,$01f4
00:16CE F401
                        	   556:         ;; 5th & 6th level: Apple
00:16D0 04              	   557:         byte $04,$15
00:16D1 15
00:16D2 4005            	   558:         word $15*$40,$02bc
00:16D4 BC02
00:16D6 05              	   559:         byte $05,$17
00:16D7 17
00:16D8 C005            	   560:         word $17*$40,$02bc
00:16DA BC02
                        	   561:         ;; 7th & 8th level: Grapes
00:16DC 06              	   562:         byte $06,$19
00:16DD 19
00:16DE 4006            	   563:         word $19*$40,$03e8
00:16E0 E803
00:16E2 07              	   564:         byte $07,$1b
00:16E3 1B
00:16E4 C006            	   565:         word $1b*$40,$03e8
00:16E6 E803
                        	   566:         ;; 9th & 10th levels: Galaxian
00:16E8 08              	   567:         byte $08,$1d
00:16E9 1D
00:16EA 4007            	   568:         word $1d*$40,$07d0
00:16EC D007
00:16EE 09              	   569:         byte $09,$1f
00:16EF 1F
00:16F0 C007            	   570:         word $1f*$40,$07d0
00:16F2 D007
                        	   571:         ;; 11th & 12th level: Bell
00:16F4 0A              	   572:         byte $0a,$21
00:16F5 21
00:16F6 4008            	   573:         word $21*$40,$0bb8
00:16F8 B80B
00:16FA 0B              	   574:         byte $0b,$23
00:16FB 23
00:16FC C008            	   575:         word $23*$40,$0bb8
00:16FE B80B
                        	   576:         ;; level 13 onwards: Key
00:1700 0C              	   577:         byte $0c,$25
00:1701 25
00:1702 4009            	   578:         word $25*$40,$1388
00:1704 8813
                        	   579:         ;; End Marker
00:1706 FF              	   580:         byte $ff
                        	   581: 

Source: "./src/startup.asm"
                        	    38:         
                        	    39:         ;; Include assets
                        	    40:         *=charset
01:4000 3C666E6E60623C00	    41:         incbin assets/charset,2
01:4008 183C667E66666600
01:4010 7C66667C66667C00
01:4018 3C66606060663C00
01:4020 786C6666666C7800
01:4028 7E60607860607E00
01:4030 7E60607860606000
01:4038 3C66606E66663C00
01:4040 6666667E66666600
01:4048 3C18181818183C00
01:4050 1E0C0C0C0C6C3800
01:4058 666C7870786C6600
01:4060 6060606060607E00
01:4068 63777F6B63636300
01:4070 66767E7E6E666600
01:4078 3C66666666663C00
01:4080 7C66667C60606000
01:4088 3C666666663C0E00
01:4090 7C66667C786C6600
01:4098 3C66603C06663C00
01:40A0 7E18181818181800
01:40A8 6666666666663C00
01:40B0 66666666663C1800
01:40B8 6363636B7F776300
01:40C0 66663C183C666600
01:40C8 6666663C18181800
01:40D0 7E060C1830607E00
01:40D8 3C30303030303C00
01:40E0 0C12307C3062FC00
01:40E8 3C0C0C0C0C0C3C00
01:40F0 00183C7E18181818
01:40F8 0010307F7F301000
01:4100 0000000000000000
01:4108 1818181800001800
01:4110 6666660000000000
01:4118 6666FF66FF666600
01:4120 183E603C067C1800
01:4128 62660C1830664600
01:4130 3C663C3867663F00
01:4138 060C180000000000
01:4140 0C18303030180C00
01:4148 30180C0C0C183000
01:4150 00663CFF3C660000
01:4158 0018187E18180000
01:4160 0000000000181830
01:4168 0000007E00000000
01:4170 0000000000181800
01:4178 0003060C18306000
01:4180 3C666E7666663C00
01:4188 1818381818187E00
01:4190 3C66060C30607E00
01:4198 3C66061C06663C00
01:41A0 060E1E667F060600
01:41A8 7E607C0606663C00
01:41B0 3C66607C66663C00
01:41B8 7E660C1818181800
01:41C0 3C66663C66663C00
01:41C8 3C66663E06663C00
01:41D0 0000180000180000
01:41D8 0000180000181830
01:41E0 0E18306030180E00
01:41E8 00007E007E000000
01:41F0 70180C060C187000
01:41F8 3C66060C18001800
01:4200 00000F1020232424
01:4208 24242320100F0000
01:4210 0000F00804C42424
01:4218 2424C40408F00000
01:4220 0000FF0000FF0000
01:4228 2424242424242424
01:4230 2424242424180000
01:4238 0000182424242424
01:4240 0000F80404F80000
01:4248 00001F20201F0000
01:4250 0000FF0000C32424
01:4258 2424C30000FF0000
01:4260 2424232020232424
01:4268 2424C40404C42424
01:4270 00003F2020272424
01:4278 24242720203F0000
01:4280 0000FC0404E42424
01:4288 2424E40404FC0000
01:4290 000000FFFF000000
01:4298 0000001000000000
01:42A0 0000387C7C380000
01:42A8 0000000000000000
01:42B0 0000000000000000
01:42B8 0000000000000000
01:42C0 0000000000000000
01:42C8 0000000000000000
01:42D0 0000000000000000
01:42D8 0000000000000000
01:42E0 0000000000000000
01:42E8 0000000000000000
01:42F0 0000000000000000
01:42F8 0000000000000000
01:4300 0000000000000000
01:4308 0000000000000000
01:4310 0000000000000000
01:4318 0000000000000000
01:4320 0000000000000000
01:4328 0000000000000000
01:4330 0000000000000000
01:4338 0000000000000000
01:4340 0000000000000000
01:4348 0000000000000000
01:4350 0000000000000000
01:4358 0000000000000000
01:4360 0000000000000000
01:4368 0000000000000000
01:4370 0000000000000000
01:4378 0000000000000000
01:4380 0000000000000000
01:4388 0000000000000000
01:4390 0000000000000000
01:4398 0000000000000000
01:43A0 0000000000000000
01:43A8 0000000000000000
01:43B0 0000000000000000
01:43B8 0000000000000000
01:43C0 0000000000000000
01:43C8 0000000000000000
01:43D0 0000000000000000
01:43D8 0000000000000000
01:43E0 0000000000000000
01:43E8 0000000000000000
01:43F0 0000000000000000
01:43F8 0000000000000000
01:4400 0000000000000000
01:4408 0000000000000000
01:4410 0000000000000000
01:4418 0000000000000000
01:4420 0000000000000000
01:4428 0000000000000000
01:4430 0000000000000000
01:4438 0000000000000000
01:4440 0000000000000000
01:4448 0000000000000000
01:4450 0000000000000000
01:4458 0000000000000000
01:4460 0000000000000000
01:4468 0000000000000000
01:4470 0000000000000000
01:4478 0000000000000000
01:4480 0000000000000000
01:4488 0000000000000000
01:4490 0000000000000000
01:4498 0000000000000000
01:44A0 0000000000000000
01:44A8 0000000000000000
01:44B0 0000000000000000
01:44B8 0000000000000000
01:44C0 0000000000000000
01:44C8 0000000000000000
01:44D0 0000000000000000
01:44D8 0000000000000000
01:44E0 0000000000000000
01:44E8 0000000000000000
01:44F0 0000000000000000
01:44F8 0000000000000000
01:4500 0000000000000000
01:4508 0000000000000000
01:4510 0000000000000000
01:4518 0000000000000000
01:4520 0000000000000000
01:4528 0000000000000000
01:4530 0000000000000000
01:4538 0000000000000000
01:4540 0000000000000000
01:4548 0000000000000000
01:4550 0000000000000000
01:4558 0000000000000000
01:4560 0000000000000000
01:4568 0000000000000000
01:4570 0000000000000000
01:4578 0000000000000000
01:4580 0000000000000000
01:4588 0000000000000000
01:4590 0000000000000000
01:4598 0000000000000000
01:45A0 0000000000000000
01:45A8 0000000000000000
01:45B0 0000000000000000
01:45B8 0000000000000000
01:45C0 0000000000000000
01:45C8 0000000000000000
01:45D0 0000000000000000
01:45D8 0000000000000000
01:45E0 0000000000000000
01:45E8 0000000000000000
01:45F0 0000000000000000
01:45F8 0000000000000000
01:4600 0000000000000000
01:4608 0000000000000000
01:4610 0000000000000000
01:4618 0000000000000000
01:4620 0000000000000000
01:4628 0000000000000000
01:4630 0000000000000000
01:4638 0000000000000000
01:4640 0000000000000000
01:4648 0000000000000000
01:4650 0000000000000000
01:4658 0000000000000000
01:4660 0000000000000000
01:4668 0000000000000000
01:4670 0000000000000000
01:4678 0000000000000000
01:4680 0000000000000000
01:4688 0000000000000000
01:4690 0000000000000000
01:4698 0000000000000000
01:46A0 0000000000000000
01:46A8 0000000000000000
01:46B0 0000000000000000
01:46B8 0000000000000000
01:46C0 0000000000000000
01:46C8 0000000000000000
01:46D0 0000000000000000
01:46D8 0000000000000000
01:46E0 0000000000000000
01:46E8 0000000000000000
01:46F0 0000000000000000
01:46F8 0000000000000000
01:4700 0000000000000000
01:4708 0000000000000000
01:4710 0000000000000000
01:4718 0000000000000000
01:4720 0000000000000000
01:4728 0000000000000000
01:4730 0000000000000000
01:4738 0000000000000000
01:4740 0000000000000000
01:4748 0000000000000000
01:4750 0000000000000000
01:4758 0000000000000000
01:4760 0000000000000000
01:4768 0000000000000000
01:4770 0000000000000000
01:4778 0000000000000000
01:4780 0000000000000000
01:4788 0000000000000000
01:4790 0000000000000000
01:4798 0000000000000000
01:47A0 0000000000000000
01:47A8 0000000000000000
01:47B0 0000000000000000
01:47B8 0000000000000000
01:47C0 0000000000000000
01:47C8 0000000000000000
01:47D0 0000000000000000
01:47D8 0000000000000000
01:47E0 0000000000000000
01:47E8 5555555555555555
01:47F0 AAAAAAAAAAAAAAAA
01:47F8 FFFFFFFFFFFFFFFF
01:4800 0101010101010101
01:4808 0101010101010101
01:4810 0101010101010101
01:4818 0101010101010101
01:4820 0101010101010101
01:4828 0101010101010101
01:4830 0101010101010101
01:4838 0101010101010101
01:4840 0606060606060606
01:4848 0606060606060606
01:4850 06060F0F0F010101
01:4858 0101010101010101
01:4860 0101010101010101
01:4868 0101010101010101
01:4870 0101010101010101
01:4878 0101010101010101
01:4880 0101010101010101
01:4888 0101010101010101
01:4890 0101010101010101
01:4898 0101010101010101
01:48A0 0101010101010101
01:48A8 0101010101010101
01:48B0 0101010101010101
01:48B8 0101010101010101
01:48C0 0101010101010101
01:48C8 0101010101010101
01:48D0 0101010101010101
01:48D8 0101010101010101
01:48E0 0101010101010101
01:48E8 0101010101010101
01:48F0 0101010101010101
01:48F8 0101010101010101
                        	    42: 
                        	    43:         *=mazegfx
02:4BF0 E803E84327001800	    44:         incbin assets/mazegfx,2
02:4BF8 000F0B0628001900
02:4C00 4044444444444444
02:4C08 44444A4444444444
02:4C10 4444444442202020
02:4C18 2020202020202020
02:4C20 2020202020202020
02:4C28 4553535353535353
02:4C30 5353455353535353
02:4C38 5353535345202020
02:4C40 2020200809070820
02:4C48 13030F1205202020
02:4C50 4554404442534044
02:4C58 4253455340444253
02:4C60 4044425445202020
02:4C68 2020202020202020
02:4C70 2020202020202020
02:4C78 4553414443534144
02:4C80 4353465341444353
02:4C88 4144435345202020
02:4C90 2020202020202020
02:4C98 2020202030202020
02:4CA0 4553535353535353
02:4CA8 5353535353535353
02:4CB0 5353535345202020
02:4CB8 2020202020202020
02:4CC0 2020202020202020
02:4CC8 4553404442534753
02:4CD0 4044444442534753
02:4CD8 4044425345202020
02:4CE0 2020202020202020
02:4CE8 2020202020202020
02:4CF0 4553414443534553
02:4CF8 41444A4443534553
02:4D00 4144435345202020
02:4D08 2020202020202020
02:4D10 2020202020202020
02:4D18 4553535353534553
02:4D20 5353455353534553
02:4D28 5353535345202020
02:4D30 2020202020202020
02:4D38 2020311510202020
02:4D40 4144444442534C44
02:4D48 4853465349444D53
02:4D50 4044444443202020
02:4D58 2020202020202020
02:4D60 2020202020202020
02:4D68 2020202045534520
02:4D70 2020202020204553
02:4D78 4520202020202020
02:4D80 2020202020202020
02:4D88 2020202030202020
02:4D90 2020202045534520
02:4D98 4E52525250204553
02:4DA0 4520202020202020
02:4DA8 2020202020202020
02:4DB0 2020202020202020
02:4DB8 4444444443534620
02:4DC0 4520202045204653
02:4DC8 4144444444202020
02:4DD0 2020202020202020
02:4DD8 2020202020202020
02:4DE0 2020202020532020
02:4DE8 4520202045202053
02:4DF0 2020202020202020
02:4DF8 2020202020202020
02:4E00 2020202020202020
02:4E08 4444444442534720
02:4E10 4F44444451204753
02:4E18 4044444444202020
02:4E20 2020202020202020
02:4E28 2020202020202020
02:4E30 2020202045534520
02:4E38 2020202020204553
02:4E40 4520202020202020
02:4E48 2020202020202020
02:4E50 2020202020202020
02:4E58 2020202045534520
02:4E60 4044444442204553
02:4E68 4520202020202020
02:4E70 2020202020202020
02:4E78 2020202020202020
02:4E80 4044444443534620
02:4E88 41444A4443204653
02:4E90 4144444442202020
02:4E98 2020202020202020
02:4EA0 2020202020202020
02:4EA8 4553535353535353
02:4EB0 5353455353535353
02:4EB8 5353535345202020
02:4EC0 2020202020202020
02:4EC8 2020202020202020
02:4ED0 4553494442534944
02:4ED8 4853465349444853
02:4EE0 4044485345202020
02:4EE8 2020202020202020
02:4EF0 2020202020202020
02:4EF8 4554535345535353
02:4F00 5353205353535353
02:4F08 4553535445202020
02:4F10 2020202020202020
02:4F18 2020202020202020
02:4F20 4C44485346534753
02:4F28 49444A4448534753
02:4F30 465349444D202020
02:4F38 2020202020202020
02:4F40 2020202020202020
02:4F48 4553535353534553
02:4F50 5353455353534553
02:4F58 5353535345202020
02:4F60 2020202020202020
02:4F68 2020202020202020
02:4F70 4553494444444B44
02:4F78 4853465349444B44
02:4F80 4444485345202020
02:4F88 2020202020202020
02:4F90 2020202020202020
02:4F98 4553535353535353
02:4FA0 5353535353535353
02:4FA8 5353535345202020
02:4FB0 2020202020202020
02:4FB8 2020202020202020
02:4FC0 4144444444444444
02:4FC8 4444444444444444
02:4FD0 4444444443202020
02:4FD8 2020202020202020
02:4FE0 2020202020202020
                        	    45: 
                        	    46:         *=sp0mem
03:5000 3E00007F0000FF80	    47:         incbin assets/sprites,2
03:5008 00FF8000FF8000FF
03:5010 8000FF80007F0000
03:5018 3E00000000000000
03:5020 0000000000000000
03:5028 0000000000000000
03:5030 0000000000000000
03:5038 0000000000000087
03:5040 3E00007F0000FF80
03:5048 003F80000780003F
03:5050 8000FF80007F0000
03:5058 3E00000000000000
03:5060 0000000000000000
03:5068 0000000000000000
03:5070 0000000000000000
03:5078 0000000000000087
03:5080 7E0000FF00003F80
03:5088 000F80000780000F
03:5090 80003F8000FF0000
03:5098 7E00000000000000
03:50A0 0000000000000000
03:50A8 0000000000000000
03:50B0 0000000000000000
03:50B8 0000000000000087
03:50C0 FC00003F00000F80
03:50C8 0007800003800007
03:50D0 80000F80003F0000
03:50D8 FC00000000000000
03:50E0 0000000000000000
03:50E8 0000000000000000
03:50F0 0000000000000000
03:50F8 0000000000000087
03:5100 3E00007F0000FF80
03:5108 00FE0000F00000FE
03:5110 0000FF80007F0000
03:5118 3E00000000000000
03:5120 0000000000000000
03:5128 0000000000000000
03:5130 0000000000000000
03:5138 0000000000000087
03:5140 3F00007F8000FE00
03:5148 00F80000F00000F8
03:5150 0000FE00007F8000
03:5158 3F00000000000000
03:5160 0000000000000000
03:5168 0000000000000000
03:5170 0000000000000000
03:5178 0000000000000087
03:5180 1F80007E0000F800
03:5188 00F00000E00000F0
03:5190 0000F800007E0000
03:5198 1F80000000000000
03:51A0 0000000000000000
03:51A8 0000000000000000
03:51B0 0000000000000000
03:51B8 0000000000000087
03:51C0 220000630000F780
03:51C8 00F78000F78000FF
03:51D0 8000FF80007F0000
03:51D8 3E00000000000000
03:51E0 0000000000000000
03:51E8 0000000000000000
03:51F0 0000000000000000
03:51F8 0000000000000087
03:5200 410000C18000E380
03:5208 00E38000F78000FF
03:5210 8000FF80007F0000
03:5218 3E00000000000000
03:5220 0000000000000000
03:5228 0000000000000000
03:5230 0000000000000000
03:5238 0000000000000087
03:5240 808000808000C180
03:5248 00C18000E38000F7
03:5250 80007F00007F0000
03:5258 3E00000000000000
03:5260 0000000000000000
03:5268 0000000000000000
03:5270 0000000000000000
03:5278 0000000000000087
03:5280 3E00007F0000FF80
03:5288 00FF8000F78000F7
03:5290 8000F78000630000
03:5298 2200000000000000
03:52A0 0000000000000000
03:52A8 0000000000000000
03:52B0 0000000000000000
03:52B8 0000000000000087
03:52C0 3E00007F0000FF80
03:52C8 00FF8000F78000E3
03:52D0 8000E38000C18000
03:52D8 4100000000000000
03:52E0 0000000000000000
03:52E8 0000000000000000
03:52F0 0000000000000000
03:52F8 0000000000000087
03:5300 3E00007F00007F00
03:5308 00F78000E38000C1
03:5310 8000C18000808000
03:5318 8080000000000000
03:5320 0000000000000000
03:5328 0000000000000000
03:5330 0000000000000000
03:5338 0000000000000087
03:5340 0000000000004000
03:5348 00F00000E50000EF
03:5350 80006F80000F8000
03:5358 0700000000000000
03:5360 0000000000000000
03:5368 0000000000000000
03:5370 0000000000000000
03:5378 0000000000000082
03:5380 0700001900002200
03:5388 0002000002000000
03:5390 0000000000000000
03:5398 0000000000000000
03:53A0 0000000000000000
03:53A8 0000000000000000
03:53B0 0000000000000000
03:53B8 0000000000000089
03:53C0 0000000000006600
03:53C8 00FF0000DB0000FF
03:53D0 00007600003C0000
03:53D8 1800000000000000
03:53E0 0000000000000000
03:53E8 0000000000000000
03:53F0 0000000000000000
03:53F8 0000000000000082
03:5400 1000003C00001800
03:5408 0000000024000000
03:5410 0000080000000000
03:5418 0000000000000000
03:5420 0000000000000000
03:5428 0000000000000000
03:5430 0000000000000000
03:5438 0000000000000085
                        	    48: 


Symbols by name:
addscr                           A:1052
bgcol0                           E:D021
blki                             E:0000
buf                              E:0016
c2ddra                           E:DD02
calcnd                           A:0BFB
charset                          E:4000
chkcon                           A:0D5A
chkirq                           A:0C94
chkmov                           A:0FC5
chkne                            A:0B7E
chknn                            A:0B9C
chkpde                           A:0D0B
chkpdn                           A:0D15
chkrve                           A:0FE8
chkrvn                           A:0FF8
chkrvw                           A:0FD6
chky                             A:0FAF
chx2spx                          A:0C59
chy2spy                          A:0C61
ci1icr                           E:DC0D
ci1pra                           E:DC00
ci2cra                           E:DD0E
ci2crb                           E:DD0F
ci2icr                           E:DD0D
ci2pra                           E:DD00
cia1                             E:DC00
cia2                             E:DD00
cinv                             E:0314
colmem                           E:D800
coltab                           E:4800
decrem                           A:0D22
dissprt                          A:0C43
djr0                             A:09AE
djr1                             A:09B2
djr2                             A:09B6
djr3                             A:09BA
dkgrey                           E:000B
e                                E:0005
enzraix                          E:00FC
enzrchr                          E:0054
enzrlst                          A:1657
enzrpts                          E:0050
extcol                           E:D020
fillcolmem                       A:095D
fillmaze                         A:09D9
filloop                          A:09DD
fincol                           A:0CE7
findpel                          A:0A16
finfil                           A:0A15
finnmi                           A:0F58
finras                           A:0D67
fiprsc                           A:0909
flshfin                          A:0F56
flshmaz                          A:0E9E
flshwht                          A:0F02
fpckde                           A:0A4F
fpckdn                           A:0A89
fpds                             A:0AC1
fpinrow                          A:0B1F
fprixn                           A:0B0D
fprixs                           A:0AFB
frtena                           E:00FD
frtsptbl                         A:16B8
frttim                           E:0026
frxpos                           E:0067
frypos                           E:00A2
gameloop                         A:0F86
gsthmnd                          E:001E
hidefrt                          A:1119
initsprt                         A:0C0A
initvic                          A:0930
irqblki                          E:0005
irqmsk                           E:D01A
irqtmp                           E:001F
irqwrd1                          E:001B
irqwrd2                          E:001D
isenzr                           A:0B3B
joybtn                           E:0092
joyx                             E:0096
joyy                             E:009B
ldanim                           A:0E16
lpprsc                           A:0897
ltgrey                           E:000F
lvlfrtspix                       A:1070
lvlfrtspof                       A:108B
lvlnum                           E:00A9
maxmen                           E:0003
maxpell                          E:00B6
mazegfx                          E:4BF0
move                             A:0FA8
movs                             A:0FC1
mula5                            A:0822
mula6                            A:084B
n                                E:0002
newgame                          A:0F5E
nextlvl                          A:0F72
nmenrem                          E:00A8
nmiblki                          E:000A
nminv                            E:0318
nmiwrd1                          E:0020
nmiwrd2                          E:0022
nodeadr                          A:0B4B
nodetbl                          A:1126
npelrem                          E:00A7
nxl                              A:080B
pacaix                           E:00FB
pacalste                         A:166D
pacalstn                         A:165B
pacalsts                         A:1661
pacalstw                         A:1667
pacdir                           E:00A3
pacdis                           E:00A5
pacnxd                           E:00A4
pacrem                           E:00A6
pacsrc                           E:009E
pacstnd                          E:0031
pactar                           E:009F
pdsouth                          A:0D1F
pelfound                         A:0AEB
pelladr                          A:09C6
pellchr                          E:0053
pellpts                          E:0010
pelltbl                          A:12C4
pelnotfd                         A:0AF2
plrowix                          A:1673
printchr                         A:091D
printcol                         A:090A
printscr                         A:0881
procirq                          A:0C8A
procnmi                          A:0DAC
rasirq                           A:0CF4
raslin                           E:00FA
raster                           E:D012
rdinpt                           A:0F96
readjoy2                         A:09A2
reverse                          A:1011
revs                             A:1008
rmpel                            A:0CC1
rstscr                           A:102B
s                                E:0003
scnmem                           E:4C00
score                            E:00F7
screnzr                          A:1045
scrmsdi                          E:0185
scroly                           E:D011
scrpell                          A:1038
setblu1                          A:0EAD
setblu2                          A:0EC2
setblu3                          A:0ED7
setblu4                          A:0EEC
setcol1                          A:095F
setcol2                          A:0970
setcol3                          A:0981
setcol4                          A:0992
setnds                           A:0BCF
setnodis                         A:0B5E
setnsrc                          A:0D2B
setupirq                         A:0C69
setupnmi                         A:0D71
setwht1                          A:0F04
setwht2                          A:0F19
setwht3                          A:0F2E
setwht4                          A:0F43
showfrt                          A:10AC
sp0col                           E:D027
sp0loc                           E:0040
sp0mem                           E:5000
sp0ptr                           E:4FF8
sp0x                             E:D000
sp0y                             E:D001
sp1x                             E:D002
sp1y                             E:D003
sp2x                             E:D004
sp2y                             E:D005
spbgcl                           E:D01F
spcechr                          E:0020
spena                            E:D015
spx2chx                          A:0C49
spxscog                          E:0018
spy2chy                          A:0C51
spyscog                          E:0032
sysirq                           E:EA7E
sysnmi                           E:FE56
ti2a                             E:DD04
ti2b                             E:DD06
tic                              A:0E73
ticloop                          A:0E77
timaev                           A:0DC4
timbev                           A:0E21
tmp                              E:001A
tocloop                          A:0E40
vic                              E:D000
vicirq                           E:D019
vmcsb                            E:D018
w                                E:0004
warp                             A:0C03
wrd1                             E:0016
wrd2                             E:0018
wrpnixe                          E:0021
wrpnixw                          E:001B

Symbols by value:
0000 blki
0002 n
0003 maxmen
0003 s
0004 w
0005 e
0005 irqblki
000A nmiblki
000B dkgrey
000F ltgrey
0010 pellpts
0016 buf
0016 wrd1
0018 spxscog
0018 wrd2
001A tmp
001B irqwrd1
001B wrpnixw
001D irqwrd2
001E gsthmnd
001F irqtmp
0020 nmiwrd1
0020 spcechr
0021 wrpnixe
0022 nmiwrd2
0026 frttim
0031 pacstnd
0032 spyscog
0040 sp0loc
0050 enzrpts
0053 pellchr
0054 enzrchr
0067 frxpos
0092 joybtn
0096 joyx
009B joyy
009E pacsrc
009F pactar
00A2 frypos
00A3 pacdir
00A4 pacnxd
00A5 pacdis
00A6 pacrem
00A7 npelrem
00A8 nmenrem
00A9 lvlnum
00B6 maxpell
00F7 score
00FA raslin
00FB pacaix
00FC enzraix
00FD frtena
0185 scrmsdi
0314 cinv
0318 nminv
080B nxl
0822 mula5
084B mula6
0881 printscr
0897 lpprsc
0909 fiprsc
090A printcol
091D printchr
0930 initvic
095D fillcolmem
095F setcol1
0970 setcol2
0981 setcol3
0992 setcol4
09A2 readjoy2
09AE djr0
09B2 djr1
09B6 djr2
09BA djr3
09C6 pelladr
09D9 fillmaze
09DD filloop
0A15 finfil
0A16 findpel
0A4F fpckde
0A89 fpckdn
0AC1 fpds
0AEB pelfound
0AF2 pelnotfd
0AFB fprixs
0B0D fprixn
0B1F fpinrow
0B3B isenzr
0B4B nodeadr
0B5E setnodis
0B7E chkne
0B9C chknn
0BCF setnds
0BFB calcnd
0C03 warp
0C0A initsprt
0C43 dissprt
0C49 spx2chx
0C51 spy2chy
0C59 chx2spx
0C61 chy2spy
0C69 setupirq
0C8A procirq
0C94 chkirq
0CC1 rmpel
0CE7 fincol
0CF4 rasirq
0D0B chkpde
0D15 chkpdn
0D1F pdsouth
0D22 decrem
0D2B setnsrc
0D5A chkcon
0D67 finras
0D71 setupnmi
0DAC procnmi
0DC4 timaev
0E16 ldanim
0E21 timbev
0E40 tocloop
0E73 tic
0E77 ticloop
0E9E flshmaz
0EAD setblu1
0EC2 setblu2
0ED7 setblu3
0EEC setblu4
0F02 flshwht
0F04 setwht1
0F19 setwht2
0F2E setwht3
0F43 setwht4
0F56 flshfin
0F58 finnmi
0F5E newgame
0F72 nextlvl
0F86 gameloop
0F96 rdinpt
0FA8 move
0FAF chky
0FC1 movs
0FC5 chkmov
0FD6 chkrvw
0FE8 chkrve
0FF8 chkrvn
1008 revs
1011 reverse
102B rstscr
1038 scrpell
1045 screnzr
1052 addscr
1070 lvlfrtspix
108B lvlfrtspof
10AC showfrt
1119 hidefrt
1126 nodetbl
12C4 pelltbl
1657 enzrlst
165B pacalstn
1661 pacalsts
1667 pacalstw
166D pacalste
1673 plrowix
16B8 frtsptbl
4000 charset
4800 coltab
4BF0 mazegfx
4C00 scnmem
4FF8 sp0ptr
5000 sp0mem
D000 sp0x
D000 vic
D001 sp0y
D002 sp1x
D003 sp1y
D004 sp2x
D005 sp2y
D011 scroly
D012 raster
D015 spena
D018 vmcsb
D019 vicirq
D01A irqmsk
D01F spbgcl
D020 extcol
D021 bgcol0
D027 sp0col
D800 colmem
DC00 ci1pra
DC00 cia1
DC0D ci1icr
DD00 ci2pra
DD00 cia2
DD02 c2ddra
DD04 ti2a
DD06 ti2b
DD0D ci2icr
DD0E ci2cra
DD0F ci2crb
EA7E sysirq
FE56 sysnmi
