Sections:
00: "org0001:801" (801-174A)
01: "org0002:4000" (4000-4900)
02: "org0003:4bf0" (4BF0-4FE8)
03: "org0004:5000" (5000-54C0)


Source: "./src/startup.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Program startup
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         org $0801
                        	     6: 
                        	     7:         ;; BASIC header
00:0801 0B08            	     8:         word nxl,10
00:0803 0A00
00:0805 9E              	     9:         byte $9e
00:0806 32303631        	    10:         string "2061"
00:080A 00
00:080B 0000            	    11: nxl:    word 0
                        	    12: 
                        	    13:         ;; Program initialization
00:080D 202A09          	    14:         jsr initvic
00:0810 205709          	    15:         jsr fillcolmem
00:0813 20040C          	    16:         jsr setupirq
00:0816 20E90C          	    17:         jsr setupnmi
00:0819 20D60E          	    18:         jsr newgame
                        	    19: 
                        	    20:         ;; Include program modules
                        	    21:         include macros.asm

Source: "macros.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; General purpose macros
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5: 
                        	     6:         ;; Maths
                        	     7:         ;; ------------------------------------------------------------
                        	     8:         
                        	     9:         ;; Multiply value in .A by 8, ignore C flag
                        	    10:         ;; Reads:       .A
                        	    11:         ;; Writes:      .A
                        	    12: mula8:  macro
                        	    13:         clc
                        	    14:         asl
                        	    15:         asl
                        	    16:         asl
                        	    17:         endm
                        	    18:         
                        	    19:         ;; Divide value in .A by 8, ignore C flag
                        	    20:         ;; Reads:       .A
                        	    21:         ;; Writes:      .A      
                        	    22: diva8:  macro
                        	    23:         sec
                        	    24:         lsr
                        	    25:         lsr
                        	    26:         lsr
                        	    27:         endm
                        	    28: 
                        	    29:         ;; Add immediate value to byte and store
                        	    30: adcbimm: macro val, byt
                        	    31:         clc
                        	    32:         lda \byt
                        	    33:         adc #\val
                        	    34:         sta \byt
                        	    35:         endm
                        	    36: 
                        	    37:         ;; Subtract immediate value from byte and store
                        	    38: sbcbimm: macro val, byt
                        	    39:         sec
                        	    40:         lda \byt
                        	    41:         sbc #\val
                        	    42:         sta \byt
                        	    43:         endm
                        	    44: 
                        	    45:         ;; Add immediate word value to word and store
                        	    46: adcwimm: macro val, wrd
                        	    47:         clc
                        	    48:         lda \wrd
                        	    49:         adc #<\val
                        	    50:         sta \wrd
                        	    51:         lda \wrd+1
                        	    52:         adc #>\val
                        	    53:         sta \wrd+1
                        	    54:         endm
                        	    55: 
                        	    56:         ;; Subtract immediate word value from word and store
                        	    57: sbcwimm: macro val, wrd
                        	    58:         sec
                        	    59:         lda \wrd
                        	    60:         sbc #<\val
                        	    61:         sta \wrd
                        	    62:         lda \wrd+1
                        	    63:         sbc #>\val
                        	    64:         sta \wrd+1
                        	    65:         endm
                        	    66:         
                        	    67:         ;; Conditional jumps
                        	    68:         ;; ------------------------------------------------------------
                        	    69: 
                        	    70:         ;; BNE to distant address
                        	    71: jne:    macro adr
                        	    72:         beq :+
                        	    73:         jmp \adr
                        	    74: :
                        	    75:         endm
                        	    76: 
                        	    77:         ;; BEQ to distant address
                        	    78: jeq:    macro adr
                        	    79:         bne :+
                        	    80:         jmp \adr
                        	    81: :
                        	    82:         endm
                        	    83: 
                        	    84:         ;; BCS to distant address
                        	    85: jcs:    macro adr
                        	    86:         bcc :+
                        	    87:         jmp \adr
                        	    88: :
                        	    89:         endm
                        	    90: 
                        	    91:         ;; BCC to distant address
                        	    92: jcc:    macro adr
                        	    93:         bcs :+
                        	    94:         jmp \adr
                        	    95: :
                        	    96:         endm
                        	    97: 
                        	    98:         ;; BMI to distant address
                        	    99: jmi:    macro adr
                        	   100:         bpl :+
                        	   101:         jmp \adr
                        	   102: :
                        	   103:         endm
                        	   104:         
                        	   105:         ;; Stack operations
                        	   106:         ;; ------------------------------------------------------------
                        	   107: 
                        	   108:         ;; Push .X onto the stack
                        	   109: phx:    macro
                        	   110:         txa
                        	   111:         pha
                        	   112:         endm
                        	   113: 
                        	   114:         ;; Pop the top byte off the stack onto .X
                        	   115: plx:    macro
                        	   116:         pla
                        	   117:         tax
                        	   118:         endm
                        	   119: 
                        	   120:         ;; Push .Y onto the stack
                        	   121: phy:    macro
                        	   122:         tya
                        	   123:         pha
                        	   124:         endm
                        	   125: 
                        	   126:         ;; Pop the top byte off the stack onto .Y
                        	   127: ply:    macro
                        	   128:         pla
                        	   129:         tay
                        	   130:         endm
                        	   131: 
                        	   132:         ;; Memory operations
                        	   133:         ;; ------------------------------------------------------------
                        	   134: 
                        	   135:         ;; Swap bytes via the stack
                        	   136: swpbyt: macro byt1, byt2
                        	   137:         lda \byt1
                        	   138:         pha                     ;load byt1 & push onto the stack
                        	   139:         lda \byt2
                        	   140:         sta \byt1               ;load byt2 & save to byt1
                        	   141:         pla
                        	   142:         sta \byt2               ;pop byt1 off the stack & save to byt2
                        	   143:         endm
                        	   144:         
                        	   145:         ;; Load immediate value into byte
                        	   146: ldbimm: macro val, byt
                        	   147:         lda #\val
                        	   148:         sta \byt
                        	   149:         endm
                        	   150:         
                        	   151:         ;; Load immediate value into word
                        	   152: ldwimm: macro val, wrd
                        	   153:         lda #<\val
                        	   154:         sta \wrd
                        	   155:         lda #>\val
                        	   156:         sta \wrd+1
                        	   157:         endm
                        	   158: 
                        	   159:         ;; Load value into byte via pointer at index
                        	   160: ldbptr: macro ptr, idx, byt
                        	   161:         ldy #\idx
                        	   162:         lda (\ptr),y
                        	   163:         sta \byt
                        	   164:         endm
                        	   165:         
                        	   166:         ;; Load value into word via pointer at index
                        	   167: ldwptr: macro ptr, idx, wrd
                        	   168:         ldy #\idx
                        	   169:         lda (\ptr),y
                        	   170:         sta \wrd
                        	   171:         iny
                        	   172:         lda (\ptr),y
                        	   173:         sta \wrd+1
                        	   174:         endm
                        	   175: 
                        	   176:         ;; Copy value from one byte to another
                        	   177: cpbyt:  macro src, dst
                        	   178:         lda \src
                        	   179:         sta \dst
                        	   180:         endm
                        	   181: 
                        	   182:         ;; Copy value from one word to another
                        	   183: cpwrd:  macro src, dst
                        	   184:         lda \src
                        	   185:         sta \dst
                        	   186:         lda \src+1
                        	   187:         sta \dst+1
                        	   188:         endm
                        	   189: 
                        	   190:         ;; Fill memory range with a byte
                        	   191: filmem: macro adr, len, val
                        	   192:         lda #\val
                        	   193:         ldx #\len        
                        	   194: :       beq :+
                        	   195:         sta \adr,x
                        	   196:         dex
                        	   197:         jmp :-
                        	   198: :       sta \adr,x
                        	   199:         endm
                        	   200: 
                        	   201:         ;; Increment pointer using X-based, indirect adressing to ensure
                        	   202:         ;; HB is updated along with LB.
                        	   203: incptrx: macro ptr
                        	   204:         clc
                        	   205:         lda \ptr,x
                        	   206:         adc #1
                        	   207:         sta \ptr,x
                        	   208:         inx
                        	   209:         lda \ptr,x
                        	   210:         adc #0
                        	   211:         sta \ptr,x
                        	   212:         dex
                        	   213:         endm
                        	   214: 
                        	   215:         ;; Increment word to ensure HB is updated along with LB.
                        	   216: incwrd: macro wrd
                        	   217:         clc
                        	   218:         lda \wrd
                        	   219:         adc #1
                        	   220:         sta \wrd
                        	   221:         lda \wrd+1
                        	   222:         adc #0
                        	   223:         sta \wrd+1
                        	   224:         endm
                        	   225: 
                        	   226:         ;; Increment accumulator
                        	   227: ina:    macro
                        	   228:         tay
                        	   229:         iny
                        	   230:         tya
                        	   231:         endm
                        	   232: 
                        	   233:         ;; Decrement accumulator
                        	   234: dea:    macro
                        	   235:         tay
                        	   236:         dey
                        	   237:         tya
                        	   238:         endm
                        	   239: 

Source: "./src/startup.asm"
                        	    22:         include symbols.asm

Source: "symbols.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Symbol definitions
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         
                        	     6:         ;; Zero page memory locations
                        	     7:         ;; ------------------------------------------------------------
                        	     8: 
                        	     9:         ;; 15-byte buffer for use in sub-routines,
                        	    10:         ;; divided into 3x blocks of 5 bytes each.
                        	    11: buf:            equ $16         ;$16-$24
                        	    12:         
                        	    13:         ;; Block for game loop
                        	    14: wrd1:           equ buf
                        	    15: wrd2:           equ buf+$02
                        	    16: tmp:            equ buf+$04
                        	    17:         
                        	    18:         ;; Block for IRQ handler
                        	    19: irqwrd1:        equ buf+$05
                        	    20: irqwrd2:        equ buf+$07
                        	    21: irqtmp:         equ buf+$09
                        	    22:         
                        	    23:         ;; Block for NMI handler
                        	    24: nmiwrd1:        equ buf+$0a
                        	    25: nmiwrd2:        equ buf+$0c
                        	    26: nmitmp:         equ buf+$0e
                        	    27: 
                        	    28:         ;; Joystick data
                        	    29: joybtn:         equ $92         ;button value
                        	    30: joyx:           equ $96         ;x axis value
                        	    31: joyy:           equ $97         ;y axis value
                        	    32: 
                        	    33:         ;; Pac-Man data
                        	    34: pacsrc:         equ $9e         ;source node
                        	    35: pactar:         equ $9f         ;target node
                        	    36: pacdir:         equ $a3         ;facing direction
                        	    37: pacdis:         equ $a4         ;distance to target
                        	    38: pacrem:         equ $a5         ;distance remaining to target
                        	    39: 
                        	    40:         ;; Scoring, gameplay
                        	    41: npelrem:        equ $a6          ;number of pellets remaining
                        	    42: nmenrem:        equ $a7          ;number of remaining "men"
                        	    43: lvlnum:         equ $a8          ;level number
                        	    44: frtena:         equ $a9          ;whether or not fruit is enabled        
                        	    45: score:          equ $fc          ;player's score in BCD (4 bytes: $fc-$ff)
                        	    46: 
                        	    47:         ;; Animation
                        	    48: pacaix:         equ $aa          ;Pac-Man animation frame index
                        	    49: enzraix:        equ $ab          ;energizer animation frame index
                        	    50: lvlend:         equ $9b          ;level end flashes
                        	    51: 
                        	    52:         ;; Still available: $f7-$fb (5 bytes)
                        	    53:         
                        	    54:         ;; Memory-mapped hardware registers
                        	    55:         ;; ------------------------------------------------------------
                        	    56:         
                        	    57:         ;; VIC II registers
                        	    58: vic:            equ $d000
                        	    59: sp0x:           equ vic
                        	    60: sp0y:           equ vic + $01
                        	    61: sp1x:           equ vic + $02
                        	    62: sp1y:           equ vic + $03
                        	    63: sp2x:           equ vic + $04
                        	    64: sp2y:           equ vic + $05
                        	    65: sp3x:           equ vic + $06
                        	    66: sp3y:           equ vic + $07
                        	    67: sp4x:           equ vic + $08
                        	    68: sp4y:           equ vic + $09
                        	    69: sp5x:           equ vic + $0a
                        	    70: sp5y:           equ vic + $0b
                        	    71: sp6x:           equ vic + $0c
                        	    72: sp6y:           equ vic + $0d
                        	    73: sp7x:           equ vic + $0e
                        	    74: sp7y:           equ vic + $0f
                        	    75: scroly:         equ vic + $11
                        	    76: raster:         equ vic + $12
                        	    77: spena:          equ vic + $15
                        	    78: vmcsb:          equ vic + $18
                        	    79: vicirq:         equ vic + $19
                        	    80: irqmsk:         equ vic + $1a
                        	    81: spspcl:         equ vic + $1e
                        	    82: spbgcl:         equ vic + $1f
                        	    83: extcol:         equ vic + $20
                        	    84: bgcol0:         equ vic + $21
                        	    85: sp0col:         equ vic + $27
                        	    86: 
                        	    87:         ;; CIA1 registers
                        	    88: cia1:           equ $dc00
                        	    89: ci1pra:         equ cia1
                        	    90: ci1icr:         equ cia1 + $0d
                        	    91: 
                        	    92:         ;; CIA2 registers
                        	    93: cia2:           equ $dd00
                        	    94: ci2pra:         equ cia2
                        	    95: c2ddra:         equ cia2 + $02
                        	    96: ti2a:           equ cia2 + $04
                        	    97: ti2b:           equ cia2 + $06
                        	    98: ci2icr:         equ cia2 + $0d
                        	    99: ci2cra:         equ cia2 + $0e
                        	   100: ci2crb:         equ cia2 + $0f
                        	   101: 
                        	   102: 
                        	   103:         ;; Operating system memory locations
                        	   104:         ;; ------------------------------------------------------------
                        	   105:         
                        	   106:         ;; Interrupt vectors
                        	   107: cinv:           equ $0314       ;IRQ vector
                        	   108: nminv:          equ $0318       ;NMI vector
                        	   109: 
                        	   110:         ;; Interrupt routines
                        	   111: sysirq:         equ $ea7e       ;kernal IRQ handler
                        	   112: sysnmi:         equ $fe56       ;kernal NMI handler
                        	   113: 
                        	   114: 
                        	   115:         ;; Program memory locations
                        	   116:         ;; ------------------------------------------------------------
                        	   117:         
                        	   118: charset:        equ $4000       ;character set definition
                        	   119: coltab:         equ $4800       ;colour table
                        	   120: mazegfx:        equ $4bf0       ;Pac-Man maze
                        	   121: scnmem:         equ $4c00       ;screen memory
                        	   122: colmem:         equ $d800       ;colour memory
                        	   123: sp0mem:         equ $5000       ;sprite 0 address
                        	   124: sp0ptr:         equ $4ff8       ;sprite 0 pointer
                        	   125: sp0loc:         equ $1000/$40   ;sp0mem
                        	   126: 
                        	   127: 
                        	   128:         ;; Constants
                        	   129:         ;; ------------------------------------------------------------
                        	   130: 
                        	   131:         ;; Misc.
                        	   132: raslin:         equ 250         ;line for raster interrupt
                        	   133: spxscog:        equ 24          ;sprite x screen origin
                        	   134: spyscog:        equ 50          ;sprite y screen origin
                        	   135: maxpell:        equ 182         ;maximum number of pellets (incl. energizers)
                        	   136: maxmen:         equ 3           ;maximum number of "men"
                        	   137: 
                        	   138:         ;; Fruit
                        	   139: frxpos:        equ $67          ;fruit x loc
                        	   140: frypos:        equ $a2          ;fruit y loc
                        	   141: frttim:        equ 38           ;fruit timer: 39 x 240ms = 9.1s
                        	   142: 
                        	   143:         ;; Screen memory indexes
                        	   144: scrmsdi:        equ $185        ;most significant digit of score
                        	   145:         
                        	   146:         ;; Node indexes
                        	   147: wrpnixw:        equ $1b         ;western warp tunnel node index
                        	   148: wrpnixe:        equ $21         ;eastern warp tunnel node index
                        	   149: pacstnd:        equ $31         ;Pac-Man's starting node index        
                        	   150: gsthmnd:        equ $1e         ;ghost home node        
                        	   151: 
                        	   152:         ;; Character constants
                        	   153: spcechr:        equ $20         ;space char
                        	   154: pellchr:        equ $53         ;pellet char
                        	   155: enzrchr:        equ $54         ;energizer char
                        	   156: 
                        	   157:         ;; Colour constants
                        	   158: dkgrey:         equ $0b         ;dark grey
                        	   159: ltgrey:         equ $0f         ;light grey
                        	   160:         
                        	   161:         ;; Compass directions
                        	   162: n:              equ 2
                        	   163: s:              equ 3
                        	   164: w:              equ 4
                        	   165: e:              equ 5
                        	   166: 
                        	   167:         ;; Scores, expressed as BCD pairs
                        	   168: pellpts:        equ $10        ;10 pts for pellets
                        	   169: enzrpts:        equ $50        ;50 pts for energizers
                        	   170: 
                        	   171:         ;; Index into buf to access memory block
                        	   172:         ;; reservedf for gameloop
                        	   173: blki:           equ $00
                        	   174:         
                        	   175:         ;; Index into buf to access memory block
                        	   176:         ;; reserved for IRQ handler
                        	   177: irqblki:        equ $05
                        	   178: 
                        	   179:         ;; Index into buf to access memory block
                        	   180:         ;; reserved for NMI handler
                        	   181: nmiblki:        equ $0a
                        	   182: 
                        	   183:         ;; The number of pellets that need to be eaten for bonus items
                        	   184:         ;; to appear the 1st and 2nd time
                        	   185: nbonpel1:     equ 52
                        	   186: nbonpel2:     equ 127
                        	   187: 

Source: "./src/startup.asm"
                        	    23:         include maths.asm

Source: "maths.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maths sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Multiply by 5
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (multiplicand)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
00:081C E8              	    12: mula5:  inx
00:081D E8              	    13:         inx
00:081E 9516            	    14:         sta buf,x               ;stash original .A in wrd2 (lo)
00:0820 18              	    15:         clc
00:0821 0A              	    16:         asl                     ;multiply by 2
00:0822 A8              	    17:         tay                     ;stash product in .Y
00:0823 A900            	    18:         lda #0
00:0825 2A              	    19:         rol
00:0826 E8              	    20:         inx
00:0827 9516            	    21:         sta buf,x               ;stash .C in wrd2 (hi)
00:0829 98              	    22:         tya                     ;restore product from .Y
00:082A 0A              	    23:         asl                     ;multiply by 2
00:082B A8              	    24:         tay                     ;stash product in .Y
00:082C B516            	    25:         lda buf,x               
00:082E 2A              	    26:         rol                     ;restore .C from wrd2 (hi)
00:082F CA              	    27:         dex
00:0830 CA              	    28:         dex
00:0831 9516            	    29:         sta buf,x               ;write hi byte to wrd1 (hi)
00:0833 98              	    30:         tya                     ;restore product from .Y
00:0834 E8              	    31:         inx
00:0835 7516            	    32:         adc buf,x               ;add original .A value
00:0837 CA              	    33:         dex
00:0838 CA              	    34:         dex
00:0839 9516            	    35:         sta buf,x               ;write lo byte to wrd1 (lo)
00:083B A900            	    36:         lda #0
00:083D 2A              	    37:         rol
00:083E E8              	    38:         inx
00:083F 7516            	    39:         adc buf,x               ;add .C to hi byte
00:0841 9516            	    40:         sta buf,x               ;and write to wrd1 (hi)
00:0843 CA              	    41:         dex
00:0844 60              	    42:         rts
                        	    43:         
                        	    44:         ;; Multiply by 6
                        	    45:         ;; Reads:
                        	    46:         ;;  - .A (multiplicand)
                        	    47:         ;;  - .X (offset to memory block in buf)
                        	    48:         ;; Writes:
                        	    49:         ;;  - Result is stored in 1st word of memory block
                        	    50:         ;;  - 2nd word of memory block is used as a work area        
00:0845 E8              	    51: mula6:  inx
00:0846 E8              	    52:         inx
00:0847 9516            	    53:         sta buf,x
00:0849 18              	    54:         clc
00:084A 0A              	    55:         asl
00:084B A8              	    56:         tay
00:084C A900            	    57:         lda #0
00:084E 2A              	    58:         rol
00:084F E8              	    59:         inx
00:0850 9516            	    60:         sta buf,x
00:0852 98              	    61:         tya
00:0853 0A              	    62:         asl
00:0854 A8              	    63:         tay
00:0855 B516            	    64:         lda buf,x
00:0857 2A              	    65:         rol
00:0858 CA              	    66:         dex
00:0859 CA              	    67:         dex
00:085A 9516            	    68:         sta buf,x
00:085C 98              	    69:         tya
00:085D E8              	    70:         inx
00:085E 7516            	    71:         adc buf,x
00:0860 A8              	    72:         tay
00:0861 A900            	    73:         lda #0
00:0863 2A              	    74:         rol
00:0864 CA              	    75:         dex
00:0865 7516            	    76:         adc buf,x
00:0867 9516            	    77:         sta buf,x
00:0869 98              	    78:         tya
00:086A E8              	    79:         inx
00:086B 7516            	    80:         adc buf,x
00:086D CA              	    81:         dex
00:086E CA              	    82:         dex
00:086F 9516            	    83:         sta buf,x
00:0871 A900            	    84:         lda #0
00:0873 2A              	    85:         rol
00:0874 E8              	    86:         inx
00:0875 7516            	    87:         adc buf,x
00:0877 9516            	    88:         sta buf,x
00:0879 CA              	    89:         dex
00:087A 60              	    90:         rts
                        	    91: 

Source: "./src/startup.asm"
                        	    24:         include io.asm

Source: "io.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; I/O related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Write the player's score to screen memory
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Clobbers .A, .X, and .Y
                        	     8:         ;; Reads:
                        	     9:         ;;  - score
                        	    10:         ;;  - irqwrd1
                        	    11:         ;; Writes:
                        	    12:         ;;  - irqwrd1
                        	    13:         ;;  - irqwrd2
                        	    14:         ;;  - irqtmp
                        	    15: printscr:
                        	    16:         ;; Each of the 4 bytes comprising score contains 2 BCD digits.
                        	    17:         ;; Each digit needs to be extracted and turned into a
                        	    18:         ;; printable character. Then, each digit can be written to
                        	    19:         ;; screen memory using printchr. We skip leading zeroes.
                        	    20:         ldwimm scrmsdi, irqwrd1
00:087B A985            	     1M         lda #<scrmsdi
00:087D 851B            	     2M         sta irqwrd1
00:087F A901            	     3M         lda #>scrmsdi
00:0881 851C            	     4M         sta irqwrd1+1
                        	    21:         cpwrd irqwrd1, irqwrd2
00:0883 A51B            	     1M         lda irqwrd1
00:0885 851D            	     2M         sta irqwrd2
00:0887 A51C            	     3M         lda irqwrd1+1
00:0889 851E            	     4M         sta irqwrd2+1
                        	    22:         ldbimm 0, irqtmp
00:088B A900            	     1M         lda #0
00:088D 851F            	     2M         sta irqtmp
00:088F A203            	    23:         ldx #3
00:0891 3070            	    24: lpprsc: bmi fiprsc
                        	    25:         ;; print hi-nybble BCD char
00:0893 B5FC            	    26:         lda score,x
00:0895 4A              	    27:         lsr
00:0896 4A              	    28:         lsr
00:0897 4A              	    29:         lsr
00:0898 4A              	    30:         lsr                     ;shift BCD digit into lo-nybble
00:0899 F007            	    31:         beq :+
00:089B A001            	    32:         ldy #1
00:089D 841F            	    33:         sty irqtmp
00:089F 4CA908          	    34:         jmp :++
00:08A2 A41F            	    35: :       ldy irqtmp
00:08A4 D003            	    36:         bne :+
00:08A6 4CB508          	    37:         jmp :++
00:08A9 0930            	    38: :       ora #%00110000          ;convert to printable char
00:08AB A8              	    39:         tay                     ;place char in .Y
                        	    40:         phx                     ;save .X onto stack
00:08AC 8A              	     1M         txa
00:08AD 48              	     2M         pha
00:08AE A205            	    41:         ldx #irqblki            ;load block index into .X
00:08B0 201709          	    42:         jsr printchr            ;print char
                        	    43:         plx                     ;restore .X from stack
00:08B3 68              	     1M         pla
00:08B4 AA              	     2M         tax
                        	    44: :       incwrd irqwrd2
00:08B5 18              	     1M         clc
00:08B6 A51D            	     2M         lda irqwrd2
00:08B8 6901            	     3M         adc #1
00:08BA 851D            	     4M         sta irqwrd2
00:08BC A51E            	     5M         lda irqwrd2+1
00:08BE 6900            	     6M         adc #0
00:08C0 851E            	     7M         sta irqwrd2+1
                        	    45:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08C2 A51D            	     1M         lda irqwrd2
00:08C4 851B            	     2M         sta irqwrd1  
00:08C6 A51E            	     3M         lda irqwrd2+1
00:08C8 851C            	     4M         sta irqwrd1  +1
                        	    46:         
                        	    47:         ;; print lo-nybble BCD char
00:08CA B5FC            	    48: :       lda score,x
00:08CC 290F            	    49:         and #%00001111          ;mask out hi-nybble
00:08CE F007            	    50:         beq :+
00:08D0 A001            	    51:         ldy #1        
00:08D2 841F            	    52:         sty irqtmp
00:08D4 4CDE08          	    53:         jmp :++
00:08D7 A41F            	    54: :       ldy irqtmp
00:08D9 D003            	    55:         bne :+
00:08DB 4CEA08          	    56:         jmp :++
00:08DE 0930            	    57: :       ora #%00110000          ;convert to printable char
00:08E0 A8              	    58:         tay                     ;place char in .Y
                        	    59:         phx                     ;save .X onto stack
00:08E1 8A              	     1M         txa
00:08E2 48              	     2M         pha
00:08E3 A205            	    60:         ldx #irqblki            ;load block index into .X
00:08E5 201709          	    61:         jsr printchr            ;print char
                        	    62:         plx                     ;restore .X from stack
00:08E8 68              	     1M         pla
00:08E9 AA              	     2M         tax
                        	    63: :       incwrd irqwrd2
00:08EA 18              	     1M         clc
00:08EB A51D            	     2M         lda irqwrd2
00:08ED 6901            	     3M         adc #1
00:08EF 851D            	     4M         sta irqwrd2
00:08F1 A51E            	     5M         lda irqwrd2+1
00:08F3 6900            	     6M         adc #0
00:08F5 851E            	     7M         sta irqwrd2+1
                        	    64:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08F7 A51D            	     1M         lda irqwrd2
00:08F9 851B            	     2M         sta irqwrd1  
00:08FB A51E            	     3M         lda irqwrd2+1
00:08FD 851C            	     4M         sta irqwrd1  +1
00:08FF CA              	    65:         dex                     ;decrement .X
00:0900 4C9108          	    66:         jmp lpprsc
00:0903 60              	    67: fiprsc: rts
                        	    68:         
                        	    69:         ;; Write value in .Y to colour memory at 16-bit offset
                        	    70:         ;; in memory block.
                        	    71:         ;; Reads:
                        	    72:         ;;  - .Y (value to write to colour memory)
                        	    73:         ;;  - .X (buf offset to access memory block )
                        	    74:         ;;  - 1st word in memory block at offset
                        	    75:         ;; Writes:
                        	    76:         ;;  - 1st word in memory block at offset
                        	    77: printcol:       
00:0904 18              	    78:         clc
00:0905 A900            	    79:         lda #<colmem
00:0907 7516            	    80:         adc buf,x
00:0909 9516            	    81:         sta buf,x
00:090B E8              	    82:         inx                     ;hi-byte
00:090C A9D8            	    83:         lda #>colmem
00:090E 7516            	    84:         adc buf,x
00:0910 9516            	    85:         sta buf,x
00:0912 CA              	    86:         dex                     ;lo-byte
00:0913 98              	    87:         tya
00:0914 8116            	    88:         sta (buf,x)             ;write to colour memory
00:0916 60              	    89:         rts
                        	    90: 
                        	    91:         ;; Write char in .Y to screen memory at 16-bit offset
                        	    92:         ;; in memory block.
                        	    93:         ;; Reads:
                        	    94:         ;;  - .Y (char to write to screen memory)
                        	    95:         ;;  - .X (buf offset to access memory block )
                        	    96:         ;;  - 1st word in memory block at offset
                        	    97:         ;; Writes:
                        	    98:         ;;  - 1st word in memory block at offset
                        	    99: printchr:
                        	   100:         ;; Write char to screen memory
00:0917 18              	   101:         clc        
00:0918 A900            	   102:         lda #<scnmem
00:091A 7516            	   103:         adc buf,x
00:091C 9516            	   104:         sta buf,x
00:091E E8              	   105:         inx                     ;hi-byte
00:091F A94C            	   106:         lda #>scnmem
00:0921 7516            	   107:         adc buf,x
00:0923 9516            	   108:         sta buf,x
00:0925 CA              	   109:         dex                     ;lo-byte
00:0926 98              	   110:         tya
00:0927 8116            	   111:         sta (buf,x)             ;write to screen memory
00:0929 60              	   112:         rts
                        	   113: 
                        	   114:         ;; Initialize VIC-II
                        	   115:         ;;  - Select 16K video bank
                        	   116:         ;;  - Select screen memory location
                        	   117:         ;;  - Select character memory location
                        	   118:         ;;  - Set border & background colours
                        	   119: initvic:
                        	   120:         ;; select vic bank
00:092A AD02DD          	   121:         lda c2ddra
00:092D 0903            	   122:         ora #%00000011
00:092F 8D02DD          	   123:         sta c2ddra              ;set bits 0+1 of ci2pra as output bits
00:0932 AD00DD          	   124:         lda ci2pra
00:0935 29FC            	   125:         and #%11111100
00:0937 0902            	   126:         ora #%00000010
00:0939 8D00DD          	   127:         sta ci2pra              ;select vic bank 1: $4000-$7fff
                        	   128: 
                        	   129:         ;; select screen memory loc
00:093C A90F            	   130:         lda #$0f
00:093E 2D18D0          	   131:         and vmcsb
00:0941 0930            	   132:         ora #$30
00:0943 8D18D0          	   133:         sta vmcsb
                        	   134: 
                        	   135:         ;; select char memory loc
00:0946 A9F1            	   136:         lda #$f1
00:0948 2D18D0          	   137:         and vmcsb
00:094B 8D18D0          	   138:         sta vmcsb
                        	   139: 
                        	   140:         ;; set border & background colours
00:094E A900            	   141:         lda #0
00:0950 8D20D0          	   142:         sta extcol
00:0953 8D21D0          	   143:         sta bgcol0
00:0956 60              	   144:         rts
                        	   145: 
                        	   146:         ;; Fill colour memory from colour table
                        	   147: fillcolmem:
                        	   148:         ;; populate colour memory
00:0957 A200            	   149:         ldx #0
                        	   150: setcol1:
00:0959 BD004C          	   151:         lda scnmem,x
00:095C A8              	   152:         tay
00:095D B90048          	   153:         lda coltab,y
00:0960 9D00D8          	   154:         sta colmem,x
00:0963 E8              	   155:         inx
00:0964 E0FA            	   156:         cpx #250
00:0966 D0F1            	   157:         bne setcol1
00:0968 A200            	   158:         ldx #0
                        	   159: setcol2:
00:096A BDFA4C          	   160:         lda scnmem+250,x
00:096D A8              	   161:         tay
00:096E B90048          	   162:         lda coltab,y
00:0971 9DFAD8          	   163:         sta colmem+250,x
00:0974 E8              	   164:         inx
00:0975 E0FA            	   165:         cpx #250
00:0977 D0F1            	   166:         bne setcol2
00:0979 A200            	   167:         ldx #0
                        	   168: setcol3:
00:097B BDF44D          	   169:         lda scnmem+500,x
00:097E A8              	   170:         tay
00:097F B90048          	   171:         lda coltab,y
00:0982 9DF4D9          	   172:         sta colmem+500,x
00:0985 E8              	   173:         inx
00:0986 E0FA            	   174:         cpx #250
00:0988 D0F1            	   175:         bne setcol3
00:098A A200            	   176:         ldx #0
                        	   177: setcol4:
00:098C BDEE4E          	   178:         lda scnmem+750,x
00:098F A8              	   179:         tay
00:0990 B90048          	   180:         lda coltab,y
00:0993 9DEEDA          	   181:         sta colmem+750,x
00:0996 E8              	   182:         inx
00:0997 E0FA            	   183:         cpx #250
00:0999 D0F1            	   184:         bne setcol4
00:099B 60              	   185:         rts
                        	   186:         
                        	   187:         ;; Read joystick in port 2
                        	   188:         ;; Writes:
                        	   189:         ;;  - joyx = $01: stick moved right
                        	   190:         ;;  - joyx = $ff: stick moved left
                        	   191:         ;;  - joyy = $01: stick moved down
                        	   192:         ;;  - joyy = $ff: stick moved up
                        	   193:         ;;  - joybtn = $01: button pressed
                        	   194: readjoy2:
00:099C 78              	   195:         sei
00:099D AD00DC          	   196:         lda ci1pra
00:09A0 A000            	   197:         ldy #0
00:09A2 A200            	   198:         ldx #0
00:09A4 4A              	   199:         lsr
00:09A5 B001            	   200:         bcs djr0
00:09A7 88              	   201:         dey
00:09A8 4A              	   202: djr0:   lsr
00:09A9 B001            	   203:         bcs djr1
00:09AB C8              	   204:         iny
00:09AC 4A              	   205: djr1:   lsr
00:09AD B001            	   206:         bcs djr2
00:09AF CA              	   207:         dex
00:09B0 4A              	   208: djr2:   lsr
00:09B1 B001            	   209:         bcs djr3
00:09B3 E8              	   210:         inx
00:09B4 4A              	   211: djr3:   lsr
00:09B5 8696            	   212:         stx joyx
00:09B7 8497            	   213:         sty joyy
00:09B9 A900            	   214:         lda #0
00:09BB 2A              	   215:         rol
00:09BC 8592            	   216:         sta joybtn
00:09BE 58              	   217:         cli
00:09BF 60              	   218:         rts
                        	   219: 

Source: "./src/startup.asm"
                        	    25:         include maze.asm

Source: "maze.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maze related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert pellet table index to pellet memory address.
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (pellet table index)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of buf at offset .X
                        	    11:         ;;  - 2nd word of buf at offset .X is used as a work area
                        	    12: pelladr:
00:09C0 201C08          	    13:         jsr mula5               ;multiply pellet index by 5
00:09C3 18              	    14:         clc
00:09C4 B516            	    15:         lda buf,x               ;load product (lo)
00:09C6 6907            	    16:         adc #<pelltbl           ;add pellet table address (lo)
00:09C8 9516            	    17:         sta buf,x               ;write sum (lo)
00:09CA E8              	    18:         inx
00:09CB B516            	    19:         lda buf,x               ;load product (hi)
00:09CD 6913            	    20:         adc #>pelltbl           ;add pellet table address (hi)
00:09CF 9516            	    21:         sta buf,x               ;write sum (hi)
00:09D1 CA              	    22:         dex
00:09D2 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Fill maze with pellets
                        	    26:         ;; May only be called from gameloop!
                        	    27: fillmaze:
                        	    28:         ldbimm 0, tmp           ;store pellet index in tmp
00:09D3 A900            	     1M         lda #0
00:09D5 851A            	     2M         sta tmp           
                        	    29: filloop:
00:09D7 A51A            	    30:         lda tmp
00:09D9 A200            	    31:         ldx #blki
00:09DB 20C009          	    32:         jsr pelladr             ;get pellet address
00:09DE A001            	    33:         ldy #1
00:09E0 B116            	    34:         lda (wrd1),y
00:09E2 C9FF            	    35:         cmp #$ff                ;end marker?
00:09E4 F029            	    36:         beq finfil              ;yep, we're done
00:09E6 A901            	    37:         lda #1
00:09E8 A002            	    38:         ldy #2
00:09EA 9116            	    39:         sta (wrd1),y            ;set pellet status        
                        	    40:         ldwptr wrd1, 0, wrd2
00:09EC A000            	     1M         ldy #0
00:09EE B116            	     2M         lda (wrd1),y
00:09F0 8518            	     3M         sta wrd2
00:09F2 C8              	     4M         iny
00:09F3 B116            	     5M         lda (wrd1),y
00:09F5 8519            	     6M         sta wrd2+1
00:09F7 A204            	    41:         ldx #blki+4
00:09F9 20350B          	    42:         jsr isenzr              ;is pellet an energizer?
00:09FC F005            	    43:         beq :+
00:09FE A053            	    44:         ldy #pellchr            ;no, it's a regular pellet
00:0A00 4C050A          	    45:         jmp :++
00:0A03 A054            	    46: :       ldy #enzrchr            ;yes, it's an energizer        
00:0A05 A202            	    47: :       ldx #blki+2
00:0A07 201709          	    48:         jsr printchr            ;print pellet char
00:0A0A E61A            	    49:         inc tmp
00:0A0C 4CD709          	    50:         jmp filloop
00:0A0F 60              	    51: finfil: rts
                        	    52: 
                        	    53:         ;; Find pellet collided with by searching in the opposite direction
                        	    54:         ;; to which Pac-Man is facing.
                        	    55:         ;; May only be called from IRQ handler!
                        	    56:         ;; Reads:
                        	    57:         ;;  - sp0x, sp0y
                        	    58:         ;;  - pacdir (direction Pac-Man is facing)
                        	    59:         ;; Writes:
                        	    60:         ;;  - irqwrd1: pellet address
                        	    61:         ;;  - irqtmp: pellet index
                        	    62: findpel:
                        	    63:         ;; if pacdir=#w then find 1st pellet in row with x>=sp0x
                        	    64:         ;; if pacdir=#e then find last pellet in row with x<=sp0x
                        	    65:         ;; if pacdir=#n then find pellet in row-1 with x=sp0x
                        	    66:         ;; if pacdir=#s then find pellet in row+1 with x=sp0x
00:0A10 A5A3            	    67:         lda pacdir
00:0A12 C904            	    68:         cmp #w
00:0A14 D033            	    69:         bne fpckde
                        	    70:         cpbyt sp0y, irqtmp
00:0A16 AD01D0          	     1M         lda sp0y
00:0A19 851F            	     2M         sta irqtmp
00:0A1B 20190B          	    71:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	    72:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A1E A51D            	     1M         lda irqwrd2
00:0A20 851F            	     2M         sta irqtmp   
00:0A22 A205            	    73:         ldx #irqblki
00:0A24 A51F            	    74: :       lda irqtmp              ;load index of west-most pellet in row
00:0A26 20C009          	    75:         jsr pelladr             ;load pellet address into irqwrd1
00:0A29 A003            	    76:         ldy #3
                        	    77:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A2B AD00D0          	     1M         lda sp0x
00:0A2E 851D            	     2M         sta irqwrd2     
00:0A30 C61D            	    78:         dec irqwrd2             ;decrement irqwrd2 (lo) to give some leeway
00:0A32 B11B            	    79:         lda (irqwrd1),y         ;load pellet x loc
00:0A34 C51D            	    80:         cmp irqwrd2
00:0A36 B005            	    81:         bcs :+                  ;pellet x loc >= sp0x?
00:0A38 E61F            	    82:         inc irqtmp              ;no, try next pellet to the east
00:0A3A 4C240A          	    83:         jmp :-
00:0A3D A002            	    84: :       ldy #2
00:0A3F B11B            	    85:         lda (irqwrd1),y         ;yes, load pellet state
                        	    86:         jeq pelnotfd            ;has pellet already been eaten?
00:0A41 D003            	     1M         bne :+
00:0A43 4CEC0A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A46 4CE50A          	    87:         jmp pelfound
00:0A49 C905            	    88: fpckde: cmp #e
00:0A4B D036            	    89:         bne fpckdn
                        	    90:         cpbyt sp0y, irqtmp
00:0A4D AD01D0          	     1M         lda sp0y
00:0A50 851F            	     2M         sta irqtmp
00:0A52 20190B          	    91:         jsr fpinrow             ;get indexes of west-most & east-most pellets
00:0A55 A001            	    92:         ldy #1
00:0A57 B91D00          	    93:         lda irqwrd2,y
00:0A5A 851F            	    94:         sta irqtmp              ;store index of west-most pellet
00:0A5C A205            	    95:         ldx #irqblki
00:0A5E A51F            	    96: :       lda irqtmp
00:0A60 20C009          	    97:         jsr pelladr
                        	    98:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A63 AD00D0          	     1M         lda sp0x
00:0A66 851D            	     2M         sta irqwrd2     
00:0A68 E61D            	    99:         inc irqwrd2             ;increment irqwrd2 (lo) to give some leeway
00:0A6A A51D            	   100:         lda irqwrd2
00:0A6C A003            	   101:         ldy #3
00:0A6E D11B            	   102:         cmp (irqwrd1),y
00:0A70 B005            	   103:         bcs :+                  ;sp0x >= pellet x loc
00:0A72 C61F            	   104:         dec irqtmp              ;no, try next pellet to the west
00:0A74 4C5E0A          	   105:         jmp :-
00:0A77 A002            	   106: :       ldy #2
00:0A79 B11B            	   107:         lda (irqwrd1),y         ;yes, load pellet state
                        	   108:         jeq pelnotfd            ;has pellet already been eaten?
00:0A7B D003            	     1M         bne :+
00:0A7D 4CEC0A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A80 4CE50A          	   109:         jmp pelfound
00:0A83 C902            	   110: fpckdn: cmp #n
00:0A85 D034            	   111:         bne fpds
                        	   112:         cpbyt sp0y, irqtmp      ;store sp0y in irqtmp
00:0A87 AD01D0          	     1M         lda sp0y
00:0A8A 851F            	     2M         sta irqtmp      
                        	   113:         sbcbimm 3, irqtmp       ;subtract 3 from irqtmp to try to find row
00:0A8C 38              	     1M         sec
00:0A8D A51F            	     2M         lda irqtmp       
00:0A8F E903            	     3M         sbc #3
00:0A91 851F            	     4M         sta irqtmp       
00:0A93 20F50A          	   114:         jsr fprixs
00:0A96 20190B          	   115:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   116:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A99 A51D            	     1M         lda irqwrd2
00:0A9B 851F            	     2M         sta irqtmp   
00:0A9D A205            	   117:         ldx #irqblki
00:0A9F A51F            	   118: :       lda irqtmp
00:0AA1 20C009          	   119:         jsr pelladr
00:0AA4 AD00D0          	   120:         lda sp0x
00:0AA7 A003            	   121:         ldy #3
00:0AA9 D11B            	   122:         cmp (irqwrd1),y
00:0AAB F005            	   123:         beq :+                  ;sp0x = pellet x loc?
00:0AAD E61F            	   124:         inc irqtmp              ;no, try next pellet to the east
00:0AAF 4C9F0A          	   125:         jmp :-
00:0AB2 A002            	   126: :       ldy #2
00:0AB4 B11B            	   127:         lda (irqwrd1),y         ;yes, load pellet state
00:0AB6 F034            	   128:         beq pelnotfd            ;has pellet already been eaten?
00:0AB8 4CE50A          	   129:         jmp pelfound
                        	   130: fpds:   cpbyt sp0y, irqtmp
00:0ABB AD01D0          	     1M         lda sp0y
00:0ABE 851F            	     2M         sta irqtmp
00:0AC0 20070B          	   131:         jsr fprixn
00:0AC3 20190B          	   132:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   133:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0AC6 A51D            	     1M         lda irqwrd2
00:0AC8 851F            	     2M         sta irqtmp   
00:0ACA A205            	   134:         ldx #irqblki
00:0ACC A51F            	   135: :       lda irqtmp
00:0ACE 20C009          	   136:         jsr pelladr
00:0AD1 AD00D0          	   137:         lda sp0x
00:0AD4 A003            	   138:         ldy #3
00:0AD6 D11B            	   139:         cmp (irqwrd1),y
00:0AD8 F005            	   140:         beq :+                  ;sp0x = pellet x loc?
00:0ADA E61F            	   141:         inc irqtmp              ;no, try next pellet to the east
00:0ADC 4CCC0A          	   142:         jmp :-
00:0ADF A002            	   143: :       ldy #2
00:0AE1 B11B            	   144:         lda (irqwrd1),y         ;yes, load pellet state
00:0AE3 F007            	   145:         beq pelnotfd            ;has pellet already been eaten?
                        	   146: pelfound:
00:0AE5 A900            	   147:         lda #0
00:0AE7 A002            	   148:         ldy #2
00:0AE9 911B            	   149:         sta (irqwrd1),y         ;pellet not yet eaten, mark as eaten
00:0AEB 60              	   150:         rts        
                        	   151: pelnotfd:
                        	   152:         ldwimm $ffff, irqwrd1   ;pellet already eaten
00:0AEC A9FF            	     1M         lda #<$ffff
00:0AEE 851B            	     2M         sta irqwrd1   
00:0AF0 A9FF            	     3M         lda #>$ffff
00:0AF2 851C            	     4M         sta irqwrd1   +1
00:0AF4 60              	   153:         rts
                        	   154: 
                        	   155:         ;; Get y loc of next row to the south of the y loc in irqtmp
                        	   156:         ;; Reads:
                        	   157:         ;;  - irqtmp: y loc to find row south of
                        	   158:         ;; Writes:
                        	   159:         ;;  - irqtmp: y loc of next row to the south
00:0AF5 A000            	   160: fprixs: ldy #0
00:0AF7 B9B616          	   161: :       lda plrowix,y
00:0AFA C51F            	   162:         cmp irqtmp
00:0AFC B006            	   163:         bcs :+
00:0AFE C8              	   164:         iny
00:0AFF C8              	   165:         iny
00:0B00 C8              	   166:         iny
00:0B01 4CF70A          	   167:         jmp :-
00:0B04 851F            	   168: :       sta irqtmp
00:0B06 60              	   169:         rts
                        	   170:         
                        	   171:         ;; Get y loc of next row to the north of the y loc in irqtmp
                        	   172:         ;; Reads:
                        	   173:         ;;  - irqtmp: y loc to find row north of
                        	   174:         ;; Writes:
                        	   175:         ;;  - irqtmp: y loc of next row to the north
00:0B07 A042            	   176: fprixn: ldy #66
00:0B09 B9B616          	   177: :       lda plrowix,y
00:0B0C C51F            	   178:         cmp irqtmp
00:0B0E 9006            	   179:         bcc :+
00:0B10 88              	   180:         dey
00:0B11 88              	   181:         dey
00:0B12 88              	   182:         dey
00:0B13 4C090B          	   183:         jmp :-
00:0B16 851F            	   184: :       sta irqtmp
00:0B18 60              	   185:         rts
                        	   186:         
                        	   187:         
                        	   188:         ;; Get pellet table indexes of west-most & east-most pellets 
                        	   189:         ;; in row whose sprite y loc is in irqtmp
                        	   190:         ;; May only be called from IRQ handler!
                        	   191:         ;; Reads:
                        	   192:         ;;  - irqtmp: pellet row y loc
                        	   193:         ;; Writes:
                        	   194:         ;;  - irqwrd2: indexes of west-most & east-most pellets in row
                        	   195: fpinrow:
00:0B19 A000            	   196:         ldy #0
00:0B1B B9B616          	   197: :       lda plrowix,y
00:0B1E C51F            	   198:         cmp irqtmp
00:0B20 F006            	   199:         beq :+
00:0B22 C8              	   200:         iny
00:0B23 C8              	   201:         iny
00:0B24 C8              	   202:         iny
00:0B25 4C1B0B          	   203:         jmp :-
00:0B28 C8              	   204: :       iny
00:0B29 B9B616          	   205:         lda plrowix,y
00:0B2C 851D            	   206:         sta irqwrd2
00:0B2E C8              	   207:         iny
00:0B2F B9B616          	   208:         lda plrowix,y
00:0B32 851E            	   209:         sta irqwrd2+1
00:0B34 60              	   210:         rts
                        	   211: 
                        	   212:         ;; Check whether or not pellet at index is an energizer
                        	   213:         ;; Reads:
                        	   214:         ;;  - .X: index into buffer to access memory block
                        	   215:         ;;  - 1st byte of memory block: pellet index
                        	   216:         ;; Writes:
                        	   217:         ;;  - .Z is set if pellet is an energizer
00:0B35 A003            	   218: isenzr: ldy #3
00:0B37 300B            	   219: :       bmi :+
00:0B39 B516            	   220:         lda buf,x
00:0B3B D99A16          	   221:         cmp enzrlst,y
00:0B3E F004            	   222:         beq :+
00:0B40 88              	   223:         dey
00:0B41 4C370B          	   224:         jmp :-
00:0B44 60              	   225: :       rts
                        	   226: 
                        	   227:         ;; Convert node index to node address
                        	   228:         ;; Reads:
                        	   229:         ;;  - .A (node index)
                        	   230:         ;;  - .X (offset into buf to access memory block)
                        	   231:         ;; Writes:
                        	   232:         ;;  - Result is stored in 1st word of memory block
                        	   233:         ;;  - 2nd word of memory block is used as a work area
                        	   234: nodeadr:
00:0B45 204508          	   235:         jsr mula6
00:0B48 18              	   236:         clc
00:0B49 B516            	   237:         lda buf,x
00:0B4B 6969            	   238:         adc #<nodetbl
00:0B4D 9516            	   239:         sta buf,x
00:0B4F E8              	   240:         inx
00:0B50 B516            	   241:         lda buf,x
00:0B52 6911            	   242:         adc #>nodetbl
00:0B54 9516            	   243:         sta buf,x
00:0B56 CA              	   244:         dex
00:0B57 60              	   245:         rts
                        	   246: 
                        	   247:         ;; Calculate distance from Pac-Man's source node to target node
                        	   248:         ;; Reads:
                        	   249:         ;;  - pacsrc (source node)
                        	   250:         ;;  - pactar (target node)
                        	   251:         ;;  - pacdir (compass direction)
                        	   252:         ;;  - .X (offset into buf to access memory block)
                        	   253:         ;; Writes:
                        	   254:         ;;  - pacdis (total distance)
                        	   255:         ;;  - pacrem (distance remaining)
                        	   256:         ;;  - 1st & 2nd word of memory block are used for calculations
                        	   257: setnodis:
00:0B58 A5A3            	   258:         lda pacdir
00:0B5A C904            	   259:         cmp #w
00:0B5C D01A            	   260:         bne chkne
00:0B5E A59F            	   261:         lda pactar
00:0B60 C921            	   262:         cmp #wrpnixe            ;eastern warp tunnel node
                        	   263:         jeq warp
00:0B62 D003            	     1M         bne :+
00:0B64 4CFD0B          	     2M         jmp warp
                        	     3M :
00:0B67 A59E            	   264:         lda pacsrc
00:0B69 20450B          	   265:         jsr nodeadr             
00:0B6C A116            	   266:         lda (buf,x)             ;get source x coord...
00:0B6E 48              	   267:         pha                     ;... and stash it on the stack
00:0B6F A59F            	   268:         lda pactar
00:0B71 20450B          	   269:         jsr nodeadr             ;get target node address
00:0B74 68              	   270:         pla                     ;restore source x coord
00:0B75 4CF50B          	   271:         jmp calcnd
00:0B78 C905            	   272: chkne:  cmp #e
00:0B7A D01A            	   273:         bne chknn
00:0B7C A59F            	   274:         lda pactar
00:0B7E C91B            	   275:         cmp #wrpnixw             ;western warp tunnel node
                        	   276:         jeq warp
00:0B80 D003            	     1M         bne :+
00:0B82 4CFD0B          	     2M         jmp warp
                        	     3M :
00:0B85 A59F            	   277:         lda pactar
00:0B87 20450B          	   278:         jsr nodeadr             
00:0B8A A116            	   279:         lda (buf,x)             ;get target x coord...
00:0B8C 48              	   280:         pha                     ;... and stash it on the stack
00:0B8D A59E            	   281:         lda pacsrc
00:0B8F 20450B          	   282:         jsr nodeadr             ;get source node address
00:0B92 68              	   283:         pla                     ;restore target x coord
00:0B93 4CF50B          	   284:         jmp calcnd
00:0B96 C902            	   285: chknn:  cmp #n
00:0B98 D02F            	   286:         bne setnds
00:0B9A A59E            	   287:         lda pacsrc
00:0B9C 20450B          	   288:         jsr nodeadr
                        	   289:         incptrx buf             ;advance pointer; we need y coord
00:0B9F 18              	     1M         clc
00:0BA0 B516            	     2M         lda buf             ,x
00:0BA2 6901            	     3M         adc #1
00:0BA4 9516            	     4M         sta buf             ,x
00:0BA6 E8              	     5M         inx
00:0BA7 B516            	     6M         lda buf             ,x
00:0BA9 6900            	     7M         adc #0
00:0BAB 9516            	     8M         sta buf             ,x
00:0BAD CA              	     9M         dex
00:0BAE A116            	   290:         lda (buf,x)             ;get source y coord...
00:0BB0 48              	   291:         pha                     ;... and stash it on the stack
00:0BB1 A59F            	   292:         lda pactar
00:0BB3 20450B          	   293:         jsr nodeadr             ;get target node address
                        	   294:         incptrx buf             ;advance pointer; we need y coord
00:0BB6 18              	     1M         clc
00:0BB7 B516            	     2M         lda buf             ,x
00:0BB9 6901            	     3M         adc #1
00:0BBB 9516            	     4M         sta buf             ,x
00:0BBD E8              	     5M         inx
00:0BBE B516            	     6M         lda buf             ,x
00:0BC0 6900            	     7M         adc #0
00:0BC2 9516            	     8M         sta buf             ,x
00:0BC4 CA              	     9M         dex
00:0BC5 68              	   295:         pla                     ;restore source y coord
00:0BC6 4CF50B          	   296:         jmp calcnd
00:0BC9 A59F            	   297: setnds: lda pactar
00:0BCB 20450B          	   298:         jsr nodeadr
                        	   299:         incptrx buf             ;advance pointer; we need y coord
00:0BCE 18              	     1M         clc
00:0BCF B516            	     2M         lda buf             ,x
00:0BD1 6901            	     3M         adc #1
00:0BD3 9516            	     4M         sta buf             ,x
00:0BD5 E8              	     5M         inx
00:0BD6 B516            	     6M         lda buf             ,x
00:0BD8 6900            	     7M         adc #0
00:0BDA 9516            	     8M         sta buf             ,x
00:0BDC CA              	     9M         dex
00:0BDD A116            	   300:         lda (buf,x)             ;get target y coord...
00:0BDF 48              	   301:         pha                     ;... and stash it on the stack
00:0BE0 A59E            	   302:         lda pacsrc
00:0BE2 20450B          	   303:         jsr nodeadr
                        	   304:         incptrx buf             ;advance pointer; we need y coord
00:0BE5 18              	     1M         clc
00:0BE6 B516            	     2M         lda buf             ,x
00:0BE8 6901            	     3M         adc #1
00:0BEA 9516            	     4M         sta buf             ,x
00:0BEC E8              	     5M         inx
00:0BED B516            	     6M         lda buf             ,x
00:0BEF 6900            	     7M         adc #0
00:0BF1 9516            	     8M         sta buf             ,x
00:0BF3 CA              	     9M         dex
00:0BF4 68              	   305:         pla                     ;restore target y coord
00:0BF5 38              	   306: calcnd: sec
00:0BF6 E116            	   307:         sbc (buf,x)
00:0BF8 85A4            	   308:         sta pacdis
00:0BFA 85A5            	   309:         sta pacrem
00:0BFC 60              	   310:         rts
00:0BFD A900            	   311: warp:   lda #0
00:0BFF 85A4            	   312:         sta pacdis
00:0C01 85A5            	   313:         sta pacrem
00:0C03 60              	   314:         rts
                        	   315: 

Source: "./src/startup.asm"
                        	    26:         include irq.asm

Source: "irq.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; IRQ handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for raster IRQ.
                        	     6: setupirq:
00:0C04 78              	     7:         sei
                        	     8:         ldbimm $7f, ci1icr
00:0C05 A97F            	     1M         lda #$7f
00:0C07 8D0DDC          	     2M         sta ci1icr
                        	     9:         ldbimm $03, irqmsk ;enable raster IRQ & mob-data collision
00:0C0A A903            	     1M         lda #$03
00:0C0C 8D1AD0          	     2M         sta irqmsk 
                        	    10:         ldbimm $1b, scroly
00:0C0F A91B            	     1M         lda #$1b
00:0C11 8D11D0          	     2M         sta scroly
                        	    11:         ldbimm raslin, raster
00:0C14 A9FA            	     1M         lda #raslin
00:0C16 8D12D0          	     2M         sta raster
                        	    12:         ldwimm procirq, cinv
00:0C19 A925            	     1M         lda #<procirq
00:0C1B 8D1403          	     2M         sta cinv
00:0C1E A90C            	     3M         lda #>procirq
00:0C20 8D1503          	     4M         sta cinv+1
00:0C23 58              	    13:         cli
00:0C24 60              	    14:         rts
                        	    15: 
                        	    16:         ;; IRQ handler. Here we handle:
                        	    17:         ;;  - Collisions
                        	    18:         ;;    * between Pac-Man and pellets
                        	    19:         ;;    * between Pac-Man and fruit
                        	    20:         ;;    * between Pac-Man and ghosts
                        	    21:         ;;  - Movement
                        	    22:         ;;    * Updating Pac-Man and ghost sprite coordinates
                        	    23: procirq:
                        	    24:         ;; Read sprite collision registers & save to irqwrd1
                        	    25:         cpbyt spbgcl, irqwrd1
00:0C25 AD1FD0          	     1M         lda spbgcl
00:0C28 851B            	     2M         sta irqwrd1
                        	    26:         cpbyt spspcl, irqwrd1+1
00:0C2A AD1ED0          	     1M         lda spspcl
00:0C2D 851C            	     2M         sta irqwrd1+1
00:0C2F A5A6            	    27:         lda npelrem
00:0C31 D006            	    28:         bne chkirq              ;don't handle IRQ when no pellets left
00:0C33 0E19D0          	    29:         asl vicirq              ;acknowledge IRQ
00:0C36 4C7EEA          	    30:         jmp sysirq              ;return from interrupt
                        	    31:         
00:0C39 AD19D0          	    32: chkirq: lda vicirq
00:0C3C 2902            	    33:         and #%00000010          ;check for sprite-background collision
                        	    34:         jne bgcol
00:0C3E F003            	     1M         beq :+
00:0C40 4C620C          	     2M         jmp bgcol
                        	     3M :
00:0C43 AD19D0          	    35:         lda vicirq
00:0C46 2904            	    36:         and #%00000100          ;check for sprite-sprite collision
                        	    37:         jeq fincol
00:0C48 D003            	     1M         bne :+
00:0C4A 4CAD0C          	     2M         jmp fincol
                        	     3M :
                        	    38: 
                        	    39:         ;; Handle sprite-sprite collision
00:0C4D A51C            	    40: spcol:  lda irqwrd1+1           ;read saved sprite-sprite collision register
00:0C4F 2901            	    41:         and #%00000001          ;only interested if Pac-Man sprite was involved
                        	    42:         jeq fincol
00:0C51 D003            	     1M         bne :+
00:0C53 4CAD0C          	     2M         jmp fincol
                        	     3M :
00:0C56 205C11          	    43:         jsr hidefrt             ;hide the fruit
00:0C59 204D10          	    44:         jsr scrfrt              ;score the fruit
00:0C5C 207B08          	    45:         jsr printscr            ;print the score
                        	    46:         ;; TODO: Show points earned sprite
                        	    47:         ;; (NMI timer to hide after ~1.5s)
00:0C5F 4CAD0C          	    48:         jmp fincol
                        	    49: 
                        	    50:         ;; Handle sprite-background collision:
                        	    51:         ;; Assume Pac-Man collision with pellet
00:0C62 20100A          	    52: bgcol:  jsr findpel             ;find pellet collided with & mark as eaten
00:0C65 A51C            	    53:         lda irqwrd1+1           ;load pellet address hi-byte
00:0C67 C9FF            	    54:         cmp #$ff                ;pellet found?
                        	    55:         jeq fincol              ;no, do nothing
00:0C69 D003            	     1M         bne :+
00:0C6B 4CAD0C          	     2M         jmp fincol              
                        	     3M :
00:0C6E A209            	    56:         ldx #irqblki+4
00:0C70 20350B          	    57:         jsr isenzr              ;yes, is it an energizer?
00:0C73 D008            	    58:         bne :+
00:0C75 A207            	    59:         ldx #irqblki+2
00:0C77 206610          	    60:         jsr screnzr             ;yes, score it
00:0C7A 4C820C          	    61:         jmp rmpel
00:0C7D A207            	    62: :       ldx #irqblki+2
00:0C7F 205910          	    63:         jsr scrpel              ;no, score as regular pellet
                        	    64: rmpel:  ldwptr irqwrd1, 0, irqwrd2
00:0C82 A000            	     1M         ldy #0
00:0C84 B11B            	     2M         lda (irqwrd1),y
00:0C86 851D            	     3M         sta irqwrd2
00:0C88 C8              	     4M         iny
00:0C89 B11B            	     5M         lda (irqwrd1),y
00:0C8B 851E            	     6M         sta irqwrd2+1
00:0C8D A020            	    65:         ldy #spcechr
00:0C8F 201709          	    66:         jsr printchr            ;erase pellet
00:0C92 207B08          	    67:         jsr printscr            ;print score
                        	    68:         ldbimm 6, lvlend        ;set number of level end flashes
00:0C95 A906            	     1M         lda #6
00:0C97 859B            	     2M         sta lvlend        
00:0C99 C6A6            	    69:         dec npelrem             ;decrement pellets remaining
00:0C9B 20F010          	    70:         jsr showfrt             ;conditionally enable bonus fruit
00:0C9E A5A6            	    71:         lda npelrem
                        	    72:         jne fincol
00:0CA0 F003            	     1M         beq :+
00:0CA2 4CAD0C          	     2M         jmp fincol
                        	     3M :
00:0CA5 AD15D0          	    73:         lda spena
00:0CA8 2901            	    74:         and #%00000001
00:0CAA 8D15D0          	    75:         sta spena               ;disable all but Pac-Man's sprite
00:0CAD AD19D0          	    76: fincol: lda vicirq
00:0CB0 2901            	    77:         and #%00000001
00:0CB2 D006            	    78:         bne rasirq              ;check for raster IRQ
00:0CB4 0E19D0          	    79:         asl vicirq              ;acknowledge IRQ
00:0CB7 4C7EEA          	    80:         jmp sysirq              ;return from interrupt
                        	    81: 
                        	    82:         ;; Handle raster IRQ
                        	    83:         ;; Update sprite 0 (Pac-Man) x & y coordinates
00:0CBA A5A5            	    84: rasirq: lda pacrem
00:0CBC F025            	    85:         beq finras
00:0CBE A5A3            	    86:         lda pacdir
00:0CC0 C904            	    87:         cmp #w
00:0CC2 D006            	    88:         bne chkpde
00:0CC4 CE00D0          	    89:         dec sp0x
00:0CC7 4CE10C          	    90:         jmp decrem
00:0CCA C905            	    91: chkpde: cmp #e
00:0CCC D006            	    92:         bne chkpdn
00:0CCE EE00D0          	    93:         inc sp0x
00:0CD1 4CE10C          	    94:         jmp decrem
00:0CD4 C902            	    95: chkpdn: cmp #n
00:0CD6 D006            	    96:         bne pds
00:0CD8 CE01D0          	    97:         dec sp0y
00:0CDB 4CE10C          	    98:         jmp decrem
00:0CDE EE01D0          	    99: pds:    inc sp0y
00:0CE1 C6A5            	   100: decrem: dec pacrem
00:0CE3 0E19D0          	   101: finras: asl vicirq              ;acknowledge IRQ
00:0CE6 4C7EEA          	   102:         jmp sysirq              ;return from interrupt
                        	   103: 

Source: "./src/startup.asm"
                        	    27:         include nmi.asm

Source: "nmi.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; NMI handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for CIA2 timer NMI.
                        	     6: setupnmi:
00:0CE9 78              	     7:         sei
                        	     8:         ldwimm $740d, ti2a              ;timer A fires every ~30ms (PAL)
00:0CEA A90D            	     1M         lda #<$740d
00:0CEC 8D04DD          	     2M         sta ti2a              
00:0CEF A974            	     3M         lda #>$740d
00:0CF1 8D05DD          	     4M         sta ti2a              +1
                        	     9:         ldwimm 8, ti2b                  ;timer B fires every ~240ms (PAL)
00:0CF4 A908            	     1M         lda #<8
00:0CF6 8D06DD          	     2M         sta ti2b                  
00:0CF9 A900            	     3M         lda #>8
00:0CFB 8D07DD          	     4M         sta ti2b                  +1
                        	    10:         ldbimm %00010001, ci2cra
00:0CFE A911            	     1M         lda #%00010001
00:0D00 8D0EDD          	     2M         sta ci2cra
                        	    11:         ldbimm %01010001, ci2crb
00:0D03 A951            	     1M         lda #%01010001
00:0D05 8D0FDD          	     2M         sta ci2crb
00:0D08 AD0DDD          	    12:         lda ci2icr
                        	    13:         ldbimm %10000011, ci2icr        ;allow interrupts from both timers
00:0D0B A983            	     1M         lda #%10000011
00:0D0D 8D0DDD          	     2M         sta ci2icr        
                        	    14:         ldbimm 0, pacaix                ;init Pac-Man's animation index
00:0D10 A900            	     1M         lda #0
00:0D12 85AA            	     2M         sta pacaix                
                        	    15:         ldbimm 0, enzraix               ;init energizer animation index
00:0D14 A900            	     1M         lda #0
00:0D16 85AB            	     2M         sta enzraix               
                        	    16:         ldwimm procnmi, nminv
00:0D18 A924            	     1M         lda #<procnmi
00:0D1A 8D1803          	     2M         sta nminv
00:0D1D A90D            	     3M         lda #>procnmi
00:0D1F 8D1903          	     4M         sta nminv+1
00:0D22 58              	    17:         cli
00:0D23 60              	    18:         rts
                        	    19: 
                        	    20:         ;; NMI handler. Here we animate the various in-game objects such as:
                        	    21:         ;;  - Pac-Man (in-game and death animations)
                        	    22:         ;;  - Energizers (phase)
                        	    23:         ;;  - The ghosts (regular, fright, and death animations)
                        	    24:         ;; We also handle timer events such as:
                        	    25:         ;;  - Fruit (appearance and disappearance)
                        	    26:         ;;  - Ghosts switching between scatter & chase mode
                        	    27: procnmi:
00:0D24 48              	    28:         pha
                        	    29:         phx
00:0D25 8A              	     1M         txa
00:0D26 48              	     2M         pha
                        	    30:         phy                             ;push .A, .X, and .Y onto the stack
00:0D27 98              	     1M         tya
00:0D28 48              	     2M         pha
00:0D29 AD0DDD          	    31:         lda ci2icr
00:0D2C A8              	    32:         tay
00:0D2D 2902            	    33:         and #%00000010
                        	    34:         jne timbev
00:0D2F F003            	     1M         beq :+
00:0D31 4C990D          	     2M         jmp timbev
                        	     3M :
00:0D34 98              	    35:         tya
00:0D35 2901            	    36:         and #%00000001
                        	    37:         jeq sysnmi
00:0D37 D003            	     1M         bne :+
00:0D39 4C56FE          	     2M         jmp sysnmi
                        	     3M :
                        	    38:         
                        	    39:         ;; Timer A fired: animate Pac-Man
00:0D3C A5A6            	    40: timaev: lda npelrem
                        	    41:         jeq finnmi                      ;don't animate PM if all pellets eaten
00:0D3E D003            	     1M         bne :+
00:0D40 4CD00E          	     2M         jmp finnmi                      
                        	     3M :
00:0D43 A5A5            	    42:         lda pacrem
                        	    43:         jeq finnmi                      ;don't animate PM if he's not moving
00:0D45 D003            	     1M         bne :+
00:0D47 4CD00E          	     2M         jmp finnmi                      
                        	     3M :
00:0D4A E6AA            	    44:         inc pacaix
00:0D4C A4AA            	    45:         ldy pacaix
00:0D4E C006            	    46:         cpy #6                          ;past final animation?
00:0D50 9005            	    47:         bcc :+
                        	    48:         ldbimm 0, pacaix                ;yes, reset animation index
00:0D52 A900            	     1M         lda #0
00:0D54 85AA            	     2M         sta pacaix                
00:0D56 A8              	    49:         tay
00:0D57 A5A3            	    50: :       lda pacdir                      ;no, check Pac-Man's direction
00:0D59 C902            	    51:         cmp #n
00:0D5B F013            	    52:         beq :+
00:0D5D C903            	    53:         cmp #s
00:0D5F F01A            	    54:         beq :++
00:0D61 C904            	    55:         cmp #w
00:0D63 F021            	    56:         beq :+++
                        	    57:         ldwimm pacalste, nmiwrd1        ;east
00:0D65 A9B0            	     1M         lda #<pacalste
00:0D67 8520            	     2M         sta nmiwrd1        
00:0D69 A916            	     3M         lda #>pacalste
00:0D6B 8521            	     4M         sta nmiwrd1        +1
00:0D6D 4C8E0D          	    58:         jmp ldanim
                        	    59: :       ldwimm pacalstn, nmiwrd1        ;north
00:0D70 A99E            	     1M         lda #<pacalstn
00:0D72 8520            	     2M         sta nmiwrd1        
00:0D74 A916            	     3M         lda #>pacalstn
00:0D76 8521            	     4M         sta nmiwrd1        +1
00:0D78 4C8E0D          	    60:         jmp ldanim
                        	    61: :       ldwimm pacalsts, nmiwrd1        ;south
00:0D7B A9A4            	     1M         lda #<pacalsts
00:0D7D 8520            	     2M         sta nmiwrd1        
00:0D7F A916            	     3M         lda #>pacalsts
00:0D81 8521            	     4M         sta nmiwrd1        +1
00:0D83 4C8E0D          	    62:         jmp ldanim
                        	    63: :       ldwimm pacalstw, nmiwrd1        ;west
00:0D86 A9AA            	     1M         lda #<pacalstw
00:0D88 8520            	     2M         sta nmiwrd1        
00:0D8A A916            	     3M         lda #>pacalstw
00:0D8C 8521            	     4M         sta nmiwrd1        +1
00:0D8E 18              	    64: ldanim: clc
00:0D8F B120            	    65:         lda (nmiwrd1),y
00:0D91 6940            	    66:         adc #sp0loc
00:0D93 8DF84F          	    67:         sta sp0ptr
00:0D96 4CD00E          	    68:         jmp finnmi
                        	    69:         
                        	    70:         ;; Timer B fired:
                        	    71:         ;;  - animate energizers
                        	    72:         ;;  - flash maze on level end
                        	    73:         ;;  - hide fruit
00:0D99 A5A9            	    74: timbev: lda frtena
00:0D9B F00C            	    75:         beq :++                         ;fruit enabled?
00:0D9D C926            	    76:         cmp #frttim
00:0D9F D006            	    77:         bne :+                          ;yes, fruit timer expired?
00:0DA1 205C11          	    78:         jsr hidefrt                     ;yes, hide fruit
00:0DA4 4CA90D          	    79:         jmp :++
00:0DA7 E6A9            	    80: :       inc frtena                      ;no, increment timer
00:0DA9 A5A6            	    81: :       lda npelrem
                        	    82:         jeq flshmaz                     ;all pellets eaten, flash maze
00:0DAB D003            	     1M         bne :+
00:0DAD 4C160E          	     2M         jmp flshmaz                     
                        	     3M :
00:0DB0 A5AB            	    83:         lda enzraix
00:0DB2 F037            	    84:         beq tic
00:0DB4 C6AB            	    85:         dec enzraix
00:0DB6 A003            	    86:         ldy #3
                        	    87: tocloop:
                        	    88:         jmi finnmi
00:0DB8 1003            	     1M         bpl :+
00:0DBA 4CD00E          	     2M         jmp finnmi
                        	     3M :
                        	    89:         phy                             ;save loop counter onto stack        
00:0DBD 98              	     1M         tya
00:0DBE 48              	     2M         pha
00:0DBF B99A16          	    90:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0DC2 A20A            	    91:         ldx #nmiblki
00:0DC4 20C009          	    92:         jsr pelladr                     ;load pellet address into nmiwrd1
00:0DC7 A002            	    93:         ldy #2
00:0DC9 B120            	    94:         lda (nmiwrd1),y                 ;load pellet state
00:0DCB D006            	    95:         bne :+                          ;has the pellet been eaten?
                        	    96:         ply                             ;yes, next energizer
00:0DCD 68              	     1M         pla
00:0DCE A8              	     2M         tay
00:0DCF 88              	    97:         dey
00:0DD0 4CB80D          	    98:         jmp tocloop
                        	    99: :       ldwptr nmiwrd1, 0, nmiwrd2      ;energizer not eaten
00:0DD3 A000            	     1M         ldy #0
00:0DD5 B120            	     2M         lda (nmiwrd1),y
00:0DD7 8522            	     3M         sta nmiwrd2      
00:0DD9 C8              	     4M         iny
00:0DDA B120            	     5M         lda (nmiwrd1),y
00:0DDC 8523            	     6M         sta nmiwrd2      +1
00:0DDE A00F            	   100:         ldy #ltgrey
00:0DE0 A20C            	   101:         ldx #nmiblki+2
00:0DE2 200409          	   102:         jsr printcol                    ;colour energizer light grey
                        	   103:         ply                             ;pop loop counter off the stack
00:0DE5 68              	     1M         pla
00:0DE6 A8              	     2M         tay
00:0DE7 88              	   104:         dey
00:0DE8 4CB80D          	   105:         jmp tocloop
00:0DEB E6AB            	   106: tic:    inc enzraix
00:0DED A003            	   107:         ldy #3
                        	   108: ticloop:
                        	   109:         jmi finnmi
00:0DEF 1003            	     1M         bpl :+
00:0DF1 4CD00E          	     2M         jmp finnmi
                        	     3M :
                        	   110:         phy                             ;push loop counter onto stack
00:0DF4 98              	     1M         tya
00:0DF5 48              	     2M         pha
00:0DF6 B99A16          	   111:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0DF9 A20A            	   112:         ldx #nmiblki
00:0DFB 20C009          	   113:         jsr pelladr                     ;load pellet address into nmiwrd1
                        	   114:         ldwptr nmiwrd1, 0, nmiwrd2
00:0DFE A000            	     1M         ldy #0
00:0E00 B120            	     2M         lda (nmiwrd1),y
00:0E02 8522            	     3M         sta nmiwrd2
00:0E04 C8              	     4M         iny
00:0E05 B120            	     5M         lda (nmiwrd1),y
00:0E07 8523            	     6M         sta nmiwrd2+1
00:0E09 A00B            	   115:         ldy #dkgrey
00:0E0B A20C            	   116:         ldx #nmiblki+2
00:0E0D 200409          	   117:         jsr printcol                    ;colour energizer dark grey
                        	   118:         ply                             ;pop loop counter off the stack
00:0E10 68              	     1M         pla
00:0E11 A8              	     2M         tay
00:0E12 88              	   119:         dey
00:0E13 4CEF0D          	   120:         jmp ticloop
                        	   121: flshmaz:
00:0E16 A59B            	   122:         lda lvlend                      ;read number of flashes remaining
                        	   123:         jeq finnmi
00:0E18 D003            	     1M         bne :+
00:0E1A 4CD00E          	     2M         jmp finnmi
                        	     3M :
00:0E1D 6A              	   124:         ror
                        	   125:         jcc flshwht                     ;flash white on even, blue on odd
00:0E1E B003            	     1M         bcs :+
00:0E20 4C7A0E          	     2M         jmp flshwht                     
                        	     3M :
00:0E23 A200            	   126:         ldx #0
                        	   127: setblu1:
00:0E25 BD00D8          	   128:         lda colmem,x                    ;load value in colmem at pos
00:0E28 290F            	   129:         and #%00001111                  ;mask out high nybble
00:0E2A C901            	   130:         cmp #$01
00:0E2C D005            	   131:         bne :+                          ;is colour = white?
00:0E2E A906            	   132:         lda #$06
00:0E30 9D00D8          	   133:         sta colmem,x                    ;yes, make it blue
00:0E33 E8              	   134: :       inx                     
00:0E34 E0FA            	   135:         cpx #250
00:0E36 D0ED            	   136:         bne setblu1
00:0E38 A200            	   137:         ldx #0
                        	   138: setblu2:
00:0E3A BDFAD8          	   139:         lda colmem+250,x                ;load value in colmem at pos
00:0E3D 290F            	   140:         and #%00001111                  ;mask out high nybble
00:0E3F C901            	   141:         cmp #$01
00:0E41 D005            	   142:         bne :+                          ;is colour = white?
00:0E43 A906            	   143:         lda #$06
00:0E45 9DFAD8          	   144:         sta colmem+250,x                ;yes, make it blue
00:0E48 E8              	   145: :       inx                     
00:0E49 E0FA            	   146:         cpx #250
00:0E4B D0ED            	   147:         bne setblu2
00:0E4D A200            	   148:         ldx #0
                        	   149: setblu3:
00:0E4F BDF4D9          	   150:         lda colmem+500,x                ;load value in colmem at pos
00:0E52 290F            	   151:         and #%00001111                  ;mask out high nybble
00:0E54 C901            	   152:         cmp #$01
00:0E56 D005            	   153:         bne :+                          ;is colour = white?
00:0E58 A906            	   154:         lda #$06
00:0E5A 9DF4D9          	   155:         sta colmem+500,x                ;yes, make it blue
00:0E5D E8              	   156: :       inx                     
00:0E5E E0FA            	   157:         cpx #250
00:0E60 D0ED            	   158:         bne setblu3
00:0E62 A200            	   159:         ldx #0
                        	   160: setblu4:
00:0E64 BDEEDA          	   161:         lda colmem+750,x                ;load value in colmem at pos
00:0E67 290F            	   162:         and #%00001111                  ;mask out high nybble
00:0E69 C901            	   163:         cmp #$01
00:0E6B D005            	   164:         bne :+                          ;is colour = white?
00:0E6D A906            	   165:         lda #$06
00:0E6F 9DEEDA          	   166:         sta colmem+750,x                ;yes, make it blue
00:0E72 E8              	   167: :       inx
00:0E73 E0FA            	   168:         cpx #250
00:0E75 D0ED            	   169:         bne setblu4
00:0E77 4CCE0E          	   170:         jmp flshfin
                        	   171: flshwht:
00:0E7A A200            	   172:         ldx #0
                        	   173: setwht1:
00:0E7C BD00D8          	   174:         lda colmem,x                    ;load value in colmem at pos
00:0E7F 290F            	   175:         and #%00001111                  ;mask out high nybble
00:0E81 C906            	   176:         cmp #$06
00:0E83 D005            	   177:         bne :+                          ;is colour = blue?
00:0E85 A901            	   178:         lda #$01
00:0E87 9D00D8          	   179:         sta colmem,x                    ;yes, make it white
00:0E8A E8              	   180: :       inx                     
00:0E8B E0FA            	   181:         cpx #250
00:0E8D D0ED            	   182:         bne setwht1
00:0E8F A200            	   183:         ldx #0
                        	   184: setwht2:
00:0E91 BDFAD8          	   185:         lda colmem+250,x                ;load value in colmem at pos
00:0E94 290F            	   186:         and #%00001111                  ;mask out high nybble
00:0E96 C906            	   187:         cmp #$06
00:0E98 D005            	   188:         bne :+                          ;is colour = blue?
00:0E9A A901            	   189:         lda #$01
00:0E9C 9DFAD8          	   190:         sta colmem+250,x                ;yes, make it white
00:0E9F E8              	   191: :       inx                     
00:0EA0 E0FA            	   192:         cpx #250
00:0EA2 D0ED            	   193:         bne setwht2
00:0EA4 A200            	   194:         ldx #0
                        	   195: setwht3:
00:0EA6 BDF4D9          	   196:         lda colmem+500,x                ;load value in colmem at pos
00:0EA9 290F            	   197:         and #%00001111                  ;mask out high nybble
00:0EAB C906            	   198:         cmp #$06
00:0EAD D005            	   199:         bne :+                          ;is colour = blue?
00:0EAF A901            	   200:         lda #$01
00:0EB1 9DF4D9          	   201:         sta colmem+500,x                ;yes, make it white
00:0EB4 E8              	   202: :       inx                     
00:0EB5 E0FA            	   203:         cpx #250
00:0EB7 D0ED            	   204:         bne setwht3
00:0EB9 A200            	   205:         ldx #0
                        	   206: setwht4:
00:0EBB BDEEDA          	   207:         lda colmem+750,x                ;load value in colmem at pos
00:0EBE 290F            	   208:         and #%00001111                  ;mask out high nybble
00:0EC0 C906            	   209:         cmp #$06
00:0EC2 D005            	   210:         bne :+                          ;is colour = blue?
00:0EC4 A901            	   211:         lda #$01
00:0EC6 9DEEDA          	   212:         sta colmem+750,x                ;yes, make it white
00:0EC9 E8              	   213: :       inx                     
00:0ECA E0FA            	   214:         cpx #250
00:0ECC D0ED            	   215:         bne setwht4
                        	   216: flshfin:
00:0ECE C69B            	   217:         dec lvlend                      ;decrement flashes remaining
                        	   218:         
                        	   219:         ;; Restore machine state & return from NMI
                        	   220: finnmi: ply
00:0ED0 68              	     1M         pla
00:0ED1 A8              	     2M         tay
                        	   221:         plx
00:0ED2 68              	     1M         pla
00:0ED3 AA              	     2M         tax
00:0ED4 68              	   222:         pla                             ;restore .Y, .X, and .A from stack
00:0ED5 40              	   223:         rti
                        	   224: 

Source: "./src/startup.asm"
                        	    28:         include game.asm

Source: "game.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Game-logic related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Start a new game
                        	     6: newgame:
00:0ED6 20D309          	     7:         jsr fillmaze            ;fill maze with pellets
00:0ED9 20010F          	     8:         jsr clrzp
                        	     9:         ldbimm maxpell, npelrem
00:0EDC A9B6            	     1M         lda #maxpell
00:0EDE 85A6            	     2M         sta npelrem
                        	    10:         ldbimm maxmen, nmenrem        
00:0EE0 A903            	     1M         lda #maxmen
00:0EE2 85A7            	     2M         sta nmenrem        
00:0EE4 202C0F          	    11:         jsr initpac
00:0EE7 4C650F          	    12:         jmp gameloop
                        	    13: 
                        	    14:         ;; Setup next game level
                        	    15: nextlvl:
00:0EEA E6A8            	    16:         inc lvlnum
00:0EEC 20D309          	    17:         jsr fillmaze
00:0EEF 205709          	    18:         jsr fillcolmem
00:0EF2 201D0F          	    19:         jsr clrbuf
                        	    20:         ldbimm maxpell, npelrem
00:0EF5 A9B6            	     1M         lda #maxpell
00:0EF7 85A6            	     2M         sta npelrem
                        	    21:         ldbimm 0, frtena
00:0EF9 A900            	     1M         lda #0
00:0EFB 85A9            	     2M         sta frtena
00:0EFD 202C0F          	    22:         jsr initpac
00:0F00 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Clear out ZP memory used to avoid garbage data
                        	    26: clrzp:  filmem $a3, 9, 0        ;$a3 - $ab
00:0F01 A900            	     1M         lda #0        
00:0F03 A209            	     2M         ldx #9        
00:0F05 F006            	     3M :       beq :+
00:0F07 95A3            	     4M         sta $a3,x
00:0F09 CA              	     5M         dex
00:0F0A 4C050F          	     6M         jmp :-
00:0F0D 95A3            	     7M :       sta $a3,x
                        	    27:         filmem $f7, 9, 0        ;$f7 - $ff
00:0F0F A900            	     1M         lda #0        
00:0F11 A209            	     2M         ldx #9        
00:0F13 F006            	     3M :       beq :+
00:0F15 95F7            	     4M         sta $f7,x
00:0F17 CA              	     5M         dex
00:0F18 4C130F          	     6M         jmp :-
00:0F1B 95F7            	     7M :       sta $f7,x
                        	    28:         
                        	    29:         ;; Clear out temporary buffer to avoid garbage data
                        	    30: clrbuf: filmem buf, 15, 0       ;$16 - $24
00:0F1D A900            	     1M         lda #0       
00:0F1F A20F            	     2M         ldx #15        
00:0F21 F006            	     3M :       beq :+
00:0F23 9516            	     4M         sta buf,x
00:0F25 CA              	     5M         dex
00:0F26 4C210F          	     6M         jmp :-
00:0F29 9516            	     7M :       sta buf,x
00:0F2B 60              	    31:         rts
                        	    32: 
                        	    33:         ;; Initialize Pac-Man
                        	    34: initpac:
                        	    35:         ;; Sprite 0: Pac-Man
                        	    36:         ldbimm sp0loc, sp0ptr   ;set sprite 0 pointer
00:0F2C A940            	     1M         lda #sp0loc
00:0F2E 8DF84F          	     2M         sta sp0ptr   
00:0F31 AD3F50          	    37:         lda sp0mem+$3f          ;read byte 63
00:0F34 290F            	    38:         and #%00001111          ;mask out hi nybble
00:0F36 8D27D0          	    39:         sta sp0col              ;set sprite 0 (Pac-Man) colour        
00:0F39 A931            	    40:         lda #pacstnd
00:0F3B A200            	    41:         ldx #0
00:0F3D 20450B          	    42:         jsr nodeadr             ;get address of Pac's starting node
                        	    43:         ldbptr wrd1, 0, sp0x    ;set Pac's x loc
00:0F40 A000            	     1M         ldy #0
00:0F42 B116            	     2M         lda (wrd1),y
00:0F44 8D00D0          	     3M         sta sp0x    
                        	    44:         ldbptr wrd1, 1, sp0y    ;set Pac's y loc
00:0F47 A001            	     1M         ldy #1
00:0F49 B116            	     2M         lda (wrd1),y
00:0F4B 8D01D0          	     3M         sta sp0y    
00:0F4E A901            	    45:         lda #%00000001
00:0F50 8D15D0          	    46:         sta spena               ;enable sprite 0 (Pac-Man)
                        	    47:         ;; Init Pac's direction & calc distance between source & target nodes
                        	    48:         ldbimm w, pacdir        ;set Pac's initial direction to west
00:0F53 A904            	     1M         lda #w
00:0F55 85A3            	     2M         sta pacdir        
                        	    49:         ldbimm pacstnd, pacsrc  ;set Pac's starting node as source node
00:0F57 A931            	     1M         lda #pacstnd
00:0F59 859E            	     2M         sta pacsrc  
                        	    50:         ldbptr wrd1, w, pactar  ;set western neighbour as target node
00:0F5B A004            	     1M         ldy #w
00:0F5D B116            	     2M         lda (wrd1),y
00:0F5F 859F            	     3M         sta pactar  
00:0F61 20580B          	    51:         jsr setnodis            ;calculate distance between source & target
00:0F64 60              	    52:         rts
                        	    53:         
                        	    54:         ;; Main game loop
                        	    55: gameloop:
00:0F65 A5A6            	    56:         lda npelrem             ;check remaining pellets
00:0F67 D00C            	    57:         bne rdinpt              ;if != 0 read joystick input
00:0F69 A2FF            	    58: :       ldx #$ff
00:0F6B CA              	    59: :       dex
00:0F6C D0FD            	    60:         bne :-                  ;delay
00:0F6E A59B            	    61:         lda lvlend              ;check if end level animation finished
00:0F70 D0F7            	    62:         bne :--                 ;no? wait a bit longer
00:0F72 20EA0E          	    63:         jsr nextlvl 
00:0F75 209C09          	    64: rdinpt: jsr readjoy2
00:0F78 A901            	    65:         lda #1
00:0F7A C596            	    66:         cmp joyx
00:0F7C F009            	    67:         beq move
00:0F7E B00E            	    68:         bcs chky
                        	    69:         ldbimm w, tmp
00:0F80 A904            	     1M         lda #w
00:0F82 851A            	     2M         sta tmp
00:0F84 4CA40F          	    70:         jmp chkmov
                        	    71: move:   ldbimm e, tmp
00:0F87 A905            	     1M         lda #e
00:0F89 851A            	     2M         sta tmp
00:0F8B 4CA40F          	    72:         jmp chkmov
00:0F8E A901            	    73: chky:   lda #1
00:0F90 C597            	    74:         cmp joyy
00:0F92 F00C            	    75:         beq movs
                        	    76:         jcs setnsrc
00:0F94 9003            	     1M         bcc :+
00:0F96 4C0410          	     2M         jmp setnsrc
                        	     3M :
                        	    77:         ldbimm n, tmp
00:0F99 A902            	     1M         lda #n
00:0F9B 851A            	     2M         sta tmp
00:0F9D 4CA40F          	    78:         jmp chkmov
                        	    79: movs:   ldbimm s, tmp
00:0FA0 A903            	     1M         lda #s
00:0FA2 851A            	     2M         sta tmp
00:0FA4 A5A5            	    80: chkmov: lda pacrem
00:0FA6 38              	    81:         sec
00:0FA7 E903            	    82:         sbc #3
                        	    83:         jcs chkrvw
00:0FA9 9003            	     1M         bcc :+
00:0FAB 4CB10F          	     2M         jmp chkrvw
                        	     3M :
00:0FAE 4C0410          	    84:         jmp setnsrc
00:0FB1 A5A3            	    85: chkrvw: lda pacdir
00:0FB3 C904            	    86:         cmp #w
00:0FB5 D00C            	    87:         bne chkrve
00:0FB7 A51A            	    88:         lda tmp
00:0FB9 C905            	    89:         cmp #e
                        	    90:         jne setnsrc
00:0FBB F003            	     1M         beq :+
00:0FBD 4C0410          	     2M         jmp setnsrc
                        	     3M :
00:0FC0 4CEC0F          	    91:         jmp reverse
00:0FC3 C905            	    92: chkrve: cmp #e
00:0FC5 D00C            	    93:         bne chkrvn
00:0FC7 A51A            	    94:         lda tmp
00:0FC9 C904            	    95:         cmp #w
                        	    96:         jne setnsrc
00:0FCB F003            	     1M         beq :+
00:0FCD 4C0410          	     2M         jmp setnsrc
                        	     3M :
00:0FD0 4CEC0F          	    97:         jmp reverse
00:0FD3 C902            	    98: chkrvn: cmp #n
00:0FD5 D00C            	    99:         bne revs
00:0FD7 A51A            	   100:         lda tmp
00:0FD9 C903            	   101:         cmp #s
                        	   102:         jne setnsrc
00:0FDB F003            	     1M         beq :+
00:0FDD 4C0410          	     2M         jmp setnsrc
                        	     3M :
00:0FE0 4CEC0F          	   103:         jmp reverse
                        	   104: revs:
00:0FE3 A51A            	   105:         lda tmp
00:0FE5 C902            	   106:         cmp #n
                        	   107:         jne setnsrc
00:0FE7 F003            	     1M         beq :+
00:0FE9 4C0410          	     2M         jmp setnsrc
                        	     3M :
                        	   108: reverse:
                        	   109:         cpbyt tmp, pacdir
00:0FEC A51A            	     1M         lda tmp
00:0FEE 85A3            	     2M         sta pacdir
                        	   110:         swpbyt pacsrc, pactar
00:0FF0 A59E            	     1M         lda pacsrc
00:0FF2 48              	     2M         pha                     ;load byt1 & push onto the stack
00:0FF3 A59F            	     3M         lda pactar
00:0FF5 859E            	     4M         sta pacsrc               ;load byt2 & save to byt1
00:0FF7 68              	     5M         pla
00:0FF8 859F            	     6M         sta pactar               ;pop byt1 off the stack & save to byt2
00:0FFA A5A4            	   111:         lda pacdis
00:0FFC 38              	   112:         sec
00:0FFD E5A5            	   113:         sbc pacrem
00:0FFF 85A5            	   114:         sta pacrem
00:1001 4C650F          	   115:         jmp gameloop
                        	   116: 
                        	   117:         ;; Check if Pac-Man arrived at target & set new target
                        	   118: setnsrc:
00:1004 A5A5            	   119:         lda pacrem
                        	   120:         jne gameloop            ;return to gameloop if pellets remaining
00:1006 F003            	     1M         beq :+
00:1008 4C650F          	     2M         jmp gameloop            
                        	     3M :
                        	   121:         cpbyt pactar, pacsrc    ;set target node as new source node
00:100B A59F            	     1M         lda pactar
00:100D 859E            	     2M         sta pacsrc    
00:100F A200            	   122:         ldx #blki
00:1011 20450B          	   123:         jsr nodeadr             ;load node address into wrd1
                        	   124:         ldbptr wrd1, 0, sp0x    ;store node x loc into sp0x
00:1014 A000            	     1M         ldy #0
00:1016 B116            	     2M         lda (wrd1),y
00:1018 8D00D0          	     3M         sta sp0x    
                        	   125:         ldbptr wrd1, 1, sp0y    ;store node y loc into sp0y
00:101B A001            	     1M         ldy #1
00:101D B116            	     2M         lda (wrd1),y
00:101F 8D01D0          	     3M         sta sp0y    
00:1022 A41A            	   126:         ldy tmp                 ;new direction?
00:1024 F014            	   127:         beq chkcon              ;no, check for node in current direction
00:1026 B116            	   128:         lda (wrd1),y            ;yes, load node in new dir
00:1028 C9FF            	   129:         cmp #$ff
00:102A F00E            	   130:         beq chkcon
00:102C C91E            	   131:         cmp #gsthmnd
00:102E F00A            	   132:         beq chkcon
00:1030 859F            	   133:         sta pactar
00:1032 84A3            	   134:         sty pacdir
00:1034 20580B          	   135:         jsr setnodis
00:1037 4C650F          	   136:         jmp gameloop
00:103A A4A3            	   137: chkcon: ldy pacdir
00:103C B116            	   138:         lda (wrd1),y
00:103E C9FF            	   139:         cmp #$ff
                        	   140:         jeq gameloop            ;if nowhere to go, return to gameloop
00:1040 D003            	     1M         bne :+
00:1042 4C650F          	     2M         jmp gameloop            
                        	     3M :
00:1045 859F            	   141:         sta pactar              ;set new target...
00:1047 20580B          	   142:         jsr setnodis            ;... and calculate distance
00:104A 4C650F          	   143:         jmp gameloop
                        	   144: 

Source: "./src/startup.asm"
                        	    29:         include score.asm

Source: "score.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Score related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Score fruit (pts vary by level)
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Reads:
                        	     8:         ;;  - lvlnum
                        	     9:         ;; Writes:
                        	    10:         ;;  - irqwrd2
                        	    11:         ;;  - score
00:104D 209110          	    12: scrfrt: jsr lvlfrtpts           ;read fruit points
00:1050 841B            	    13:         sty irqwrd1
00:1052 851C            	    14:         sta irqwrd1+1
00:1054 A205            	    15:         ldx #irqblki
00:1056 4C7310          	    16:         jmp addscr
                        	    17:         
                        	    18:         ;; Score pellet (10 pts)
                        	    19:         ;; Reads:
                        	    20:         ;;  - .X (offset to memory block)
                        	    21:         ;; Writes:
                        	    22:         ;;  - score
00:1059 A910            	    23: scrpel: lda #pellpts
00:105B 9516            	    24:         sta buf,x
00:105D E8              	    25:         inx
00:105E A900            	    26:         lda #0
00:1060 9516            	    27:         sta buf,x
00:1062 CA              	    28:         dex
00:1063 4C7310          	    29:         jmp addscr
                        	    30: 
                        	    31:         ;; Score energizer (50 pts)
                        	    32:         ;; Reads:
                        	    33:         ;;  - .X (offset to memory block)
                        	    34:         ;; Writes:
                        	    35:         ;;  - 1st word in memory block
                        	    36:         ;;  - score
                        	    37: screnzr:
00:1066 A950            	    38:         lda #enzrpts
00:1068 9516            	    39:         sta buf,x
00:106A E8              	    40:         inx
00:106B A900            	    41:         lda #0
00:106D 9516            	    42:         sta buf,x
00:106F CA              	    43:         dex
00:1070 4C7310          	    44:         jmp addscr
                        	    45:       
                        	    46:         ;; Add 16-bit BCD value to score
                        	    47:         ;; Reads:
                        	    48:         ;;  - .X: index into buffer to access memory block
                        	    49:         ;;  - 1st word in memory block containing 4 BCD digits
                        	    50:         ;; Writes:
                        	    51:         ;;  - score
00:1073 F8              	    52: addscr: sed
00:1074 18              	    53:         clc
00:1075 A5FC            	    54:         lda score
00:1077 7516            	    55:         adc buf,x
00:1079 85FC            	    56:         sta score
00:107B A5FD            	    57:         lda score+1
00:107D E8              	    58:         inx
00:107E 7516            	    59:         adc buf,x 
00:1080 85FD            	    60:         sta score+1
00:1082 A5FE            	    61:         lda score+2
00:1084 6900            	    62:         adc #0
00:1086 85FE            	    63:         sta score+2
00:1088 A5FF            	    64:         lda score+3
00:108A 6900            	    65:         adc #0
00:108C 85FF            	    66:         sta score+3
00:108E D8              	    67:         cld
00:108F CA              	    68:         dex
00:1090 60              	    69:         rts
                        	    70: 

Source: "./src/startup.asm"
                        	    30:         include fruit.asm

Source: "fruit.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Fruit related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Get fruit bonus points by level number
                        	     6:         ;; Reads:
                        	     7:         ;;  - lvlnum
                        	     8:         ;;  - frtsptbl
                        	     9:         ;; Write:
                        	    10:         ;;  - .Y (points lo-byte)
                        	    11:         ;;  - .A (points hi-byte)
                        	    12:         ;; Clobbers:
                        	    13:         ;;  - .X
                        	    14: lvlfrtpts:
00:1091 A200            	    15:         ldx #0
00:1093 BDFB16          	    16: :       lda frtsptbl,x
00:1096 C9FF            	    17:         cmp #$ff
00:1098 F019            	    18:         beq :++
00:109A C5A8            	    19:         cmp lvlnum
00:109C F009            	    20:         beq :+
00:109E E8              	    21:         inx
00:109F E8              	    22:         inx
00:10A0 E8              	    23:         inx
00:10A1 E8              	    24:         inx
00:10A2 E8              	    25:         inx
00:10A3 E8              	    26:         inx
00:10A4 4C9310          	    27:         jmp :-
00:10A7 E8              	    28: :       inx
00:10A8 E8              	    29:         inx
00:10A9 E8              	    30:         inx
00:10AA E8              	    31:         inx
00:10AB BDFB16          	    32:         lda frtsptbl,x          ;load points (lo)
00:10AE A8              	    33:         tay
00:10AF E8              	    34:         inx
00:10B0 BDFB16          	    35:         lda frtsptbl,x          ;load points (hi)
00:10B3 60              	    36: :       rts
                        	    37: 
                        	    38:         ;; Get fruit sprite index by level number
                        	    39:         ;; Reads:
                        	    40:         ;;  - lvlnum
                        	    41:         ;;  - frtsptbl
                        	    42:         ;; Writes:
                        	    43:         ;;  - .A (fruit sprite index)
                        	    44:         ;; Clobbers:
                        	    45:         ;;  - .X
                        	    46: lvlfrtspix:
00:10B4 A200            	    47:         ldx #0
00:10B6 BDFB16          	    48: :       lda frtsptbl,x
00:10B9 C9FF            	    49:         cmp #$ff        
00:10BB F011            	    50:         beq :++                 ;end marker?
00:10BD C5A8            	    51:         cmp lvlnum
00:10BF F009            	    52:         beq :+                  ;found row for level?
00:10C1 E8              	    53:         inx
00:10C2 E8              	    54:         inx
00:10C3 E8              	    55:         inx
00:10C4 E8              	    56:         inx
00:10C5 E8              	    57:         inx
00:10C6 E8              	    58:         inx
00:10C7 4CB610          	    59:         jmp :-                  ;no, keep looking
00:10CA E8              	    60: :       inx                     ;yes...
00:10CB BDFB16          	    61:         lda frtsptbl,x          ;...load sprite index
00:10CE 60              	    62: :       rts
                        	    63: 
                        	    64:         ;; Get fruit sprite shape memory offset
                        	    65:         ;; Reads:
                        	    66:         ;;  - lvlnum
                        	    67:         ;;  - frtsptbl
                        	    68:         ;; Writes:
                        	    69:         ;;  - .Y (offset lo byte)
                        	    70:         ;;  - .A (offset hi byte)
                        	    71:         ;; Clobbers:
                        	    72:         ;;  - .X
                        	    73: lvlfrtspof:
00:10CF A200            	    74:         ldx #0
00:10D1 BDFB16          	    75: :       lda frtsptbl,x
00:10D4 C9FF            	    76:         cmp #$ff        
00:10D6 F017            	    77:         beq :++                 ;end marker?
00:10D8 C5A8            	    78:         cmp lvlnum
00:10DA F009            	    79:         beq :+                  ;found row for level?
00:10DC E8              	    80:         inx
00:10DD E8              	    81:         inx
00:10DE E8              	    82:         inx
00:10DF E8              	    83:         inx
00:10E0 E8              	    84:         inx
00:10E1 E8              	    85:         inx
00:10E2 4CD110          	    86:         jmp :-                  ;no, keep looking
00:10E5 E8              	    87: :       inx                     ;yes...
00:10E6 E8              	    88:         inx
00:10E7 BDFB16          	    89:         lda frtsptbl,x          ;load offset (lo)
00:10EA A8              	    90:         tay
00:10EB E8              	    91:         inx
00:10EC BDFB16          	    92:         lda frtsptbl,x          ;load offset (hi)
00:10EF 60              	    93: :       rts
                        	    94:         
                        	    95:         ;; Check number of pellets remaining and enable fruit if
                        	    96:         ;; - 130 pellets remaining OR
                        	    97:         ;; - 55 pellets remaining
                        	    98:         ;; May only be called from IRQ handler!
                        	    99:         ;; Clobbers:
                        	   100:         ;;  - irqwrd1
                        	   101: showfrt:
00:10F0 A5A6            	   102:         lda npelrem
00:10F2 C982            	   103:         cmp #130
00:10F4 F005            	   104:         beq :+
00:10F6 C937            	   105:         cmp #55
00:10F8 F001            	   106:         beq :+
00:10FA 60              	   107:         rts
                        	   108:         ;; Set sprite pointers
00:10FB 20B410          	   109: :       jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:10FE 18              	   110:         clc
00:10FF 6940            	   111:         adc #sp0loc
00:1101 8DF94F          	   112:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	   113:         ina                     ;increment .A
00:1104 A8              	     1M         tay
00:1105 C8              	     2M         iny
00:1106 98              	     3M         tya
00:1107 8DFA4F          	   114:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	   115:         ;; Set sprite colours
00:110A 20CF10          	   116:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:110D 841B            	   117:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:110F 851C            	   118:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	   119:         adcwimm sp0mem, irqwrd1
00:1111 18              	     1M         clc
00:1112 A51B            	     2M         lda irqwrd1
00:1114 6900            	     3M         adc #<sp0mem
00:1116 851B            	     4M         sta irqwrd1
00:1118 A51C            	     5M         lda irqwrd1+1
00:111A 6950            	     6M         adc #>sp0mem
00:111C 851C            	     7M         sta irqwrd1+1
00:111E A03F            	   120:         ldy #$3f                ;index to sprite colour value
00:1120 B11B            	   121:         lda (irqwrd1),y         ;load sprite colour value
00:1122 290F            	   122:         and #%00001111          ;mask out hi nybble
00:1124 8D28D0          	   123:         sta sp0col+1            ;write to sprite 1 colour register 
                        	   124:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:1127 18              	     1M         clc
00:1128 A51B            	     2M         lda irqwrd1  
00:112A 6940            	     3M         adc #<$0040
00:112C 851B            	     4M         sta irqwrd1  
00:112E A51C            	     5M         lda irqwrd1  +1
00:1130 6900            	     6M         adc #>$0040
00:1132 851C            	     7M         sta irqwrd1  +1
00:1134 B11B            	   125:         lda (irqwrd1),y         ;load sprite colour value
00:1136 290F            	   126:         and #%00001111          ;mask out hi nybble
00:1138 8D29D0          	   127:         sta sp0col+2            ;write to sprite 2 colour register
                        	   128:         ;; Set sprite x,y locations
                        	   129:         ldbimm frxpos, sp1x
00:113B A967            	     1M         lda #frxpos
00:113D 8D02D0          	     2M         sta sp1x
                        	   130:         ldbimm frxpos, sp2x
00:1140 A967            	     1M         lda #frxpos
00:1142 8D04D0          	     2M         sta sp2x
                        	   131:         ldbimm frypos, sp1y
00:1145 A9A2            	     1M         lda #frypos
00:1147 8D03D0          	     2M         sta sp1y
                        	   132:         ldbimm frypos, sp2y
00:114A A9A2            	     1M         lda #frypos
00:114C 8D05D0          	     2M         sta sp2y
                        	   133:         ;; Enable sprites 1+2
00:114F AD15D0          	   134:         lda spena
00:1152 0906            	   135:         ora #%00000110
00:1154 8D15D0          	   136:         sta spena
                        	   137:         ;; Start fruit timer countdown
                        	   138:         ldbimm 1, frtena
00:1157 A901            	     1M         lda #1
00:1159 85A9            	     2M         sta frtena
00:115B 60              	   139:         rts
                        	   140: 
                        	   141:         ;; Hide fruit
                        	   142: hidefrt:
00:115C AD15D0          	   143:         lda spena
00:115F 29F9            	   144:         and #%11111001
00:1161 8D15D0          	   145:         sta spena               ;disable sprites 1+2
                        	   146:         ldbimm 0, frtena        ;disable fruit timer
00:1164 A900            	     1M         lda #0
00:1166 85A9            	     2M         sta frtena        
00:1168 60              	   147:         rts
                        	   148: 

Source: "./src/startup.asm"
                        	    31: 
                        	    32:         ;; Include tables
                        	    33:         include tables.asm

Source: "tables.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Data table definitions
                        	     3:         ;; ============================================================
                        	     4:         
                        	     5:         ;; Node table
                        	     6:         ;; Format:        
                        	     7:         ;;  - byte x,y (node loc in sprite coords)
                        	     8:         ;;  - byte n,s,w,e (indices of neighboring nodes)
                        	     9: nodetbl:
                        	    10:         ;; Row 1
00:1169 20              	    11:         byte $20,$3a,$ff,$06,$ff,$01
00:116A 3A
00:116B FF
00:116C 06
00:116D FF
00:116E 01
00:116F 40              	    12:         byte $40,$3a,$ff,$07,$00,$02
00:1170 3A
00:1171 FF
00:1172 07
00:1173 00
00:1174 02
00:1175 60              	    13:         byte $60,$3a,$ff,$09,$01,$ff
00:1176 3A
00:1177 FF
00:1178 09
00:1179 01
00:117A FF
00:117B 70              	    14:         byte $70,$3a,$ff,$0a,$ff,$04
00:117C 3A
00:117D FF
00:117E 0A
00:117F FF
00:1180 04
00:1181 90              	    15:         byte $90,$3a,$ff,$0c,$03,$05
00:1182 3A
00:1183 FF
00:1184 0C
00:1185 03
00:1186 05
00:1187 B0              	    16:         byte $b0,$3a,$ff,$0d,$04,$ff
00:1188 3A
00:1189 FF
00:118A 0D
00:118B 04
00:118C FF
                        	    17:         ;; Row 2
00:118D 20              	    18:         byte $20,$52,$00,$0e,$ff,$07
00:118E 52
00:118F 00
00:1190 0E
00:1191 FF
00:1192 07
00:1193 40              	    19:         byte $40,$52,$01,$0f,$06,$08
00:1194 52
00:1195 01
00:1196 0F
00:1197 06
00:1198 08
00:1199 50              	    20:         byte $50,$52,$ff,$10,$07,$09
00:119A 52
00:119B FF
00:119C 10
00:119D 07
00:119E 09
00:119F 60              	    21:         byte $60,$52,$02,$ff,$08,$0a
00:11A0 52
00:11A1 02
00:11A2 FF
00:11A3 08
00:11A4 0A
00:11A5 70              	    22:         byte $70,$52,$03,$ff,$09,$0b
00:11A6 52
00:11A7 03
00:11A8 FF
00:11A9 09
00:11AA 0B
00:11AB 80              	    23:         byte $80,$52,$ff,$13,$0a,$0c
00:11AC 52
00:11AD FF
00:11AE 13
00:11AF 0A
00:11B0 0C
00:11B1 90              	    24:         byte $90,$52,$04,$14,$0b,$0d
00:11B2 52
00:11B3 04
00:11B4 14
00:11B5 0B
00:11B6 0D
00:11B7 B0              	    25:         byte $b0,$52,$05,$15,$0c,$ff
00:11B8 52
00:11B9 05
00:11BA 15
00:11BB 0C
00:11BC FF
                        	    26:         ;; Row 3
00:11BD 20              	    27:         byte $20,$6a,$06,$ff,$ff,$0f
00:11BE 6A
00:11BF 06
00:11C0 FF
00:11C1 FF
00:11C2 0F
00:11C3 40              	    28:         byte $40,$6a,$07,$1c,$0e,$ff
00:11C4 6A
00:11C5 07
00:11C6 1C
00:11C7 0E
00:11C8 FF
00:11C9 50              	    29:         byte $50,$6a,$08,$ff,$ff,$11
00:11CA 6A
00:11CB 08
00:11CC FF
00:11CD FF
00:11CE 11
00:11CF 60              	    30:         byte $60,$6a,$ff,$17,$10,$ff
00:11D0 6A
00:11D1 FF
00:11D2 17
00:11D3 10
00:11D4 FF
00:11D5 70              	    31:         byte $70,$6a,$ff,$19,$ff,$13
00:11D6 6A
00:11D7 FF
00:11D8 19
00:11D9 FF
00:11DA 13
00:11DB 80              	    32:         byte $80,$6a,$0b,$ff,$12,$ff
00:11DC 6A
00:11DD 0B
00:11DE FF
00:11DF 12
00:11E0 FF
00:11E1 90              	    33:         byte $90,$6a,$0c,$20,$ff,$15
00:11E2 6A
00:11E3 0C
00:11E4 20
00:11E5 FF
00:11E6 15
00:11E7 B0              	    34:         byte $b0,$6a,$0d,$ff,$14,$ff
00:11E8 6A
00:11E9 0D
00:11EA FF
00:11EB 14
00:11EC FF
                        	    35:         ;; Row 4
00:11ED 50              	    36:         byte $50,$7a,$ff,$1d,$ff,$17
00:11EE 7A
00:11EF FF
00:11F0 1D
00:11F1 FF
00:11F2 17
00:11F3 60              	    37:         byte $60,$7a,$11,$ff,$16,$18
00:11F4 7A
00:11F5 11
00:11F6 FF
00:11F7 16
00:11F8 18
00:11F9 68              	    38:         byte $68,$7a,$ff,$1e,$17,$19
00:11FA 7A
00:11FB FF
00:11FC 1E
00:11FD 17
00:11FE 19
00:11FF 70              	    39:         byte $70,$7a,$12,$ff,$18,$1a
00:1200 7A
00:1201 12
00:1202 FF
00:1203 18
00:1204 1A
00:1205 80              	    40:         byte $80,$7a,$ff,$1f,$19,$ff
00:1206 7A
00:1207 FF
00:1208 1F
00:1209 19
00:120A FF
                        	    41:         ;; Row 5
00:120B 18              	    42:         byte $18,$92,$ff,$ff,$21,$1c
00:120C 92
00:120D FF
00:120E FF
00:120F 21
00:1210 1C
00:1211 40              	    43:         byte $40,$92,$0f,$25,$1b,$1d
00:1212 92
00:1213 0F
00:1214 25
00:1215 1B
00:1216 1D
00:1217 50              	    44:         byte $50,$92,$16,$22,$1c,$ff
00:1218 92
00:1219 16
00:121A 22
00:121B 1C
00:121C FF
00:121D 68              	    45:         byte $68,$92,$18,$ff,$ff,$ff
00:121E 92
00:121F 18
00:1220 FF
00:1221 FF
00:1222 FF
00:1223 80              	    46:         byte $80,$92,$1a,$23,$ff,$20
00:1224 92
00:1225 1A
00:1226 23
00:1227 FF
00:1228 20
00:1229 90              	    47:         byte $90,$92,$14,$2a,$1f,$21
00:122A 92
00:122B 14
00:122C 2A
00:122D 1F
00:122E 21
00:122F B8              	    48:         byte $b8,$92,$ff,$ff,$20,$1b
00:1230 92
00:1231 FF
00:1232 FF
00:1233 20
00:1234 1B
                        	    49:         ;; Row 6
00:1235 50              	    50:         byte $50,$a2,$1d,$26,$ff,$23
00:1236 A2
00:1237 1D
00:1238 26
00:1239 FF
00:123A 23
00:123B 80              	    51:         byte $80,$a2,$1f,$29,$22,$ff
00:123C A2
00:123D 1F
00:123E 29
00:123F 22
00:1240 FF
                        	    52:         ;; Row 7
00:1241 20              	    53:         byte $20,$ba,$ff,$2c,$ff,$25
00:1242 BA
00:1243 FF
00:1244 2C
00:1245 FF
00:1246 25
00:1247 40              	    54:         byte $40,$ba,$1c,$2e,$24,$26
00:1248 BA
00:1249 1C
00:124A 2E
00:124B 24
00:124C 26
00:124D 50              	    55:         byte $50,$ba,$22,$ff,$25,$27
00:124E BA
00:124F 22
00:1250 FF
00:1251 25
00:1252 27
00:1253 60              	    56:         byte $60,$ba,$ff,$30,$26,$ff
00:1254 BA
00:1255 FF
00:1256 30
00:1257 26
00:1258 FF
00:1259 70              	    57:         byte $70,$ba,$ff,$32,$ff,$29
00:125A BA
00:125B FF
00:125C 32
00:125D FF
00:125E 29
00:125F 80              	    58:         byte $80,$ba,$23,$ff,$28,$2a
00:1260 BA
00:1261 23
00:1262 FF
00:1263 28
00:1264 2A
00:1265 90              	    59:         byte $90,$ba,$20,$34,$29,$2b
00:1266 BA
00:1267 20
00:1268 34
00:1269 29
00:126A 2B
00:126B B0              	    60:         byte $b0,$ba,$ff,$36,$2a,$ff
00:126C BA
00:126D FF
00:126E 36
00:126F 2A
00:1270 FF
                        	    61:         ;; Row 8
00:1271 20              	    62:         byte $20,$ca,$24,$ff,$ff,$2d
00:1272 CA
00:1273 24
00:1274 FF
00:1275 FF
00:1276 2D
00:1277 30              	    63:         byte $30,$ca,$ff,$38,$2c,$ff
00:1278 CA
00:1279 FF
00:127A 38
00:127B 2C
00:127C FF
00:127D 40              	    64:         byte $40,$ca,$25,$39,$ff,$2f
00:127E CA
00:127F 25
00:1280 39
00:1281 FF
00:1282 2F
00:1283 50              	    65:         byte $50,$ca,$ff,$3a,$2e,$30
00:1284 CA
00:1285 FF
00:1286 3A
00:1287 2E
00:1288 30
00:1289 60              	    66:         byte $60,$ca,$27,$ff,$2f,$31
00:128A CA
00:128B 27
00:128C FF
00:128D 2F
00:128E 31
00:128F 68              	    67:         byte $68,$ca,$ff,$ff,$30,$32
00:1290 CA
00:1291 FF
00:1292 FF
00:1293 30
00:1294 32
00:1295 70              	    68:         byte $70,$ca,$28,$ff,$31,$33
00:1296 CA
00:1297 28
00:1298 FF
00:1299 31
00:129A 33
00:129B 80              	    69:         byte $80,$ca,$ff,$3d,$32,$34
00:129C CA
00:129D FF
00:129E 3D
00:129F 32
00:12A0 34
00:12A1 90              	    70:         byte $90,$ca,$2a,$3e,$33,$ff
00:12A2 CA
00:12A3 2A
00:12A4 3E
00:12A5 33
00:12A6 FF
00:12A7 A0              	    71:         byte $a0,$ca,$ff,$3f,$ff,$36
00:12A8 CA
00:12A9 FF
00:12AA 3F
00:12AB FF
00:12AC 36
00:12AD B0              	    72:         byte $b0,$ca,$2b,$ff,$35,$ff
00:12AE CA
00:12AF 2B
00:12B0 FF
00:12B1 35
00:12B2 FF
                        	    73:         ;; Row 9
00:12B3 20              	    74:         byte $20,$da,$ff,$41,$ff,$38
00:12B4 DA
00:12B5 FF
00:12B6 41
00:12B7 FF
00:12B8 38
00:12B9 30              	    75:         byte $30,$da,$2d,$ff,$37,$39
00:12BA DA
00:12BB 2D
00:12BC FF
00:12BD 37
00:12BE 39
00:12BF 40              	    76:         byte $40,$da,$2e,$ff,$38,$ff
00:12C0 DA
00:12C1 2E
00:12C2 FF
00:12C3 38
00:12C4 FF
00:12C5 50              	    77:         byte $50,$da,$2f,$ff,$ff,$3b
00:12C6 DA
00:12C7 2F
00:12C8 FF
00:12C9 FF
00:12CA 3B
00:12CB 60              	    78:         byte $60,$da,$ff,$42,$3a,$ff
00:12CC DA
00:12CD FF
00:12CE 42
00:12CF 3A
00:12D0 FF
00:12D1 70              	    79:         byte $70,$da,$ff,$43,$ff,$3d
00:12D2 DA
00:12D3 FF
00:12D4 43
00:12D5 FF
00:12D6 3D
00:12D7 80              	    80:         byte $80,$da,$33,$ff,$3c,$ff
00:12D8 DA
00:12D9 33
00:12DA FF
00:12DB 3C
00:12DC FF
00:12DD 90              	    81:         byte $90,$da,$34,$ff,$ff,$3f
00:12DE DA
00:12DF 34
00:12E0 FF
00:12E1 FF
00:12E2 3F
00:12E3 A0              	    82:         byte $a0,$da,$35,$ff,$3e,$40
00:12E4 DA
00:12E5 35
00:12E6 FF
00:12E7 3E
00:12E8 40
00:12E9 B0              	    83:         byte $b0,$da,$ff,$44,$3f,$ff
00:12EA DA
00:12EB FF
00:12EC 44
00:12ED 3F
00:12EE FF
                        	    84:         ;; Row 10
00:12EF 20              	    85:         byte $20,$ea,$37,$ff,$ff,$42
00:12F0 EA
00:12F1 37
00:12F2 FF
00:12F3 FF
00:12F4 42
00:12F5 60              	    86:         byte $60,$ea,$3b,$ff,$41,$43
00:12F6 EA
00:12F7 3B
00:12F8 FF
00:12F9 41
00:12FA 43
00:12FB 70              	    87:         byte $70,$ea,$3c,$ff,$42,$44
00:12FC EA
00:12FD 3C
00:12FE FF
00:12FF 42
00:1300 44
00:1301 B0              	    88:         byte $b0,$ea,$40,$ff,$43,$ff
00:1302 EA
00:1303 40
00:1304 FF
00:1305 43
00:1306 FF
                        	    89: 
                        	    90: 
                        	    91:         ;; Pellet table
                        	    92:         ;; Format:        
                        	    93:         ;;  - word address (screen memory address)
                        	    94:         ;;  - byte status (0=eaten, 1=not eaten)
                        	    95:         ;;  - byte x,y (sprite coordinates of char)
                        	    96: pelltbl:
                        	    97:         ;; Row 1
00:1307 2900            	    98:         word $0029
00:1309 01              	    99:         byte 1,$20,$3a
00:130A 20
00:130B 3A
00:130C 2A00            	   100:         word $002a
00:130E 01              	   101:         byte 1,$28,$3a
00:130F 28
00:1310 3A
00:1311 2B00            	   102:         word $002b
00:1313 01              	   103:         byte 1,$30,$3a
00:1314 30
00:1315 3A
00:1316 2C00            	   104:         word $002c
00:1318 01              	   105:         byte 1,$38,$3a
00:1319 38
00:131A 3A
00:131B 2D00            	   106:         word $002d
00:131D 01              	   107:         byte 1,$40,$3a
00:131E 40
00:131F 3A
00:1320 2E00            	   108:         word $002e
00:1322 01              	   109:         byte 1,$48,$3a
00:1323 48
00:1324 3A
00:1325 2F00            	   110:         word $002f
00:1327 01              	   111:         byte 1,$50,$3a
00:1328 50
00:1329 3A
00:132A 3000            	   112:         word $0030
00:132C 01              	   113:         byte 1,$58,$3a
00:132D 58
00:132E 3A
00:132F 3100            	   114:         word $0031
00:1331 01              	   115:         byte 1,$60,$3a
00:1332 60
00:1333 3A
00:1334 3300            	   116:         word $0033
00:1336 01              	   117:         byte 1,$70,$3a
00:1337 70
00:1338 3A
00:1339 3400            	   118:         word $0034
00:133B 01              	   119:         byte 1,$78,$3a
00:133C 78
00:133D 3A
00:133E 3500            	   120:         word $0035
00:1340 01              	   121:         byte 1,$80,$3a
00:1341 80
00:1342 3A
00:1343 3600            	   122:         word $0036
00:1345 01              	   123:         byte 1,$88,$3a
00:1346 88
00:1347 3A
00:1348 3700            	   124:         word $0037
00:134A 01              	   125:         byte 1,$90,$3a
00:134B 90
00:134C 3A
00:134D 3800            	   126:         word $0038
00:134F 01              	   127:         byte 1,$98,$3a
00:1350 98
00:1351 3A
00:1352 3900            	   128:         word $0039
00:1354 01              	   129:         byte 1,$a0,$3a
00:1355 A0
00:1356 3A
00:1357 3A00            	   130:         word $003a
00:1359 01              	   131:         byte 1,$a8,$3a
00:135A A8
00:135B 3A
00:135C 3B00            	   132:         word $003b
00:135E 01              	   133:         byte 1,$b0,$3a
00:135F B0
00:1360 3A
                        	   134:         ;; Row 2
00:1361 5100            	   135:         word $0051
00:1363 01              	   136:         byte 1,$20,$42          ;energizer
00:1364 20
00:1365 42
00:1366 5500            	   137:         word $0055
00:1368 01              	   138:         byte 1,$40,$42
00:1369 40
00:136A 42
00:136B 5900            	   139:         word $0059
00:136D 01              	   140:         byte 1,$60,$42
00:136E 60
00:136F 42
00:1370 5B00            	   141:         word $005b
00:1372 01              	   142:         byte 1,$70,$42
00:1373 70
00:1374 42
00:1375 5F00            	   143:         word $005f
00:1377 01              	   144:         byte 1,$90,$42
00:1378 90
00:1379 42
00:137A 6300            	   145:         word $0063
00:137C 01              	   146:         byte 1,$b0,$42          ;energizer
00:137D B0
00:137E 42
                        	   147:         ;; Row 3
00:137F 7900            	   148:         word $0079
00:1381 01              	   149:         byte 1,$20,$4a
00:1382 20
00:1383 4A
00:1384 7D00            	   150:         word $007d
00:1386 01              	   151:         byte 1,$40,$4a
00:1387 40
00:1388 4A
00:1389 8100            	   152:         word $0081
00:138B 01              	   153:         byte 1,$60,$4a
00:138C 60
00:138D 4A
00:138E 8300            	   154:         word $0083
00:1390 01              	   155:         byte 1,$70,$4a
00:1391 70
00:1392 4A
00:1393 8700            	   156:         word $0087
00:1395 01              	   157:         byte 1,$90,$4a
00:1396 90
00:1397 4A
00:1398 8B00            	   158:         word $008b
00:139A 01              	   159:         byte 1,$b0,$4a
00:139B B0
00:139C 4A
                        	   160:         ;; Row 4
00:139D A100            	   161:         word $00a1
00:139F 01              	   162:         byte 1,$20,$52
00:13A0 20
00:13A1 52
00:13A2 A200            	   163:         word $00a2
00:13A4 01              	   164:         byte 1,$28,$52
00:13A5 28
00:13A6 52
00:13A7 A300            	   165:         word $00a3
00:13A9 01              	   166:         byte 1,$30,$52
00:13AA 30
00:13AB 52
00:13AC A400            	   167:         word $00a4
00:13AE 01              	   168:         byte 1,$38,$52
00:13AF 38
00:13B0 52
00:13B1 A500            	   169:         word $00a5
00:13B3 01              	   170:         byte 1,$40,$52
00:13B4 40
00:13B5 52
00:13B6 A600            	   171:         word $00a6
00:13B8 01              	   172:         byte 1,$48,$52
00:13B9 48
00:13BA 52
00:13BB A700            	   173:         word $00a7
00:13BD 01              	   174:         byte 1,$50,$52
00:13BE 50
00:13BF 52
00:13C0 A800            	   175:         word $00a8
00:13C2 01              	   176:         byte 1,$58,$52
00:13C3 58
00:13C4 52
00:13C5 A900            	   177:         word $00a9
00:13C7 01              	   178:         byte 1,$60,$52
00:13C8 60
00:13C9 52
00:13CA AA00            	   179:         word $00aa
00:13CC 01              	   180:         byte 1,$68,$52
00:13CD 68
00:13CE 52
00:13CF AB00            	   181:         word $00ab
00:13D1 01              	   182:         byte 1,$70,$52
00:13D2 70
00:13D3 52
00:13D4 AC00            	   183:         word $00ac
00:13D6 01              	   184:         byte 1,$78,$52
00:13D7 78
00:13D8 52
00:13D9 AD00            	   185:         word $00ad
00:13DB 01              	   186:         byte 1,$80,$52
00:13DC 80
00:13DD 52
00:13DE AE00            	   187:         word $00ae
00:13E0 01              	   188:         byte 1,$88,$52
00:13E1 88
00:13E2 52
00:13E3 AF00            	   189:         word $00af
00:13E5 01              	   190:         byte 1,$90,$52
00:13E6 90
00:13E7 52
00:13E8 B000            	   191:         word $00b0
00:13EA 01              	   192:         byte 1,$98,$52
00:13EB 98
00:13EC 52
00:13ED B100            	   193:         word $00b1
00:13EF 01              	   194:         byte 1,$a0,$52
00:13F0 A0
00:13F1 52
00:13F2 B200            	   195:         word $00b2
00:13F4 01              	   196:         byte 1,$a8,$52
00:13F5 A8
00:13F6 52
00:13F7 B300            	   197:         word $00b3
00:13F9 01              	   198:         byte 1,$b0,$52
00:13FA B0
00:13FB 52
                        	   199:         ;; Row 5
00:13FC C900            	   200:         word $00c9
00:13FE 01              	   201:         byte 1,$20,$5a
00:13FF 20
00:1400 5A
00:1401 CD00            	   202:         word $00cd
00:1403 01              	   203:         byte 1,$40,$5a
00:1404 40
00:1405 5A
00:1406 CF00            	   204:         word $00cf
00:1408 01              	   205:         byte 1,$50,$5a
00:1409 50
00:140A 5A
00:140B D500            	   206:         word $00d5
00:140D 01              	   207:         byte 1,$80,$5a
00:140E 80
00:140F 5A
00:1410 D700            	   208:         word $00d7
00:1412 01              	   209:         byte 1,$90,$5a
00:1413 90
00:1414 5A
00:1415 DB00            	   210:         word $00db
00:1417 01              	   211:         byte 1,$b0,$5a
00:1418 B0
00:1419 5A
                        	   212:         ;; Row 6
00:141A F100            	   213:         word $00f1
00:141C 01              	   214:         byte 1,$20,$62
00:141D 20
00:141E 62
00:141F F500            	   215:         word $00f5
00:1421 01              	   216:         byte 1,$40,$62
00:1422 40
00:1423 62
00:1424 F700            	   217:         word $00f7
00:1426 01              	   218:         byte 1,$50,$62
00:1427 50
00:1428 62
00:1429 FD00            	   219:         word $00fd
00:142B 01              	   220:         byte 1,$80,$62
00:142C 80
00:142D 62
00:142E FF00            	   221:         word $00ff
00:1430 01              	   222:         byte 1,$90,$62
00:1431 90
00:1432 62
00:1433 0301            	   223:         word $0103
00:1435 01              	   224:         byte 1,$b0,$62
00:1436 B0
00:1437 62
                        	   225:         ;; Row 7
00:1438 1901            	   226:         word $0119
00:143A 01              	   227:         byte 1,$20,$6a
00:143B 20
00:143C 6A
00:143D 1A01            	   228:         word $011a
00:143F 01              	   229:         byte 1,$28,$6a
00:1440 28
00:1441 6A
00:1442 1B01            	   230:         word $011b
00:1444 01              	   231:         byte 1,$30,$6a
00:1445 30
00:1446 6A
00:1447 1C01            	   232:         word $011c
00:1449 01              	   233:         byte 1,$38,$6a
00:144A 38
00:144B 6A
00:144C 1D01            	   234:         word $011d
00:144E 01              	   235:         byte 1,$40,$6a
00:144F 40
00:1450 6A
00:1451 1F01            	   236:         word $011f
00:1453 01              	   237:         byte 1,$50,$6a
00:1454 50
00:1455 6A
00:1456 2001            	   238:         word $0120
00:1458 01              	   239:         byte 1,$58,$6a
00:1459 58
00:145A 6A
00:145B 2101            	   240:         word $0121
00:145D 01              	   241:         byte 1,$60,$6a
00:145E 60
00:145F 6A
00:1460 2301            	   242:         word $0123
00:1462 01              	   243:         byte 1,$70,$6a
00:1463 70
00:1464 6A
00:1465 2401            	   244:         word $0124
00:1467 01              	   245:         byte 1,$78,$6a
00:1468 78
00:1469 6A
00:146A 2501            	   246:         word $0125
00:146C 01              	   247:         byte 1,$80,$6a
00:146D 80
00:146E 6A
00:146F 2701            	   248:         word $0127
00:1471 01              	   249:         byte 1,$90,$6a
00:1472 90
00:1473 6A
00:1474 2801            	   250:         word $0128
00:1476 01              	   251:         byte 1,$98,$6a
00:1477 98
00:1478 6A
00:1479 2901            	   252:         word $0129
00:147B 01              	   253:         byte 1,$a0,$6a
00:147C A0
00:147D 6A
00:147E 2A01            	   254:         word $012a
00:1480 01              	   255:         byte 1,$a8,$6a
00:1481 A8
00:1482 6A
00:1483 2B01            	   256:         word $012b
00:1485 01              	   257:         byte 1,$b0,$6a
00:1486 B0
00:1487 6A
                        	   258:         ;; Row 8
00:1488 4501            	   259:         word $0145
00:148A 01              	   260:         byte 1,$40,$72
00:148B 40
00:148C 72
00:148D 4901            	   261:         word $0149
00:148F 01              	   262:         byte 1,$60,$72
00:1490 60
00:1491 72
00:1492 4B01            	   263:         word $014b
00:1494 01              	   264:         byte 1,$70,$72
00:1495 70
00:1496 72
00:1497 4F01            	   265:         word $014f
00:1499 01              	   266:         byte 1,$90,$72
00:149A 90
00:149B 72
                        	   267:         ;; Row 9
00:149C 6D01            	   268:         word $016d
00:149E 01              	   269:         byte 1,$40,$7a
00:149F 40
00:14A0 7A
00:14A1 7701            	   270:         word $0177
00:14A3 01              	   271:         byte 1,$90,$7a
00:14A4 90
00:14A5 7A
                        	   272:         ;; Row 10
00:14A6 9501            	   273:         word $0195
00:14A8 01              	   274:         byte 1,$40,$82
00:14A9 40
00:14AA 82
00:14AB 9F01            	   275:         word $019f
00:14AD 01              	   276:         byte 1,$90,$82
00:14AE 90
00:14AF 82
                        	   277:         ;; Row 11
00:14B0 BD01            	   278:         word $01bd
00:14B2 01              	   279:         byte 1,$40,$8a
00:14B3 40
00:14B4 8A
00:14B5 C701            	   280:         word $01c7
00:14B7 01              	   281:         byte 1,$90,$8a
00:14B8 90
00:14B9 8A
                        	   282:         ;; Row 12
00:14BA E501            	   283:         word $01e5
00:14BC 01              	   284:         byte 1,$40,$92
00:14BD 40
00:14BE 92
00:14BF EF01            	   285:         word $01ef
00:14C1 01              	   286:         byte 1,$90,$92
00:14C2 90
00:14C3 92
                        	   287:         ;; Row 13
00:14C4 0D02            	   288:         word $020d
00:14C6 01              	   289:         byte 1,$40,$9a
00:14C7 40
00:14C8 9A
00:14C9 1702            	   290:         word $0217
00:14CB 01              	   291:         byte 1,$90,$9a
00:14CC 90
00:14CD 9A
                        	   292:         ;; Row 14
00:14CE 3502            	   293:         word $0235
00:14D0 01              	   294:         byte 1,$40,$a2
00:14D1 40
00:14D2 A2
00:14D3 3F02            	   295:         word $023f
00:14D5 01              	   296:         byte 1,$90,$a2
00:14D6 90
00:14D7 A2
                        	   297:         ;; Row 15
00:14D8 5D02            	   298:         word $025d
00:14DA 01              	   299:         byte 1,$40,$aa
00:14DB 40
00:14DC AA
00:14DD 6702            	   300:         word $0267
00:14DF 01              	   301:         byte 1,$90,$aa
00:14E0 90
00:14E1 AA
                        	   302:         ;; Row 16
00:14E2 8502            	   303:         word $0285
00:14E4 01              	   304:         byte 1,$40,$b2
00:14E5 40
00:14E6 B2
00:14E7 8F02            	   305:         word $028f
00:14E9 01              	   306:         byte 1,$90,$b2
00:14EA 90
00:14EB B2
                        	   307:         ;; Row 17
00:14EC A902            	   308:         word $02a9
00:14EE 01              	   309:         byte 1,$20,$ba
00:14EF 20
00:14F0 BA
00:14F1 AA02            	   310:         word $02aa
00:14F3 01              	   311:         byte 1,$28,$ba
00:14F4 28
00:14F5 BA
00:14F6 AB02            	   312:         word $02ab
00:14F8 01              	   313:         byte 1,$30,$ba
00:14F9 30
00:14FA BA
00:14FB AC02            	   314:         word $02ac
00:14FD 01              	   315:         byte 1,$38,$ba
00:14FE 38
00:14FF BA
00:1500 AD02            	   316:         word $02ad
00:1502 01              	   317:         byte 1,$40,$ba
00:1503 40
00:1504 BA
00:1505 AE02            	   318:         word $02ae
00:1507 01              	   319:         byte 1,$48,$ba
00:1508 48
00:1509 BA
00:150A AF02            	   320:         word $02af
00:150C 01              	   321:         byte 1,$50,$ba
00:150D 50
00:150E BA
00:150F B002            	   322:         word $02b0
00:1511 01              	   323:         byte 1,$58,$ba
00:1512 58
00:1513 BA
00:1514 B102            	   324:         word $02b1
00:1516 01              	   325:         byte 1,$60,$ba
00:1517 60
00:1518 BA
00:1519 B302            	   326:         word $02b3
00:151B 01              	   327:         byte 1,$70,$ba
00:151C 70
00:151D BA
00:151E B402            	   328:         word $02b4
00:1520 01              	   329:         byte 1,$78,$ba
00:1521 78
00:1522 BA
00:1523 B502            	   330:         word $02b5
00:1525 01              	   331:         byte 1,$80,$ba
00:1526 80
00:1527 BA
00:1528 B602            	   332:         word $02b6
00:152A 01              	   333:         byte 1,$88,$ba
00:152B 88
00:152C BA
00:152D B702            	   334:         word $02b7
00:152F 01              	   335:         byte 1,$90,$ba
00:1530 90
00:1531 BA
00:1532 B802            	   336:         word $02b8
00:1534 01              	   337:         byte 1,$98,$ba
00:1535 98
00:1536 BA
00:1537 B902            	   338:         word $02b9
00:1539 01              	   339:         byte 1,$a0,$ba
00:153A A0
00:153B BA
00:153C BA02            	   340:         word $02ba
00:153E 01              	   341:         byte 1,$a8,$ba
00:153F A8
00:1540 BA
00:1541 BB02            	   342:         word $02bb
00:1543 01              	   343:         byte 1,$b0,$ba
00:1544 B0
00:1545 BA
                        	   344:         ;; Row 18
00:1546 D102            	   345:         word $02d1
00:1548 01              	   346:         byte 1,$20,$c2
00:1549 20
00:154A C2
00:154B D502            	   347:         word $02d5
00:154D 01              	   348:         byte 1,$40,$c2
00:154E 40
00:154F C2
00:1550 D902            	   349:         word $02d9
00:1552 01              	   350:         byte 1,$60,$c2
00:1553 60
00:1554 C2
00:1555 DB02            	   351:         word $02db
00:1557 01              	   352:         byte 1,$70,$c2
00:1558 70
00:1559 C2
00:155A DF02            	   353:         word $02df
00:155C 01              	   354:         byte 1,$90,$c2
00:155D 90
00:155E C2
00:155F E302            	   355:         word $02e3
00:1561 01              	   356:         byte 1,$b0,$c2
00:1562 B0
00:1563 C2
                        	   357:         ;; Row 19
00:1564 F902            	   358:         word $02f9
00:1566 01              	   359:         byte 1,$20,$ca          ;energizer
00:1567 20
00:1568 CA
00:1569 FA02            	   360:         word $02fa
00:156B 01              	   361:         byte 1,$28,$ca
00:156C 28
00:156D CA
00:156E FB02            	   362:         word $02fb
00:1570 01              	   363:         byte 1,$30,$ca
00:1571 30
00:1572 CA
00:1573 FD02            	   364:         word $02fd
00:1575 01              	   365:         byte 1,$40,$ca
00:1576 40
00:1577 CA
00:1578 FE02            	   366:         word $02fe
00:157A 01              	   367:         byte 1,$48,$ca
00:157B 48
00:157C CA
00:157D FF02            	   368:         word $02ff
00:157F 01              	   369:         byte 1,$50,$ca
00:1580 50
00:1581 CA
00:1582 0003            	   370:         word $0300
00:1584 01              	   371:         byte 1,$58,$ca
00:1585 58
00:1586 CA
00:1587 0103            	   372:         word $0301
00:1589 01              	   373:         byte 1,$60,$ca
00:158A 60
00:158B CA
00:158C 0303            	   374:         word $0303
00:158E 01              	   375:         byte 1,$70,$ca
00:158F 70
00:1590 CA
00:1591 0403            	   376:         word $0304
00:1593 01              	   377:         byte 1,$78,$ca
00:1594 78
00:1595 CA
00:1596 0503            	   378:         word $0305
00:1598 01              	   379:         byte 1,$80,$ca
00:1599 80
00:159A CA
00:159B 0603            	   380:         word $0306
00:159D 01              	   381:         byte 1,$88,$ca
00:159E 88
00:159F CA
00:15A0 0703            	   382:         word $0307
00:15A2 01              	   383:         byte 1,$90,$ca
00:15A3 90
00:15A4 CA
00:15A5 0903            	   384:         word $0309
00:15A7 01              	   385:         byte 1,$a0,$ca
00:15A8 A0
00:15A9 CA
00:15AA 0A03            	   386:         word $030a
00:15AC 01              	   387:         byte 1,$a8,$ca
00:15AD A8
00:15AE CA
00:15AF 0B03            	   388:         word $030b
00:15B1 01              	   389:         byte 1,$b0,$ca          ;energizer
00:15B2 B0
00:15B3 CA
                        	   390:         ;; Row 20
00:15B4 2303            	   391:         word $0323
00:15B6 01              	   392:         byte 1,$30,$d2
00:15B7 30
00:15B8 D2
00:15B9 2503            	   393:         word $0325
00:15BB 01              	   394:         byte 1,$40,$d2
00:15BC 40
00:15BD D2
00:15BE 2703            	   395:         word $0327
00:15C0 01              	   396:         byte 1,$50,$d2
00:15C1 50
00:15C2 D2
00:15C3 2D03            	   397:         word $032d
00:15C5 01              	   398:         byte 1,$80,$d2
00:15C6 80
00:15C7 D2
00:15C8 2F03            	   399:         word $032f
00:15CA 01              	   400:         byte 1,$90,$d2
00:15CB 90
00:15CC D2
00:15CD 3103            	   401:         word $0331
00:15CF 01              	   402:         byte 1,$a0,$d2
00:15D0 A0
00:15D1 D2
                        	   403:         ;; Row 21
00:15D2 4903            	   404:         word $0349
00:15D4 01              	   405:         byte 1,$20,$da
00:15D5 20
00:15D6 DA
00:15D7 4A03            	   406:         word $034a
00:15D9 01              	   407:         byte 1,$28,$da
00:15DA 28
00:15DB DA
00:15DC 4B03            	   408:         word $034b
00:15DE 01              	   409:         byte 1,$30,$da
00:15DF 30
00:15E0 DA
00:15E1 4C03            	   410:         word $034c
00:15E3 01              	   411:         byte 1,$38,$da
00:15E4 38
00:15E5 DA
00:15E6 4D03            	   412:         word $034d
00:15E8 01              	   413:         byte 1,$40,$da
00:15E9 40
00:15EA DA
00:15EB 4F03            	   414:         word $034f
00:15ED 01              	   415:         byte 1,$50,$da
00:15EE 50
00:15EF DA
00:15F0 5003            	   416:         word $0350
00:15F2 01              	   417:         byte 1,$58,$da
00:15F3 58
00:15F4 DA
00:15F5 5103            	   418:         word $0351
00:15F7 01              	   419:         byte 1,$60,$da
00:15F8 60
00:15F9 DA
00:15FA 5303            	   420:         word $0353
00:15FC 01              	   421:         byte 1,$70,$da
00:15FD 70
00:15FE DA
00:15FF 5403            	   422:         word $0354
00:1601 01              	   423:         byte 1,$78,$da
00:1602 78
00:1603 DA
00:1604 5503            	   424:         word $0355
00:1606 01              	   425:         byte 1,$80,$da
00:1607 80
00:1608 DA
00:1609 5703            	   426:         word $0357
00:160B 01              	   427:         byte 1,$90,$da
00:160C 90
00:160D DA
00:160E 5803            	   428:         word $0358
00:1610 01              	   429:         byte 1,$98,$da
00:1611 98
00:1612 DA
00:1613 5903            	   430:         word $0359
00:1615 01              	   431:         byte 1,$a0,$da
00:1616 A0
00:1617 DA
00:1618 5A03            	   432:         word $035a
00:161A 01              	   433:         byte 1,$a8,$da
00:161B A8
00:161C DA
00:161D 5B03            	   434:         word $035b
00:161F 01              	   435:         byte 1,$b0,$da
00:1620 B0
00:1621 DA
                        	   436:         ;; Row 22
00:1622 7103            	   437:         word $0371
00:1624 01              	   438:         byte 1,$20,$e2
00:1625 20
00:1626 E2
00:1627 7903            	   439:         word $0379
00:1629 01              	   440:         byte 1,$60,$e2
00:162A 60
00:162B E2
00:162C 7B03            	   441:         word $037b
00:162E 01              	   442:         byte 1,$70,$e2
00:162F 70
00:1630 E2
00:1631 8303            	   443:         word $0383
00:1633 01              	   444:         byte 1,$b0,$e2
00:1634 B0
00:1635 E2
                        	   445:         ;; Row 23
00:1636 9903            	   446:         word $0399
00:1638 01              	   447:         byte 1,$20,$ea
00:1639 20
00:163A EA
00:163B 9A03            	   448:         word $039a
00:163D 01              	   449:         byte 1,$28,$ea
00:163E 28
00:163F EA
00:1640 9B03            	   450:         word $039b
00:1642 01              	   451:         byte 1,$30,$ea
00:1643 30
00:1644 EA
00:1645 9C03            	   452:         word $039c
00:1647 01              	   453:         byte 1,$38,$ea
00:1648 38
00:1649 EA
00:164A 9D03            	   454:         word $039d
00:164C 01              	   455:         byte 1,$40,$ea
00:164D 40
00:164E EA
00:164F 9E03            	   456:         word $039e
00:1651 01              	   457:         byte 1,$48,$ea
00:1652 48
00:1653 EA
00:1654 9F03            	   458:         word $039f
00:1656 01              	   459:         byte 1,$50,$ea
00:1657 50
00:1658 EA
00:1659 A003            	   460:         word $03a0
00:165B 01              	   461:         byte 1,$58,$ea
00:165C 58
00:165D EA
00:165E A103            	   462:         word $03a1
00:1660 01              	   463:         byte 1,$60,$ea
00:1661 60
00:1662 EA
00:1663 A203            	   464:         word $03a2
00:1665 01              	   465:         byte 1,$68,$ea
00:1666 68
00:1667 EA
00:1668 A303            	   466:         word $03a3
00:166A 01              	   467:         byte 1,$70,$ea
00:166B 70
00:166C EA
00:166D A403            	   468:         word $03a4
00:166F 01              	   469:         byte 1,$78,$ea
00:1670 78
00:1671 EA
00:1672 A503            	   470:         word $03a5
00:1674 01              	   471:         byte 1,$80,$ea
00:1675 80
00:1676 EA
00:1677 A603            	   472:         word $03a6
00:1679 01              	   473:         byte 1,$88,$ea
00:167A 88
00:167B EA
00:167C A703            	   474:         word $03a7
00:167E 01              	   475:         byte 1,$90,$ea
00:167F 90
00:1680 EA
00:1681 A803            	   476:         word $03a8
00:1683 01              	   477:         byte 1,$98,$ea
00:1684 98
00:1685 EA
00:1686 A903            	   478:         word $03a9
00:1688 01              	   479:         byte 1,$a0,$ea
00:1689 A0
00:168A EA
00:168B AA03            	   480:         word $03aa
00:168D 01              	   481:         byte 1,$a8,$ea
00:168E A8
00:168F EA
00:1690 AB03            	   482:         word $03ab
00:1692 01              	   483:         byte 1,$b0,$ea
00:1693 B0
00:1694 EA
                        	   484:         ;; End marker
00:1695 FFFF            	   485:         word $ffff
00:1697 FF              	   486:         byte $ff,$ff,$ff
00:1698 FF
00:1699 FF
                        	   487:         
                        	   488:         ;; Energizer list
                        	   489:         ;; Index into pelltbl
                        	   490: enzrlst:
00:169A 12              	   491:         byte $12
00:169B 17              	   492:         byte $17
00:169C 79              	   493:         byte $79
00:169D 88              	   494:         byte $88
                        	   495: 
                        	   496:         ;; Pac-Man animation frames
                        	   497:         ;; Format:
                        	   498:         ;;  - byte sprite offset values
                        	   499: pacalstn:                       ;north-facing animation frames
00:169E 00              	   500:         byte $00,$07,$08,$09,$08,$07
00:169F 07
00:16A0 08
00:16A1 09
00:16A2 08
00:16A3 07
                        	   501: pacalsts:                       ;south-facing animation frames
00:16A4 00              	   502:         byte $00,$0a,$0b,$0c,$0b,$0a
00:16A5 0A
00:16A6 0B
00:16A7 0C
00:16A8 0B
00:16A9 0A
                        	   503: pacalstw:                       ;west-facing animation frames
00:16AA 00              	   504:         byte $00,$01,$02,$03,$02,$01
00:16AB 01
00:16AC 02
00:16AD 03
00:16AE 02
00:16AF 01
                        	   505: pacalste:                       ;east-facing animation frames
00:16B0 00              	   506:         byte $00,$04,$05,$06,$05,$04
00:16B1 04
00:16B2 05
00:16B3 06
00:16B4 05
00:16B5 04
                        	   507: 
                        	   508:         ;; Index in pelltbl of leftmost+rightmost pellet in row by sprite y loc
                        	   509:         ;; Format:
                        	   510:         ;;  - byte y (sprite y loc of row)
                        	   511:         ;;  - byte ixl (pelltbl index of leftmost pellet in row)
                        	   512:         ;;  - byte ixr (pelltbl index of rightmost pellet in row)
                        	   513: plrowix:
00:16B6 3A              	   514:         byte $3a,$00,$11        ;row 1
00:16B7 00
00:16B8 11
00:16B9 42              	   515:         byte $42,$12,$17        ;row 2
00:16BA 12
00:16BB 17
00:16BC 4A              	   516:         byte $4a,$18,$1d        ;row 3
00:16BD 18
00:16BE 1D
00:16BF 52              	   517:         byte $52,$1e,$30        ;row 4
00:16C0 1E
00:16C1 30
00:16C2 5A              	   518:         byte $5a,$31,$36        ;row 5
00:16C3 31
00:16C4 36
00:16C5 62              	   519:         byte $62,$37,$3c        ;row 6
00:16C6 37
00:16C7 3C
00:16C8 6A              	   520:         byte $6a,$3d,$4c        ;row 7
00:16C9 3D
00:16CA 4C
00:16CB 72              	   521:         byte $72,$4d,$50        ;row 8
00:16CC 4D
00:16CD 50
00:16CE 7A              	   522:         byte $7a,$51,$52        ;row 9
00:16CF 51
00:16D0 52
00:16D1 82              	   523:         byte $82,$53,$54        ;row 10
00:16D2 53
00:16D3 54
00:16D4 8A              	   524:         byte $8a,$55,$56        ;row 11
00:16D5 55
00:16D6 56
00:16D7 92              	   525:         byte $92,$57,$58        ;row 12
00:16D8 57
00:16D9 58
00:16DA 9A              	   526:         byte $9a,$59,$5a        ;row 13
00:16DB 59
00:16DC 5A
00:16DD A2              	   527:         byte $a2,$5b,$5c        ;row 14
00:16DE 5B
00:16DF 5C
00:16E0 AA              	   528:         byte $aa,$5d,$5e        ;row 15
00:16E1 5D
00:16E2 5E
00:16E3 B2              	   529:         byte $b2,$5f,$60        ;row 16
00:16E4 5F
00:16E5 60
00:16E6 BA              	   530:         byte $ba,$61,$72        ;row 17
00:16E7 61
00:16E8 72
00:16E9 C2              	   531:         byte $c2,$73,$78        ;row 18
00:16EA 73
00:16EB 78
00:16EC CA              	   532:         byte $ca,$79,$88        ;row 19
00:16ED 79
00:16EE 88
00:16EF D2              	   533:         byte $d2,$89,$8e        ;row 20
00:16F0 89
00:16F1 8E
00:16F2 DA              	   534:         byte $da,$8f,$9e        ;row 21
00:16F3 8F
00:16F4 9E
00:16F5 E2              	   535:         byte $e2,$9f,$a2        ;row 22
00:16F6 9F
00:16F7 A2
00:16F8 EA              	   536:         byte $ea,$a3,$b5        ;row 23
00:16F9 A3
00:16FA B5
                        	   537: 
                        	   538:         ;; Fruit sprite table
                        	   539:         ;; Format:
                        	   540:         ;;  - byte lvl (level number)
                        	   541:         ;;  - byte spx (sprite index)
                        	   542:         ;;  - word ofs (sp0mem offset)
                        	   543:         ;;  - word pts (bonus points: 4 BCD digits)
                        	   544: frtsptbl:
                        	   545:         ;; 1st level: Cherries
00:16FB 00              	   546:         byte $00,$0d
00:16FC 0D
00:16FD 4003            	   547:         word $0d*$40,$0100
00:16FF 0001
                        	   548:         ;; 2nd level: Strawberry
00:1701 01              	   549:         byte $01,$0f
00:1702 0F
00:1703 C003            	   550:         word $0f*$40,$0300
00:1705 0003
                        	   551:         ;; 3rd & 4th level: Peach
00:1707 02              	   552:         byte $02,$11
00:1708 11
00:1709 4004            	   553:         word $11*$40,$0500
00:170B 0005
00:170D 03              	   554:         byte $03,$11
00:170E 11
00:170F 4004            	   555:         word $11*$40,$0500
00:1711 0005
                        	   556:         ;; 5th & 6th level: Apple
00:1713 04              	   557:         byte $04,$13
00:1714 13
00:1715 C004            	   558:         word $13*$40,$0700
00:1717 0007
00:1719 05              	   559:         byte $05,$13
00:171A 13
00:171B C004            	   560:         word $13*$40,$0700
00:171D 0007
                        	   561:         ;; 7th & 8th level: Grapes
00:171F 06              	   562:         byte $06,$15
00:1720 15
00:1721 4005            	   563:         word $15*$40,$1000
00:1723 0010
00:1725 07              	   564:         byte $07,$15
00:1726 15
00:1727 4005            	   565:         word $15*$40,$1000
00:1729 0010
                        	   566:         ;; 9th & 10th levels: Galaxian
00:172B 08              	   567:         byte $08,$17
00:172C 17
00:172D C005            	   568:         word $17*$40,$2000
00:172F 0020
00:1731 09              	   569:         byte $09,$17
00:1732 17
00:1733 C005            	   570:         word $17*$40,$2000
00:1735 0020
                        	   571:         ;; 11th & 12th level: Bell
00:1737 0A              	   572:         byte $0a,$19
00:1738 19
00:1739 4006            	   573:         word $19*$40,$3000
00:173B 0030
00:173D 0B              	   574:         byte $0b,$19
00:173E 19
00:173F 4006            	   575:         word $19*$40,$3000
00:1741 0030
                        	   576:         ;; level 13 onwards: Key
00:1743 0C              	   577:         byte $0c,$1b
00:1744 1B
00:1745 C006            	   578:         word $1b*$40,$5000
00:1747 0050
                        	   579:         ;; End Marker
00:1749 FF              	   580:         byte $ff
                        	   581: 

Source: "./src/startup.asm"
                        	    34:         
                        	    35:         ;; Include assets
                        	    36:         org charset
01:4000 3C666E6E60623C00	    37:         incbin assets/charset,2
01:4008 183C667E66666600
01:4010 7C66667C66667C00
01:4018 3C66606060663C00
01:4020 786C6666666C7800
01:4028 7E60607860607E00
01:4030 7E60607860606000
01:4038 3C66606E66663C00
01:4040 6666667E66666600
01:4048 3C18181818183C00
01:4050 1E0C0C0C0C6C3800
01:4058 666C7870786C6600
01:4060 6060606060607E00
01:4068 63777F6B63636300
01:4070 66767E7E6E666600
01:4078 3C66666666663C00
01:4080 7C66667C60606000
01:4088 3C666666663C0E00
01:4090 7C66667C786C6600
01:4098 3C66603C06663C00
01:40A0 7E18181818181800
01:40A8 6666666666663C00
01:40B0 66666666663C1800
01:40B8 6363636B7F776300
01:40C0 66663C183C666600
01:40C8 6666663C18181800
01:40D0 7E060C1830607E00
01:40D8 3C30303030303C00
01:40E0 0C12307C3062FC00
01:40E8 3C0C0C0C0C0C3C00
01:40F0 00183C7E18181818
01:40F8 0010307F7F301000
01:4100 0000000000000000
01:4108 1818181800001800
01:4110 6666660000000000
01:4118 6666FF66FF666600
01:4120 183E603C067C1800
01:4128 62660C1830664600
01:4130 3C663C3867663F00
01:4138 060C180000000000
01:4140 0C18303030180C00
01:4148 30180C0C0C183000
01:4150 00663CFF3C660000
01:4158 0018187E18180000
01:4160 0000000000181830
01:4168 0000007E00000000
01:4170 0000000000181800
01:4178 0003060C18306000
01:4180 3C666E7666663C00
01:4188 1818381818187E00
01:4190 3C66060C30607E00
01:4198 3C66061C06663C00
01:41A0 060E1E667F060600
01:41A8 7E607C0606663C00
01:41B0 3C66607C66663C00
01:41B8 7E660C1818181800
01:41C0 3C66663C66663C00
01:41C8 3C66663E06663C00
01:41D0 0000180000180000
01:41D8 0000180000181830
01:41E0 0E18306030180E00
01:41E8 00007E007E000000
01:41F0 70180C060C187000
01:41F8 3C66060C18001800
01:4200 00000F1020232424
01:4208 24242320100F0000
01:4210 0000F00804C42424
01:4218 2424C40408F00000
01:4220 0000FF0000FF0000
01:4228 2424242424242424
01:4230 2424242424180000
01:4238 0000182424242424
01:4240 0000F80404F80000
01:4248 00001F20201F0000
01:4250 0000FF0000C32424
01:4258 2424C30000FF0000
01:4260 2424232020232424
01:4268 2424C40404C42424
01:4270 00003F2020272424
01:4278 24242720203F0000
01:4280 0000FC0404E42424
01:4288 2424E40404FC0000
01:4290 000000FFFF000000
01:4298 0000001000000000
01:42A0 0000387C7C380000
01:42A8 0000000000000000
01:42B0 0000000000000000
01:42B8 0000000000000000
01:42C0 0000000000000000
01:42C8 0000000000000000
01:42D0 0000000000000000
01:42D8 0000000000000000
01:42E0 0000000000000000
01:42E8 0000000000000000
01:42F0 0000000000000000
01:42F8 0000000000000000
01:4300 0000000000000000
01:4308 0000000000000000
01:4310 0000000000000000
01:4318 0000000000000000
01:4320 0000000000000000
01:4328 0000000000000000
01:4330 0000000000000000
01:4338 0000000000000000
01:4340 0000000000000000
01:4348 0000000000000000
01:4350 0000000000000000
01:4358 0000000000000000
01:4360 0000000000000000
01:4368 0000000000000000
01:4370 0000000000000000
01:4378 0000000000000000
01:4380 0000000000000000
01:4388 0000000000000000
01:4390 0000000000000000
01:4398 0000000000000000
01:43A0 0000000000000000
01:43A8 0000000000000000
01:43B0 0000000000000000
01:43B8 0000000000000000
01:43C0 0000000000000000
01:43C8 0000000000000000
01:43D0 0000000000000000
01:43D8 0000000000000000
01:43E0 0000000000000000
01:43E8 0000000000000000
01:43F0 0000000000000000
01:43F8 0000000000000000
01:4400 0000000000000000
01:4408 0000000000000000
01:4410 0000000000000000
01:4418 0000000000000000
01:4420 0000000000000000
01:4428 0000000000000000
01:4430 0000000000000000
01:4438 0000000000000000
01:4440 0000000000000000
01:4448 0000000000000000
01:4450 0000000000000000
01:4458 0000000000000000
01:4460 0000000000000000
01:4468 0000000000000000
01:4470 0000000000000000
01:4478 0000000000000000
01:4480 0000000000000000
01:4488 0000000000000000
01:4490 0000000000000000
01:4498 0000000000000000
01:44A0 0000000000000000
01:44A8 0000000000000000
01:44B0 0000000000000000
01:44B8 0000000000000000
01:44C0 0000000000000000
01:44C8 0000000000000000
01:44D0 0000000000000000
01:44D8 0000000000000000
01:44E0 0000000000000000
01:44E8 0000000000000000
01:44F0 0000000000000000
01:44F8 0000000000000000
01:4500 0000000000000000
01:4508 0000000000000000
01:4510 0000000000000000
01:4518 0000000000000000
01:4520 0000000000000000
01:4528 0000000000000000
01:4530 0000000000000000
01:4538 0000000000000000
01:4540 0000000000000000
01:4548 0000000000000000
01:4550 0000000000000000
01:4558 0000000000000000
01:4560 0000000000000000
01:4568 0000000000000000
01:4570 0000000000000000
01:4578 0000000000000000
01:4580 0000000000000000
01:4588 0000000000000000
01:4590 0000000000000000
01:4598 0000000000000000
01:45A0 0000000000000000
01:45A8 0000000000000000
01:45B0 0000000000000000
01:45B8 0000000000000000
01:45C0 0000000000000000
01:45C8 0000000000000000
01:45D0 0000000000000000
01:45D8 0000000000000000
01:45E0 0000000000000000
01:45E8 0000000000000000
01:45F0 0000000000000000
01:45F8 0000000000000000
01:4600 0000000000000000
01:4608 0000000000000000
01:4610 0000000000000000
01:4618 0000000000000000
01:4620 0000000000000000
01:4628 0000000000000000
01:4630 0000000000000000
01:4638 0000000000000000
01:4640 0000000000000000
01:4648 0000000000000000
01:4650 0000000000000000
01:4658 0000000000000000
01:4660 0000000000000000
01:4668 0000000000000000
01:4670 0000000000000000
01:4678 0000000000000000
01:4680 0000000000000000
01:4688 0000000000000000
01:4690 0000000000000000
01:4698 0000000000000000
01:46A0 0000000000000000
01:46A8 0000000000000000
01:46B0 0000000000000000
01:46B8 0000000000000000
01:46C0 0000000000000000
01:46C8 0000000000000000
01:46D0 0000000000000000
01:46D8 0000000000000000
01:46E0 0000000000000000
01:46E8 0000000000000000
01:46F0 0000000000000000
01:46F8 0000000000000000
01:4700 0000000000000000
01:4708 0000000000000000
01:4710 0000000000000000
01:4718 0000000000000000
01:4720 0000000000000000
01:4728 0000000000000000
01:4730 0000000000000000
01:4738 0000000000000000
01:4740 0000000000000000
01:4748 0000000000000000
01:4750 0000000000000000
01:4758 0000000000000000
01:4760 0000000000000000
01:4768 0000000000000000
01:4770 0000000000000000
01:4778 0000000000000000
01:4780 0000000000000000
01:4788 0000000000000000
01:4790 0000000000000000
01:4798 0000000000000000
01:47A0 0000000000000000
01:47A8 0000000000000000
01:47B0 0000000000000000
01:47B8 0000000000000000
01:47C0 0000000000000000
01:47C8 0000000000000000
01:47D0 0000000000000000
01:47D8 0000000000000000
01:47E0 0000000000000000
01:47E8 5555555555555555
01:47F0 AAAAAAAAAAAAAAAA
01:47F8 FFFFFFFFFFFFFFFF
01:4800 0101010101010101
01:4808 0101010101010101
01:4810 0101010101010101
01:4818 0101010101010101
01:4820 0101010101010101
01:4828 0101010101010101
01:4830 0101010101010101
01:4838 0101010101010101
01:4840 0606060606060606
01:4848 0606060606060606
01:4850 06060F0F0F010101
01:4858 0101010101010101
01:4860 0101010101010101
01:4868 0101010101010101
01:4870 0101010101010101
01:4878 0101010101010101
01:4880 0101010101010101
01:4888 0101010101010101
01:4890 0101010101010101
01:4898 0101010101010101
01:48A0 0101010101010101
01:48A8 0101010101010101
01:48B0 0101010101010101
01:48B8 0101010101010101
01:48C0 0101010101010101
01:48C8 0101010101010101
01:48D0 0101010101010101
01:48D8 0101010101010101
01:48E0 0101010101010101
01:48E8 0101010101010101
01:48F0 0101010101010101
01:48F8 0101010101010101
                        	    38: 
                        	    39:         org mazegfx
02:4BF0 E803E84327001800	    40:         incbin assets/mazegfx,2
02:4BF8 000F0B0628001900
02:4C00 4044444444444444
02:4C08 44444A4444444444
02:4C10 4444444442202020
02:4C18 2020202020202020
02:4C20 2020202020202020
02:4C28 4553535353535353
02:4C30 5353455353535353
02:4C38 5353535345202020
02:4C40 2020200809070820
02:4C48 13030F1205202020
02:4C50 4554404442534044
02:4C58 4253455340444253
02:4C60 4044425445202020
02:4C68 2020202020202020
02:4C70 2020202020202020
02:4C78 4553414443534144
02:4C80 4353465341444353
02:4C88 4144435345202020
02:4C90 2020202020202020
02:4C98 2020202030202020
02:4CA0 4553535353535353
02:4CA8 5353535353535353
02:4CB0 5353535345202020
02:4CB8 2020202020202020
02:4CC0 2020202020202020
02:4CC8 4553404442534753
02:4CD0 4044444442534753
02:4CD8 4044425345202020
02:4CE0 2020202020202020
02:4CE8 2020202020202020
02:4CF0 4553414443534553
02:4CF8 41444A4443534553
02:4D00 4144435345202020
02:4D08 2020202020202020
02:4D10 2020202020202020
02:4D18 4553535353534553
02:4D20 5353455353534553
02:4D28 5353535345202020
02:4D30 2020202020202020
02:4D38 2020311510202020
02:4D40 4144444442534C44
02:4D48 4853465349444D53
02:4D50 4044444443202020
02:4D58 2020202020202020
02:4D60 2020202020202020
02:4D68 2020202045534520
02:4D70 2020202020204553
02:4D78 4520202020202020
02:4D80 2020202020202020
02:4D88 2020202030202020
02:4D90 2020202045534520
02:4D98 4E52525250204553
02:4DA0 4520202020202020
02:4DA8 2020202020202020
02:4DB0 2020202020202020
02:4DB8 4444444443534620
02:4DC0 4520202045204653
02:4DC8 4144444444202020
02:4DD0 2020202020202020
02:4DD8 2020202020202020
02:4DE0 2020202020532020
02:4DE8 4520202045202053
02:4DF0 2020202020202020
02:4DF8 2020202020202020
02:4E00 2020202020202020
02:4E08 4444444442534720
02:4E10 4F44444451204753
02:4E18 4044444444202020
02:4E20 2020202020202020
02:4E28 2020202020202020
02:4E30 2020202045534520
02:4E38 2020202020204553
02:4E40 4520202020202020
02:4E48 2020202020202020
02:4E50 2020202020202020
02:4E58 2020202045534520
02:4E60 4044444442204553
02:4E68 4520202020202020
02:4E70 2020202020202020
02:4E78 2020202020202020
02:4E80 4044444443534620
02:4E88 41444A4443204653
02:4E90 4144444442202020
02:4E98 2020202020202020
02:4EA0 2020202020202020
02:4EA8 4553535353535353
02:4EB0 5353455353535353
02:4EB8 5353535345202020
02:4EC0 2020202020202020
02:4EC8 2020202020202020
02:4ED0 4553494442534944
02:4ED8 4853465349444853
02:4EE0 4044485345202020
02:4EE8 2020202020202020
02:4EF0 2020202020202020
02:4EF8 4554535345535353
02:4F00 5353205353535353
02:4F08 4553535445202020
02:4F10 2020202020202020
02:4F18 2020202020202020
02:4F20 4C44485346534753
02:4F28 49444A4448534753
02:4F30 465349444D202020
02:4F38 2020202020202020
02:4F40 2020202020202020
02:4F48 4553535353534553
02:4F50 5353455353534553
02:4F58 5353535345202020
02:4F60 2020202020202020
02:4F68 2020202020202020
02:4F70 4553494444444B44
02:4F78 4853465349444B44
02:4F80 4444485345202020
02:4F88 2020202020202020
02:4F90 2020202020202020
02:4F98 4553535353535353
02:4FA0 5353535353535353
02:4FA8 5353535345202020
02:4FB0 2020202020202020
02:4FB8 2020202020202020
02:4FC0 4144444444444444
02:4FC8 4444444444444444
02:4FD0 4444444443202020
02:4FD8 2020202020202020
02:4FE0 2020202020202020
                        	    41: 
                        	    42:         org sp0mem
03:5000 3E00007F0000FF80	    43:         incbin assets/sprites,2
03:5008 00FF8000FF8000FF
03:5010 8000FF80007F0000
03:5018 3E00000000000000
03:5020 0000000000000000
03:5028 0000000000000000
03:5030 0000000000000000
03:5038 0000000000000087
03:5040 3E00007F0000FF80
03:5048 003F80000780003F
03:5050 8000FF80007F0000
03:5058 3E00000000000000
03:5060 0000000000000000
03:5068 0000000000000000
03:5070 0000000000000000
03:5078 0000000000000087
03:5080 7E0000FF00003F80
03:5088 000F80000780000F
03:5090 80003F8000FF0000
03:5098 7E00000000000000
03:50A0 0000000000000000
03:50A8 0000000000000000
03:50B0 0000000000000000
03:50B8 0000000000000087
03:50C0 FC00003F00000F80
03:50C8 0007800003800007
03:50D0 80000F80003F0000
03:50D8 FC00000000000000
03:50E0 0000000000000000
03:50E8 0000000000000000
03:50F0 0000000000000000
03:50F8 0000000000000087
03:5100 3E00007F0000FF80
03:5108 00FE0000F00000FE
03:5110 0000FF80007F0000
03:5118 3E00000000000000
03:5120 0000000000000000
03:5128 0000000000000000
03:5130 0000000000000000
03:5138 0000000000000087
03:5140 3F00007F8000FE00
03:5148 00F80000F00000F8
03:5150 0000FE00007F8000
03:5158 3F00000000000000
03:5160 0000000000000000
03:5168 0000000000000000
03:5170 0000000000000000
03:5178 0000000000000087
03:5180 1F80007E0000F800
03:5188 00F00000E00000F0
03:5190 0000F800007E0000
03:5198 1F80000000000000
03:51A0 0000000000000000
03:51A8 0000000000000000
03:51B0 0000000000000000
03:51B8 0000000000000087
03:51C0 220000630000F780
03:51C8 00F78000F78000FF
03:51D0 8000FF80007F0000
03:51D8 3E00000000000000
03:51E0 0000000000000000
03:51E8 0000000000000000
03:51F0 0000000000000000
03:51F8 0000000000000087
03:5200 410000C18000E380
03:5208 00E38000F78000FF
03:5210 8000FF80007F0000
03:5218 3E00000000000000
03:5220 0000000000000000
03:5228 0000000000000000
03:5230 0000000000000000
03:5238 0000000000000087
03:5240 808000808000C180
03:5248 00C18000E38000F7
03:5250 80007F00007F0000
03:5258 3E00000000000000
03:5260 0000000000000000
03:5268 0000000000000000
03:5270 0000000000000000
03:5278 0000000000000087
03:5280 3E00007F0000FF80
03:5288 00FF8000F78000F7
03:5290 8000F78000630000
03:5298 2200000000000000
03:52A0 0000000000000000
03:52A8 0000000000000000
03:52B0 0000000000000000
03:52B8 0000000000000087
03:52C0 3E00007F0000FF80
03:52C8 00FF8000F78000E3
03:52D0 8000E38000C18000
03:52D8 4100000000000000
03:52E0 0000000000000000
03:52E8 0000000000000000
03:52F0 0000000000000000
03:52F8 0000000000000087
03:5300 3E00007F00007F00
03:5308 00F78000E38000C1
03:5310 8000C18000808000
03:5318 8080000000000000
03:5320 0000000000000000
03:5328 0000000000000000
03:5330 0000000000000000
03:5338 0000000000000087
03:5340 0000000000004000
03:5348 00F00000E50000EF
03:5350 80006F80000F8000
03:5358 0700000000000000
03:5360 0000000000000000
03:5368 0000000000000000
03:5370 0000000000000000
03:5378 0000000000000082
03:5380 0700001900002200
03:5388 0002000002000000
03:5390 0000000000000000
03:5398 0000000000000000
03:53A0 0000000000000000
03:53A8 0000000000000000
03:53B0 0000000000000000
03:53B8 0000000000000089
03:53C0 0000000000006600
03:53C8 00FF0000DB0000FF
03:53D0 00007600003C0000
03:53D8 1800000000000000
03:53E0 0000000000000000
03:53E8 0000000000000000
03:53F0 0000000000000000
03:53F8 0000000000000082
03:5400 1000003C00001800
03:5408 0000000024000000
03:5410 0000080000000000
03:5418 0000000000000000
03:5420 0000000000000000
03:5428 0000000000000000
03:5430 0000000000000000
03:5438 0000000000000085
03:5440 0B00000E00000800
03:5448 0008000000000000
03:5450 0000000000000000
03:5458 0000000000000000
03:5460 0000000000000000
03:5468 0000000000000000
03:5470 0000000000000000
03:5478 0000000000000085
03:5480 0000000000000000
03:5488 003E00007F00007F
03:5490 00007F00007F0000
03:5498 3E00000000000000
03:54A0 0000000000000000
03:54A8 0000000000000000
03:54B0 0000000000000000
03:54B8 0000000000000088
                        	    44: 


Symbols by name:
addscr                           A:1073
bgcol                            A:0C62
bgcol0                           E:D021
blki                             E:0000
buf                              E:0016
c2ddra                           E:DD02
calcnd                           A:0BF5
charset                          E:4000
chkcon                           A:103A
chkirq                           A:0C39
chkmov                           A:0FA4
chkne                            A:0B78
chknn                            A:0B96
chkpde                           A:0CCA
chkpdn                           A:0CD4
chkrve                           A:0FC3
chkrvn                           A:0FD3
chkrvw                           A:0FB1
chky                             A:0F8E
ci1icr                           E:DC0D
ci1pra                           E:DC00
ci2cra                           E:DD0E
ci2crb                           E:DD0F
ci2icr                           E:DD0D
ci2pra                           E:DD00
cia1                             E:DC00
cia2                             E:DD00
cinv                             E:0314
clrbuf                           A:0F1D
clrzp                            A:0F01
colmem                           E:D800
coltab                           E:4800
decrem                           A:0CE1
djr0                             A:09A8
djr1                             A:09AC
djr2                             A:09B0
djr3                             A:09B4
dkgrey                           E:000B
e                                E:0005
enzraix                          E:00AB
enzrchr                          E:0054
enzrlst                          A:169A
enzrpts                          E:0050
extcol                           E:D020
fillcolmem                       A:0957
fillmaze                         A:09D3
filloop                          A:09D7
fincol                           A:0CAD
findpel                          A:0A10
finfil                           A:0A0F
finnmi                           A:0ED0
finras                           A:0CE3
fiprsc                           A:0903
flshfin                          A:0ECE
flshmaz                          A:0E16
flshwht                          A:0E7A
fpckde                           A:0A49
fpckdn                           A:0A83
fpds                             A:0ABB
fpinrow                          A:0B19
fprixn                           A:0B07
fprixs                           A:0AF5
frtena                           E:00A9
frtsptbl                         A:16FB
frttim                           E:0026
frxpos                           E:0067
frypos                           E:00A2
gameloop                         A:0F65
gsthmnd                          E:001E
hidefrt                          A:115C
initpac                          A:0F2C
initvic                          A:092A
irqblki                          E:0005
irqmsk                           E:D01A
irqtmp                           E:001F
irqwrd1                          E:001B
irqwrd2                          E:001D
isenzr                           A:0B35
joybtn                           E:0092
joyx                             E:0096
joyy                             E:0097
ldanim                           A:0D8E
lpprsc                           A:0891
ltgrey                           E:000F
lvlend                           E:009B
lvlfrtpts                        A:1091
lvlfrtspix                       A:10B4
lvlfrtspof                       A:10CF
lvlnum                           E:00A8
maxmen                           E:0003
maxpell                          E:00B6
mazegfx                          E:4BF0
move                             A:0F87
movs                             A:0FA0
mula5                            A:081C
mula6                            A:0845
n                                E:0002
newgame                          A:0ED6
nextlvl                          A:0EEA
nmenrem                          E:00A7
nmiblki                          E:000A
nminv                            E:0318
nmiwrd1                          E:0020
nmiwrd2                          E:0022
nodeadr                          A:0B45
nodetbl                          A:1169
npelrem                          E:00A6
nxl                              A:080B
pacaix                           E:00AA
pacalste                         A:16B0
pacalstn                         A:169E
pacalsts                         A:16A4
pacalstw                         A:16AA
pacdir                           E:00A3
pacdis                           E:00A4
pacrem                           E:00A5
pacsrc                           E:009E
pacstnd                          E:0031
pactar                           E:009F
pds                              A:0CDE
pelfound                         A:0AE5
pelladr                          A:09C0
pellchr                          E:0053
pellpts                          E:0010
pelltbl                          A:1307
pelnotfd                         A:0AEC
plrowix                          A:16B6
printchr                         A:0917
printcol                         A:0904
printscr                         A:087B
procirq                          A:0C25
procnmi                          A:0D24
rasirq                           A:0CBA
raslin                           E:00FA
raster                           E:D012
rdinpt                           A:0F75
readjoy2                         A:099C
reverse                          A:0FEC
revs                             A:0FE3
rmpel                            A:0C82
s                                E:0003
scnmem                           E:4C00
score                            E:00FC
screnzr                          A:1066
scrfrt                           A:104D
scrmsdi                          E:0185
scroly                           E:D011
scrpel                           A:1059
setblu1                          A:0E25
setblu2                          A:0E3A
setblu3                          A:0E4F
setblu4                          A:0E64
setcol1                          A:0959
setcol2                          A:096A
setcol3                          A:097B
setcol4                          A:098C
setnds                           A:0BC9
setnodis                         A:0B58
setnsrc                          A:1004
setupirq                         A:0C04
setupnmi                         A:0CE9
setwht1                          A:0E7C
setwht2                          A:0E91
setwht3                          A:0EA6
setwht4                          A:0EBB
showfrt                          A:10F0
sp0col                           E:D027
sp0loc                           E:0040
sp0mem                           E:5000
sp0ptr                           E:4FF8
sp0x                             E:D000
sp0y                             E:D001
sp1x                             E:D002
sp1y                             E:D003
sp2x                             E:D004
sp2y                             E:D005
spbgcl                           E:D01F
spcechr                          E:0020
spcol                            A:0C4D
spena                            E:D015
spspcl                           E:D01E
sysirq                           E:EA7E
sysnmi                           E:FE56
ti2a                             E:DD04
ti2b                             E:DD06
tic                              A:0DEB
ticloop                          A:0DEF
timaev                           A:0D3C
timbev                           A:0D99
tmp                              E:001A
tocloop                          A:0DB8
vic                              E:D000
vicirq                           E:D019
vmcsb                            E:D018
w                                E:0004
warp                             A:0BFD
wrd1                             E:0016
wrd2                             E:0018
wrpnixe                          E:0021
wrpnixw                          E:001B

Symbols by value:
0000 blki
0002 n
0003 maxmen
0003 s
0004 w
0005 e
0005 irqblki
000A nmiblki
000B dkgrey
000F ltgrey
0010 pellpts
0016 buf
0016 wrd1
0018 wrd2
001A tmp
001B irqwrd1
001B wrpnixw
001D irqwrd2
001E gsthmnd
001F irqtmp
0020 nmiwrd1
0020 spcechr
0021 wrpnixe
0022 nmiwrd2
0026 frttim
0031 pacstnd
0040 sp0loc
0050 enzrpts
0053 pellchr
0054 enzrchr
0067 frxpos
0092 joybtn
0096 joyx
0097 joyy
009B lvlend
009E pacsrc
009F pactar
00A2 frypos
00A3 pacdir
00A4 pacdis
00A5 pacrem
00A6 npelrem
00A7 nmenrem
00A8 lvlnum
00A9 frtena
00AA pacaix
00AB enzraix
00B6 maxpell
00FA raslin
00FC score
0185 scrmsdi
0314 cinv
0318 nminv
080B nxl
081C mula5
0845 mula6
087B printscr
0891 lpprsc
0903 fiprsc
0904 printcol
0917 printchr
092A initvic
0957 fillcolmem
0959 setcol1
096A setcol2
097B setcol3
098C setcol4
099C readjoy2
09A8 djr0
09AC djr1
09B0 djr2
09B4 djr3
09C0 pelladr
09D3 fillmaze
09D7 filloop
0A0F finfil
0A10 findpel
0A49 fpckde
0A83 fpckdn
0ABB fpds
0AE5 pelfound
0AEC pelnotfd
0AF5 fprixs
0B07 fprixn
0B19 fpinrow
0B35 isenzr
0B45 nodeadr
0B58 setnodis
0B78 chkne
0B96 chknn
0BC9 setnds
0BF5 calcnd
0BFD warp
0C04 setupirq
0C25 procirq
0C39 chkirq
0C4D spcol
0C62 bgcol
0C82 rmpel
0CAD fincol
0CBA rasirq
0CCA chkpde
0CD4 chkpdn
0CDE pds
0CE1 decrem
0CE3 finras
0CE9 setupnmi
0D24 procnmi
0D3C timaev
0D8E ldanim
0D99 timbev
0DB8 tocloop
0DEB tic
0DEF ticloop
0E16 flshmaz
0E25 setblu1
0E3A setblu2
0E4F setblu3
0E64 setblu4
0E7A flshwht
0E7C setwht1
0E91 setwht2
0EA6 setwht3
0EBB setwht4
0ECE flshfin
0ED0 finnmi
0ED6 newgame
0EEA nextlvl
0F01 clrzp
0F1D clrbuf
0F2C initpac
0F65 gameloop
0F75 rdinpt
0F87 move
0F8E chky
0FA0 movs
0FA4 chkmov
0FB1 chkrvw
0FC3 chkrve
0FD3 chkrvn
0FE3 revs
0FEC reverse
1004 setnsrc
103A chkcon
104D scrfrt
1059 scrpel
1066 screnzr
1073 addscr
1091 lvlfrtpts
10B4 lvlfrtspix
10CF lvlfrtspof
10F0 showfrt
115C hidefrt
1169 nodetbl
1307 pelltbl
169A enzrlst
169E pacalstn
16A4 pacalsts
16AA pacalstw
16B0 pacalste
16B6 plrowix
16FB frtsptbl
4000 charset
4800 coltab
4BF0 mazegfx
4C00 scnmem
4FF8 sp0ptr
5000 sp0mem
D000 sp0x
D000 vic
D001 sp0y
D002 sp1x
D003 sp1y
D004 sp2x
D005 sp2y
D011 scroly
D012 raster
D015 spena
D018 vmcsb
D019 vicirq
D01A irqmsk
D01E spspcl
D01F spbgcl
D020 extcol
D021 bgcol0
D027 sp0col
D800 colmem
DC00 ci1pra
DC00 cia1
DC0D ci1icr
DD00 ci2pra
DD00 cia2
DD02 c2ddra
DD04 ti2a
DD06 ti2b
DD0D ci2icr
DD0E ci2cra
DD0F ci2crb
EA7E sysirq
FE56 sysnmi
