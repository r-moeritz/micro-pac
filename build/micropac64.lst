Sections:
00: "org0001:801" (801-164F)
01: "org0002:4000" (4000-4900)
02: "org0003:4bf0" (4BF0-4FE8)
03: "org0004:5000" (5000-5740)


Source: "src/startup.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Program startup
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         .org $0801
                        	     6: 
                        	     7:         ;; BASIC header
00:0801 0B08            	     8:         .word nxl,10
00:0803 0A00
00:0805 9E              	     9:         .byte $9e
00:0806 32303631        	    10:         .string "2061"
00:080A 00
00:080B 0000            	    11: nxl:    .word 0
                        	    12: 
                        	    13:         ;; Program initialization
00:080D 202709          	    14:         jsr initvic
00:0810 205709          	    15:         jsr fillcolmem
00:0813 20FB0B          	    16:         jsr setupirq
00:0816 20100D          	    17:         jsr newgame
                        	    18: 
                        	    19:         ;; Include program modules
                        	    20:         include macros.asm

Source: "macros.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; General purpose .macros
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5: 
                        	     6:         ;; Maths
                        	     7:         ;; ------------------------------------------------------------
                        	     8:         
                        	     9:         ;; Multiply value in .A by 8, ignore C flag
                        	    10:         ;; Reads:       .A
                        	    11:         ;; Writes:      .A
                        	    12: mula8:  .macro
                        	    13:         clc
                        	    14:         asl
                        	    15:         asl
                        	    16:         asl
                        	    17:         .endm
                        	    18:         
                        	    19:         ;; Divide value in .A by 8, ignore C flag
                        	    20:         ;; Reads:       .A
                        	    21:         ;; Writes:      .A      
                        	    22: diva8:  .macro
                        	    23:         sec
                        	    24:         lsr
                        	    25:         lsr
                        	    26:         lsr
                        	    27:         .endm
                        	    28: 
                        	    29:         ;; Add immediate value to byte and store
                        	    30: adcbimm: .macro val, byt
                        	    31:         clc
                        	    32:         lda \byt
                        	    33:         adc #\val
                        	    34:         sta \byt
                        	    35:         .endm
                        	    36: 
                        	    37:         ;; Subtract immediate value from byte and store
                        	    38: sbcbimm: .macro val, byt
                        	    39:         sec
                        	    40:         lda \byt
                        	    41:         sbc #\val
                        	    42:         sta \byt
                        	    43:         .endm
                        	    44: 
                        	    45:         ;; Add immediate word value to word and store
                        	    46: adcwimm: .macro val, wrd
                        	    47:         clc
                        	    48:         lda \wrd
                        	    49:         adc #<\val
                        	    50:         sta \wrd
                        	    51:         lda \wrd+1
                        	    52:         adc #>\val
                        	    53:         sta \wrd+1
                        	    54:         .endm
                        	    55: 
                        	    56:         ;; Subtract immediate word value from word and store
                        	    57: sbcwimm: .macro val, wrd
                        	    58:         sec
                        	    59:         lda \wrd
                        	    60:         sbc #<\val
                        	    61:         sta \wrd
                        	    62:         lda \wrd+1
                        	    63:         sbc #>\val
                        	    64:         sta \wrd+1
                        	    65:         .endm
                        	    66:         
                        	    67:         ;; Conditional jumps
                        	    68:         ;; ------------------------------------------------------------
                        	    69: 
                        	    70:         ;; BNE to distant address
                        	    71: jne:    .macro adr
                        	    72:         beq :+
                        	    73:         jmp \adr
                        	    74: :
                        	    75:         .endm
                        	    76: 
                        	    77:         ;; BEQ to distant address
                        	    78: jeq:    .macro adr
                        	    79:         bne :+
                        	    80:         jmp \adr
                        	    81: :
                        	    82:         .endm
                        	    83: 
                        	    84:         ;; BCS to distant address
                        	    85: jcs:    .macro adr
                        	    86:         bcc :+
                        	    87:         jmp \adr
                        	    88: :
                        	    89:         .endm
                        	    90: 
                        	    91:         ;; BCC to distant address
                        	    92: jcc:    .macro adr
                        	    93:         bcs :+
                        	    94:         jmp \adr
                        	    95: :
                        	    96:         .endm
                        	    97: 
                        	    98:         ;; BMI to distant address
                        	    99: jmi:    .macro adr
                        	   100:         bpl :+
                        	   101:         jmp \adr
                        	   102: :
                        	   103:         .endm
                        	   104:         
                        	   105:         ;; Stack operations
                        	   106:         ;; ------------------------------------------------------------
                        	   107: 
                        	   108:         ;; Push .X onto the stack
                        	   109: phx:    .macro
                        	   110:         txa
                        	   111:         pha
                        	   112:         .endm
                        	   113: 
                        	   114:         ;; Pop the top byte off the stack onto .X
                        	   115: plx:    .macro
                        	   116:         pla
                        	   117:         tax
                        	   118:         .endm
                        	   119: 
                        	   120:         ;; Push .Y onto the stack
                        	   121: phy:    .macro
                        	   122:         tya
                        	   123:         pha
                        	   124:         .endm
                        	   125: 
                        	   126:         ;; Pop the top byte off the stack onto .Y
                        	   127: ply:    .macro
                        	   128:         pla
                        	   129:         tay
                        	   130:         .endm
                        	   131: 
                        	   132:         ;; Memory operations
                        	   133:         ;; ------------------------------------------------------------
                        	   134: 
                        	   135:         ;; Swap bytes via the stack
                        	   136: swpbyt: .macro byt1, byt2
                        	   137:         lda \byt1
                        	   138:         pha                     ;load byt1 & push onto the stack
                        	   139:         lda \byt2
                        	   140:         sta \byt1               ;load byt2 & save to byt1
                        	   141:         pla
                        	   142:         sta \byt2               ;pop byt1 off the stack & save to byt2
                        	   143:         .endm
                        	   144:         
                        	   145:         ;; Load immediate value into byte
                        	   146: ldbimm: .macro val, byt
                        	   147:         lda #\val
                        	   148:         sta \byt
                        	   149:         .endm
                        	   150:         
                        	   151:         ;; Load immediate value into word
                        	   152: ldwimm: .macro val, wrd
                        	   153:         lda #<\val
                        	   154:         sta \wrd
                        	   155:         lda #>\val
                        	   156:         sta \wrd+1
                        	   157:         .endm
                        	   158: 
                        	   159:         ;; Load value into byte via pointer at index
                        	   160: ldbptr: .macro ptr, idx, byt
                        	   161:         ldy #\idx
                        	   162:         lda (\ptr),y
                        	   163:         sta \byt
                        	   164:         .endm
                        	   165:         
                        	   166:         ;; Load value into word via pointer at index
                        	   167: ldwptr: .macro ptr, idx, wrd
                        	   168:         ldy #\idx
                        	   169:         lda (\ptr),y
                        	   170:         sta \wrd
                        	   171:         iny
                        	   172:         lda (\ptr),y
                        	   173:         sta \wrd+1
                        	   174:         .endm
                        	   175: 
                        	   176:         ;; Copy value from one byte to another
                        	   177: cpbyt:  .macro src, dst
                        	   178:         lda \src
                        	   179:         sta \dst
                        	   180:         .endm
                        	   181: 
                        	   182:         ;; Copy value from one word to another
                        	   183: cpwrd:  .macro src, dst
                        	   184:         lda \src
                        	   185:         sta \dst
                        	   186:         lda \src+1
                        	   187:         sta \dst+1
                        	   188:         .endm
                        	   189: 
                        	   190:         ;; Fill memory range with a byte
                        	   191: filmem: .macro adr, len, val
                        	   192:         lda #\val
                        	   193:         ldx #\len        
                        	   194: :       beq :+
                        	   195:         sta \adr,x
                        	   196:         dex
                        	   197:         jmp :-
                        	   198: :       sta \adr,x
                        	   199:         .endm
                        	   200: 
                        	   201:         ;; Increment pointer using X-based, indirect adressing to ensure
                        	   202:         ;; HB is updated along with LB.
                        	   203: incptrx: .macro ptr
                        	   204:         clc
                        	   205:         lda \ptr,x
                        	   206:         adc #1
                        	   207:         sta \ptr,x
                        	   208:         inx
                        	   209:         lda \ptr,x
                        	   210:         adc #0
                        	   211:         sta \ptr,x
                        	   212:         dex
                        	   213:         .endm
                        	   214: 
                        	   215:         ;; Increment word to ensure HB is updated along with LB.
                        	   216: incwrd: .macro wrd
                        	   217:         clc
                        	   218:         lda \wrd
                        	   219:         adc #1
                        	   220:         sta \wrd
                        	   221:         lda \wrd+1
                        	   222:         adc #0
                        	   223:         sta \wrd+1
                        	   224:         .endm
                        	   225: 
                        	   226:         ;; Increment accumulator
                        	   227: ina:    .macro
                        	   228:         tay
                        	   229:         iny
                        	   230:         tya
                        	   231:         .endm
                        	   232: 
                        	   233:         ;; Decrement accumulator
                        	   234: dea:    .macro
                        	   235:         tay
                        	   236:         dey
                        	   237:         tya
                        	   238:         .endm
                        	   239: 

Source: "src/startup.asm"
                        	    21:         include symbols.asm

Source: "symbols.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Symbol definitions
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         
                        	     6:         ;; Zero page memory locations
                        	     7:         ;; ------------------------------------------------------------
                        	     8: 
                        	     9:         ;; 10-byte temporary data buffer for use in sub-routines,
                        	    10:         ;; divided into 2x blocks of 5 bytes each.
                        	    11: buf:            .ezp $16         ;$16-$1f
                        	    12:         
                        	    13:         ;; Block for game loop
                        	    14: wrd1:           .ezp buf
                        	    15: wrd2:           .ezp buf+$02
                        	    16: tmp:            .ezp buf+$04
                        	    17:         
                        	    18:         ;; Block for IRQ handler
                        	    19: irqwrd1:        .ezp buf+$05
                        	    20: irqwrd2:        .ezp buf+$07
                        	    21: irqtmp:         .ezp buf+$09
                        	    22:         
                        	    23:         ;; Joystick data
                        	    24: joybtn:         .ezp $20        ;button value
                        	    25: joyx:           .ezp $21        ;x axis value
                        	    26: joyy:           .ezp $22        ;y axis value
                        	    27: 
                        	    28:         ;; Pac-Man data
                        	    29: pacx:           .ezp $23        ;x coordinate
                        	    30: pacy:           .ezp $24        ;y coordinate
                        	    31: pacsrc:         .ezp $9e        ;source node
                        	    32: pactar:         .ezp $9f        ;target node
                        	    33: pacdir:         .ezp $a3        ;facing direction
                        	    34: pacdis:         .ezp $a4        ;distance to target
                        	    35: pacrem:         .ezp $a5        ;distance remaining to target
                        	    36: 
                        	    37:         ;; Scoring, gameplay
                        	    38: npelrem:        .ezp $a6        ;number of pellets remaining
                        	    39: nmenrem:        .ezp $a7        ;number of remaining "men"
                        	    40: lvlnum:         .ezp $a8        ;level number
                        	    41: frtena:         .ezp $a9        ;whether or not fruit is enabled        
                        	    42: score:          .ezp $fc        ;player's score in BCD (4 bytes: $fc-$ff)
                        	    43: 
                        	    44:         ;; Animation
                        	    45: pacaix:         .ezp $aa        ;Pac-Man animation frame index
                        	    46: enzraix:        .ezp $ab        ;energizer animation frame index
                        	    47: lvlend:         .ezp $9b        ;level end flashes
                        	    48: 
                        	    49:         ;; Still available: $92,$96-$97, $f7-$fb (8 bytes)
                        	    50: 
                        	    51:         
                        	    52:         ;; Memory-mapped hardware registers
                        	    53:         ;; ------------------------------------------------------------
                        	    54:         
                        	    55:         ;; VIC II registers
                        	    56: vic:            .equ $d000
                        	    57: sp0x:           .equ vic
                        	    58: sp0y:           .equ vic + $01
                        	    59: sp1x:           .equ vic + $02
                        	    60: sp1y:           .equ vic + $03
                        	    61: sp2x:           .equ vic + $04
                        	    62: sp2y:           .equ vic + $05
                        	    63: sp3x:           .equ vic + $06
                        	    64: sp3y:           .equ vic + $07
                        	    65: sp4x:           .equ vic + $08
                        	    66: sp4y:           .equ vic + $09
                        	    67: sp5x:           .equ vic + $0a
                        	    68: sp5y:           .equ vic + $0b
                        	    69: sp6x:           .equ vic + $0c
                        	    70: sp6y:           .equ vic + $0d
                        	    71: sp7x:           .equ vic + $0e
                        	    72: sp7y:           .equ vic + $0f
                        	    73: scroly:         .equ vic + $11
                        	    74: raster:         .equ vic + $12
                        	    75: spena:          .equ vic + $15
                        	    76: vmcsb:          .equ vic + $18
                        	    77: vicirq:         .equ vic + $19
                        	    78: irqmsk:         .equ vic + $1a
                        	    79: spspcl:         .equ vic + $1e
                        	    80: spbgcl:         .equ vic + $1f
                        	    81: extcol:         .equ vic + $20
                        	    82: bgcol0:         .equ vic + $21
                        	    83: sp0col:         .equ vic + $27
                        	    84: 
                        	    85:         ;; CIA1 registers
                        	    86: cia1:           .equ $dc00
                        	    87: ci1pra:         .equ cia1
                        	    88: ci1icr:         .equ cia1 + $0d
                        	    89: 
                        	    90:         ;; CIA2 registers
                        	    91: cia2:           .equ $dd00
                        	    92: ci2pra:         .equ cia2
                        	    93: c2ddra:         .equ cia2 + $02
                        	    94: ti2a:           .equ cia2 + $04
                        	    95: ti2b:           .equ cia2 + $06
                        	    96: ci2icr:         .equ cia2 + $0d
                        	    97: ci2cra:         .equ cia2 + $0e
                        	    98: ci2crb:         .equ cia2 + $0f
                        	    99: 
                        	   100: 
                        	   101:         ;; Operating system memory locations
                        	   102:         ;; ------------------------------------------------------------
                        	   103:         
                        	   104:         ;; IRQ addresses
                        	   105: cinv:           .equ $0314      ;IRQ vector
                        	   106: sysirq:         .equ $ea7e      ;kernal IRQ handler
                        	   107: 
                        	   108: 
                        	   109:         ;; Program memory locations
                        	   110:         ;; ------------------------------------------------------------
                        	   111:         
                        	   112: charset:        .equ $4000       ;character set definition
                        	   113: coltab:         .equ $4800       ;colour table
                        	   114: mazegfx:        .equ $4bf0       ;Pac-Man maze
                        	   115: scnmem:         .equ $4c00       ;screen memory
                        	   116: colmem:         .equ $d800       ;colour memory
                        	   117: sp0mem:         .equ $5000       ;sprite 0 address
                        	   118: sp0ptr:         .equ $4ff8       ;sprite 0 pointer
                        	   119: sp0loc:         .equ $1000/$40   ;sp0mem
                        	   120: border:         .equ $7999       ;border byte
                        	   121: 
                        	   122:         ;; Constants
                        	   123:         ;; ------------------------------------------------------------
                        	   124: 
                        	   125:         ;; Lines for raster IRQs
                        	   126: linmov:         .equ 1
                        	   127: linclr:         .equ 248
                        	   128: linset:         .equ 254
                        	   129:         
                        	   130:         ;; Misc.
                        	   131: spxscog:        .equ 24          ;sprite x screen origin
                        	   132: spyscog:        .equ 50          ;sprite y screen origin
                        	   133: maxpell:        .equ 182         ;maximum number of pellets (incl. energizers)
                        	   134: maxmen:         .equ 3           ;maximum number of "men"
                        	   135: 
                        	   136:         ;; Fruit
                        	   137: frxpos:         .equ $67          ;fruit x loc
                        	   138: frypos:         .equ $a2          ;fruit y loc
                        	   139: frttim:         .equ 38           ;fruit timer: 39 x 240ms = 9.1s
                        	   140: maxftx:         .equ $48          ;maximum fruit table index
                        	   141: 
                        	   142:         ;; Screen memory indexes
                        	   143: scrmsdi:        .equ $185        ;most significant digit of score
                        	   144:         
                        	   145:         ;; Node indexes
                        	   146: wrpnixw:        .equ $1b         ;western warp tunnel node index
                        	   147: wrpnixe:        .equ $21         ;eastern warp tunnel node index
                        	   148: pacstnd:        .equ $31         ;Pac-Man's starting node index        
                        	   149: gsthmnd:        .equ $1e         ;ghost home node        
                        	   150: 
                        	   151:         ;; Character constants
                        	   152: spcechr:        .equ $20         ;space char
                        	   153: pellchr:        .equ $53         ;pellet char
                        	   154: enzrchr:        .equ $54         ;energizer char
                        	   155: 
                        	   156:         ;; Colour constants
                        	   157: dkgrey:         .equ $0b         ;dark grey
                        	   158: ltgrey:         .equ $0f         ;light grey
                        	   159:         
                        	   160:         ;; Compass directions
                        	   161: n:              .equ 2
                        	   162: s:              .equ 3
                        	   163: w:              .equ 4
                        	   164: e:              .equ 5
                        	   165: 
                        	   166:         ;; Scores, expressed as BCD pairs
                        	   167: pellpts:        .equ $10        ;10 pts for pellets
                        	   168: enzrpts:        .equ $50        ;50 pts for energizers
                        	   169: 
                        	   170:         ;; Index into buf to access memory block
                        	   171:         ;; reservedf for gameloop
                        	   172: blki:           .equ $00
                        	   173:         
                        	   174:         ;; Index into buf to access memory block
                        	   175:         ;; reserved for IRQ handler
                        	   176: irqblki:        .equ $05
                        	   177: 
                        	   178:         ;; The number of pellets that need to be eaten for bonus items
                        	   179:         ;; to appear the 1st and 2nd time
                        	   180: nbonpel1:       .equ 52
                        	   181: nbonpel2:       .equ 127
                        	   182: 

Source: "src/startup.asm"
                        	    22:         include maths.asm

Source: "maths.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maths sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Multiply by 5
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (multiplicand)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
00:0819 E8              	    12: mula5:  inx
00:081A E8              	    13:         inx
00:081B 9516            	    14:         sta buf,x               ;stash original .A in wrd2 (lo)
00:081D 18              	    15:         clc
00:081E 0A              	    16:         asl                     ;multiply by 2
00:081F A8              	    17:         tay                     ;stash product in .Y
00:0820 A900            	    18:         lda #0
00:0822 2A              	    19:         rol
00:0823 E8              	    20:         inx
00:0824 9516            	    21:         sta buf,x               ;stash .C in wrd2 (hi)
00:0826 98              	    22:         tya                     ;restore product from .Y
00:0827 0A              	    23:         asl                     ;multiply by 2
00:0828 A8              	    24:         tay                     ;stash product in .Y
00:0829 B516            	    25:         lda buf,x               
00:082B 2A              	    26:         rol                     ;restore .C from wrd2 (hi)
00:082C CA              	    27:         dex
00:082D CA              	    28:         dex
00:082E 9516            	    29:         sta buf,x               ;write hi byte to wrd1 (hi)
00:0830 98              	    30:         tya                     ;restore product from .Y
00:0831 E8              	    31:         inx
00:0832 7516            	    32:         adc buf,x               ;add original .A value
00:0834 CA              	    33:         dex
00:0835 CA              	    34:         dex
00:0836 9516            	    35:         sta buf,x               ;write lo byte to wrd1 (lo)
00:0838 A900            	    36:         lda #0
00:083A 2A              	    37:         rol
00:083B E8              	    38:         inx
00:083C 7516            	    39:         adc buf,x               ;add .C to hi byte
00:083E 9516            	    40:         sta buf,x               ;and write to wrd1 (hi)
00:0840 CA              	    41:         dex
00:0841 60              	    42:         rts
                        	    43:         
                        	    44:         ;; Multiply by 6
                        	    45:         ;; Reads:
                        	    46:         ;;  - .A (multiplicand)
                        	    47:         ;;  - .X (offset to memory block in buf)
                        	    48:         ;; Writes:
                        	    49:         ;;  - Result is stored in 1st word of memory block
                        	    50:         ;;  - 2nd word of memory block is used as a work area        
00:0842 E8              	    51: mula6:  inx
00:0843 E8              	    52:         inx
00:0844 9516            	    53:         sta buf,x
00:0846 18              	    54:         clc
00:0847 0A              	    55:         asl
00:0848 A8              	    56:         tay
00:0849 A900            	    57:         lda #0
00:084B 2A              	    58:         rol
00:084C E8              	    59:         inx
00:084D 9516            	    60:         sta buf,x
00:084F 98              	    61:         tya
00:0850 0A              	    62:         asl
00:0851 A8              	    63:         tay
00:0852 B516            	    64:         lda buf,x
00:0854 2A              	    65:         rol
00:0855 CA              	    66:         dex
00:0856 CA              	    67:         dex
00:0857 9516            	    68:         sta buf,x
00:0859 98              	    69:         tya
00:085A E8              	    70:         inx
00:085B 7516            	    71:         adc buf,x
00:085D A8              	    72:         tay
00:085E A900            	    73:         lda #0
00:0860 2A              	    74:         rol
00:0861 CA              	    75:         dex
00:0862 7516            	    76:         adc buf,x
00:0864 9516            	    77:         sta buf,x
00:0866 98              	    78:         tya
00:0867 E8              	    79:         inx
00:0868 7516            	    80:         adc buf,x
00:086A CA              	    81:         dex
00:086B CA              	    82:         dex
00:086C 9516            	    83:         sta buf,x
00:086E A900            	    84:         lda #0
00:0870 2A              	    85:         rol
00:0871 E8              	    86:         inx
00:0872 7516            	    87:         adc buf,x
00:0874 9516            	    88:         sta buf,x
00:0876 CA              	    89:         dex
00:0877 60              	    90:         rts
                        	    91: 

Source: "src/startup.asm"
                        	    23:         include io.asm

Source: "io.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; I/O related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Write the player's score to screen memory
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Clobbers .A, .X, and .Y
                        	     8:         ;; Reads:
                        	     9:         ;;  - score
                        	    10:         ;;  - irqwrd1
                        	    11:         ;; Writes:
                        	    12:         ;;  - irqwrd1
                        	    13:         ;;  - irqwrd2
                        	    14:         ;;  - irqtmp
                        	    15: printscr:
                        	    16:         ;; Each of the 4 bytes comprising score contains 2 BCD digits.
                        	    17:         ;; Each digit needs to be extracted and turned into a
                        	    18:         ;; printable character. Then, each digit can be written to
                        	    19:         ;; screen memory using printchr. We skip leading zeroes.
                        	    20:         ldwimm scrmsdi, irqwrd1
00:0878 A985            	     1M         lda #<scrmsdi
00:087A 851B            	     2M         sta irqwrd1
00:087C A901            	     3M         lda #>scrmsdi
00:087E 851C            	     4M         sta irqwrd1+1
                        	    21:         cpwrd irqwrd1, irqwrd2
00:0880 A51B            	     1M         lda irqwrd1
00:0882 851D            	     2M         sta irqwrd2
00:0884 A51C            	     3M         lda irqwrd1+1
00:0886 851E            	     4M         sta irqwrd2+1
                        	    22:         ldbimm 0, irqtmp
00:0888 A900            	     1M         lda #0
00:088A 851F            	     2M         sta irqtmp
00:088C A203            	    23:         ldx #3
00:088E 3070            	    24: lpprsc: bmi fiprsc
                        	    25:         ;; print hi-nybble BCD char
00:0890 B5FC            	    26:         lda score,x
00:0892 4A              	    27:         lsr
00:0893 4A              	    28:         lsr
00:0894 4A              	    29:         lsr
00:0895 4A              	    30:         lsr                     ;shift BCD digit into lo-nybble
00:0896 F007            	    31:         beq :+
00:0898 A001            	    32:         ldy #1
00:089A 841F            	    33:         sty irqtmp
00:089C 4CA608          	    34:         jmp :++
00:089F A41F            	    35: :       ldy irqtmp
00:08A1 D003            	    36:         bne :+
00:08A3 4CB208          	    37:         jmp :++
00:08A6 0930            	    38: :       ora #%00110000          ;convert to printable char
00:08A8 A8              	    39:         tay                     ;place char in .Y
                        	    40:         phx                     ;save .X onto stack
00:08A9 8A              	     1M         txa
00:08AA 48              	     2M         pha
00:08AB A205            	    41:         ldx #irqblki            ;load block index into .X
00:08AD 201409          	    42:         jsr printchr            ;print char
                        	    43:         plx                     ;restore .X from stack
00:08B0 68              	     1M         pla
00:08B1 AA              	     2M         tax
                        	    44: :       incwrd irqwrd2
00:08B2 18              	     1M         clc
00:08B3 A51D            	     2M         lda irqwrd2
00:08B5 6901            	     3M         adc #1
00:08B7 851D            	     4M         sta irqwrd2
00:08B9 A51E            	     5M         lda irqwrd2+1
00:08BB 6900            	     6M         adc #0
00:08BD 851E            	     7M         sta irqwrd2+1
                        	    45:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08BF A51D            	     1M         lda irqwrd2
00:08C1 851B            	     2M         sta irqwrd1  
00:08C3 A51E            	     3M         lda irqwrd2+1
00:08C5 851C            	     4M         sta irqwrd1  +1
                        	    46:         
                        	    47:         ;; print lo-nybble BCD char
00:08C7 B5FC            	    48: :       lda score,x
00:08C9 290F            	    49:         and #%00001111          ;mask out hi-nybble
00:08CB F007            	    50:         beq :+
00:08CD A001            	    51:         ldy #1        
00:08CF 841F            	    52:         sty irqtmp
00:08D1 4CDB08          	    53:         jmp :++
00:08D4 A41F            	    54: :       ldy irqtmp
00:08D6 D003            	    55:         bne :+
00:08D8 4CE708          	    56:         jmp :++
00:08DB 0930            	    57: :       ora #%00110000          ;convert to printable char
00:08DD A8              	    58:         tay                     ;place char in .Y
                        	    59:         phx                     ;save .X onto stack
00:08DE 8A              	     1M         txa
00:08DF 48              	     2M         pha
00:08E0 A205            	    60:         ldx #irqblki            ;load block index into .X
00:08E2 201409          	    61:         jsr printchr            ;print char
                        	    62:         plx                     ;restore .X from stack
00:08E5 68              	     1M         pla
00:08E6 AA              	     2M         tax
                        	    63: :       incwrd irqwrd2
00:08E7 18              	     1M         clc
00:08E8 A51D            	     2M         lda irqwrd2
00:08EA 6901            	     3M         adc #1
00:08EC 851D            	     4M         sta irqwrd2
00:08EE A51E            	     5M         lda irqwrd2+1
00:08F0 6900            	     6M         adc #0
00:08F2 851E            	     7M         sta irqwrd2+1
                        	    64:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08F4 A51D            	     1M         lda irqwrd2
00:08F6 851B            	     2M         sta irqwrd1  
00:08F8 A51E            	     3M         lda irqwrd2+1
00:08FA 851C            	     4M         sta irqwrd1  +1
00:08FC CA              	    65:         dex                     ;decrement .X
00:08FD 4C8E08          	    66:         jmp lpprsc
00:0900 60              	    67: fiprsc: rts
                        	    68:         
                        	    69:         ;; Write value in .Y to colour memory at 16-bit offset
                        	    70:         ;; in memory block.
                        	    71:         ;; Reads:
                        	    72:         ;;  - .Y (value to write to colour memory)
                        	    73:         ;;  - .X (buf offset to access memory block )
                        	    74:         ;;  - 1st word in memory block at offset
                        	    75:         ;; Writes:
                        	    76:         ;;  - 1st word in memory block at offset
                        	    77: printcol:       
00:0901 18              	    78:         clc
00:0902 A900            	    79:         lda #<colmem
00:0904 7516            	    80:         adc buf,x
00:0906 9516            	    81:         sta buf,x
00:0908 E8              	    82:         inx                     ;hi-byte
00:0909 A9D8            	    83:         lda #>colmem
00:090B 7516            	    84:         adc buf,x
00:090D 9516            	    85:         sta buf,x
00:090F CA              	    86:         dex                     ;lo-byte
00:0910 98              	    87:         tya
00:0911 8116            	    88:         sta (buf,x)             ;write to colour memory
00:0913 60              	    89:         rts
                        	    90: 
                        	    91:         ;; Write char in .Y to screen memory at 16-bit offset
                        	    92:         ;; in memory block.
                        	    93:         ;; Reads:
                        	    94:         ;;  - .Y (char to write to screen memory)
                        	    95:         ;;  - .X (buf offset to access memory block )
                        	    96:         ;;  - 1st word in memory block at offset
                        	    97:         ;; Writes:
                        	    98:         ;;  - 1st word in memory block at offset
                        	    99: printchr:
                        	   100:         ;; Write char to screen memory
00:0914 18              	   101:         clc        
00:0915 A900            	   102:         lda #<scnmem
00:0917 7516            	   103:         adc buf,x
00:0919 9516            	   104:         sta buf,x
00:091B E8              	   105:         inx                     ;hi-byte
00:091C A94C            	   106:         lda #>scnmem
00:091E 7516            	   107:         adc buf,x
00:0920 9516            	   108:         sta buf,x
00:0922 CA              	   109:         dex                     ;lo-byte
00:0923 98              	   110:         tya
00:0924 8116            	   111:         sta (buf,x)             ;write to screen memory
00:0926 60              	   112:         rts
                        	   113: 
                        	   114:         ;; Initialize VIC-II
                        	   115:         ;;  - Select 16K video bank
                        	   116:         ;;  - Select screen memory location
                        	   117:         ;;  - Select character memory location
                        	   118:         ;;  - Set border & background colours
                        	   119: initvic:
                        	   120:         ;; select vic bank
00:0927 AD02DD          	   121:         lda c2ddra
00:092A 0903            	   122:         ora #%00000011
00:092C 8D02DD          	   123:         sta c2ddra              ;set bits 0+1 of ci2pra as output bits
00:092F AD00DD          	   124:         lda ci2pra
00:0932 29FC            	   125:         and #%11111100
00:0934 0902            	   126:         ora #%00000010
00:0936 8D00DD          	   127:         sta ci2pra              ;select vic bank 1: $4000-$7fff
                        	   128: 
                        	   129:         ;; select screen memory loc
00:0939 A90F            	   130:         lda #$0f
00:093B 2D18D0          	   131:         and vmcsb
00:093E 0930            	   132:         ora #$30
00:0940 8D18D0          	   133:         sta vmcsb
                        	   134: 
                        	   135:         ;; select char memory loc
00:0943 A9F1            	   136:         lda #$f1
00:0945 2D18D0          	   137:         and vmcsb
00:0948 8D18D0          	   138:         sta vmcsb
                        	   139: 
                        	   140:         ;; set border & background colours
00:094B A900            	   141:         lda #0
00:094D 8D20D0          	   142:         sta extcol
00:0950 8D21D0          	   143:         sta bgcol0
00:0953 8D9979          	   144:         sta border
00:0956 60              	   145:         rts
                        	   146: 
                        	   147:         ;; Fill colour memory from colour table
                        	   148: fillcolmem:
                        	   149:         ;; populate colour memory
00:0957 A200            	   150:         ldx #0
                        	   151: setcol1:
00:0959 BD004C          	   152:         lda scnmem,x
00:095C A8              	   153:         tay
00:095D B90048          	   154:         lda coltab,y
00:0960 9D00D8          	   155:         sta colmem,x
00:0963 E8              	   156:         inx
00:0964 E0FA            	   157:         cpx #250
00:0966 D0F1            	   158:         bne setcol1
00:0968 A200            	   159:         ldx #0
                        	   160: setcol2:
00:096A BDFA4C          	   161:         lda scnmem+250,x
00:096D A8              	   162:         tay
00:096E B90048          	   163:         lda coltab,y
00:0971 9DFAD8          	   164:         sta colmem+250,x
00:0974 E8              	   165:         inx
00:0975 E0FA            	   166:         cpx #250
00:0977 D0F1            	   167:         bne setcol2
00:0979 A200            	   168:         ldx #0
                        	   169: setcol3:
00:097B BDF44D          	   170:         lda scnmem+500,x
00:097E A8              	   171:         tay
00:097F B90048          	   172:         lda coltab,y
00:0982 9DF4D9          	   173:         sta colmem+500,x
00:0985 E8              	   174:         inx
00:0986 E0FA            	   175:         cpx #250
00:0988 D0F1            	   176:         bne setcol3
00:098A A200            	   177:         ldx #0
                        	   178: setcol4:
00:098C BDEE4E          	   179:         lda scnmem+750,x
00:098F A8              	   180:         tay
00:0990 B90048          	   181:         lda coltab,y
00:0993 9DEEDA          	   182:         sta colmem+750,x
00:0996 E8              	   183:         inx
00:0997 E0FA            	   184:         cpx #250
00:0999 D0F1            	   185:         bne setcol4
00:099B 60              	   186:         rts
                        	   187:         
                        	   188:         ;; Read joystick in port 2
                        	   189:         ;; Writes:
                        	   190:         ;;  - joyx = $01: stick moved right
                        	   191:         ;;  - joyx = $ff: stick moved left
                        	   192:         ;;  - joyy = $01: stick moved down
                        	   193:         ;;  - joyy = $ff: stick moved up
                        	   194:         ;;  - joybtn = $01: button pressed
                        	   195: readjoy2:
00:099C AD00DC          	   196:         lda ci1pra
00:099F A000            	   197:         ldy #0
00:09A1 A200            	   198:         ldx #0
00:09A3 4A              	   199:         lsr
00:09A4 B001            	   200:         bcs djr0
00:09A6 88              	   201:         dey
00:09A7 4A              	   202: djr0:   lsr
00:09A8 B001            	   203:         bcs djr1
00:09AA C8              	   204:         iny
00:09AB 4A              	   205: djr1:   lsr
00:09AC B001            	   206:         bcs djr2
00:09AE CA              	   207:         dex
00:09AF 4A              	   208: djr2:   lsr
00:09B0 B001            	   209:         bcs djr3
00:09B2 E8              	   210:         inx
00:09B3 4A              	   211: djr3:   lsr
00:09B4 8621            	   212:         stx joyx
00:09B6 8422            	   213:         sty joyy
00:09B8 A900            	   214:         lda #0
00:09BA 2A              	   215:         rol
00:09BB 8520            	   216:         sta joybtn
00:09BD 60              	   217:         rts
                        	   218: 

Source: "src/startup.asm"
                        	    24:         include maze.asm

Source: "maze.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maze related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert pellet table index to pellet memory address.
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (pellet table index)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of buf at offset .X
                        	    11:         ;;  - 2nd word of buf at offset .X is used as a work area
                        	    12: pelladr:
00:09BE 201908          	    13:         jsr mula5               ;multiply pellet index by 5
00:09C1 18              	    14:         clc
00:09C2 B516            	    15:         lda buf,x               ;load product (lo)
00:09C4 690D            	    16:         adc #<pelltbl           ;add pellet table address (lo)
00:09C6 9516            	    17:         sta buf,x               ;write sum (lo)
00:09C8 E8              	    18:         inx
00:09C9 B516            	    19:         lda buf,x               ;load product (hi)
00:09CB 6912            	    20:         adc #>pelltbl           ;add pellet table address (hi)
00:09CD 9516            	    21:         sta buf,x               ;write sum (hi)
00:09CF CA              	    22:         dex
00:09D0 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Fill maze with pellets
                        	    26:         ;; May only be called from gameloop!
                        	    27: fillmaze:
                        	    28:         ldbimm 0, tmp           ;store pellet index in tmp
00:09D1 A900            	     1M         lda #0
00:09D3 851A            	     2M         sta tmp           
                        	    29: filloop:
00:09D5 A51A            	    30:         lda tmp
00:09D7 A200            	    31:         ldx #blki
00:09D9 20BE09          	    32:         jsr pelladr             ;get pellet address
00:09DC A001            	    33:         ldy #1
00:09DE B116            	    34:         lda (wrd1),y
00:09E0 C9FF            	    35:         cmp #$ff                ;end marker?
00:09E2 F029            	    36:         beq finfil              ;yep, we're done
00:09E4 A901            	    37:         lda #1
00:09E6 A002            	    38:         ldy #2
00:09E8 9116            	    39:         sta (wrd1),y            ;set pellet status        
                        	    40:         ldwptr wrd1, 0, wrd2
00:09EA A000            	     1M         ldy #0
00:09EC B116            	     2M         lda (wrd1),y
00:09EE 8518            	     3M         sta wrd2
00:09F0 C8              	     4M         iny
00:09F1 B116            	     5M         lda (wrd1),y
00:09F3 8519            	     6M         sta wrd2+1
00:09F5 A204            	    41:         ldx #blki+4
00:09F7 202C0B          	    42:         jsr isenzr              ;is pellet an energizer?
00:09FA F005            	    43:         beq :+
00:09FC A053            	    44:         ldy #pellchr            ;no, it's a regular pellet
00:09FE 4C030A          	    45:         jmp :++
00:0A01 A054            	    46: :       ldy #enzrchr            ;yes, it's an energizer        
00:0A03 A202            	    47: :       ldx #blki+2
00:0A05 201409          	    48:         jsr printchr            ;print pellet char
00:0A08 E61A            	    49:         inc tmp
00:0A0A 4CD509          	    50:         jmp filloop
00:0A0D 60              	    51: finfil: rts
                        	    52: 
                        	    53:         ;; Find pellet collided with by searching in the opposite direction
                        	    54:         ;; to which Pac-Man is facing.
                        	    55:         ;; May only be called from IRQ handler!
                        	    56:         ;; Reads:
                        	    57:         ;;  - sp0x, sp0y
                        	    58:         ;;  - pacdir (direction Pac-Man is facing)
                        	    59:         ;; Writes:
                        	    60:         ;;  - irqwrd1: pellet address
                        	    61:         ;;  - irqtmp: pellet index
                        	    62: findpel:
                        	    63:         ;; if pacdir=#w then find 1st pellet in row with x>=sp0x
                        	    64:         ;; if pacdir=#e then find last pellet in row with x<=sp0x
                        	    65:         ;; if pacdir=#n then find pellet in row-1 with x=sp0x
                        	    66:         ;; if pacdir=#s then find pellet in row+1 with x=sp0x
00:0A0E A5A3            	    67:         lda pacdir
00:0A10 C904            	    68:         cmp #w
00:0A12 D033            	    69:         bne fpckde
                        	    70:         cpbyt sp0y, irqtmp
00:0A14 AD01D0          	     1M         lda sp0y
00:0A17 851F            	     2M         sta irqtmp
00:0A19 20100B          	    71:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	    72:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A1C A51D            	     1M         lda irqwrd2
00:0A1E 851F            	     2M         sta irqtmp   
00:0A20 A205            	    73:         ldx #irqblki
00:0A22 A51F            	    74: :       lda irqtmp              ;load index of west-most pellet in row
00:0A24 20BE09          	    75:         jsr pelladr             ;load pellet address into irqwrd1
00:0A27 A003            	    76:         ldy #3
                        	    77:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A29 AD00D0          	     1M         lda sp0x
00:0A2C 851D            	     2M         sta irqwrd2     
00:0A2E C61D            	    78:         dec irqwrd2             ;decrement irqwrd2 (lo) to give some leeway
00:0A30 B11B            	    79:         lda (irqwrd1),y         ;load pellet x loc
00:0A32 C51D            	    80:         cmp irqwrd2
00:0A34 B005            	    81:         bcs :+                  ;pellet x loc >= sp0x?
00:0A36 E61F            	    82:         inc irqtmp              ;no, try next pellet to the east
00:0A38 4C220A          	    83:         jmp :-
00:0A3B A002            	    84: :       ldy #2
00:0A3D B11B            	    85:         lda (irqwrd1),y         ;yes, load pellet state
                        	    86:         jeq pelnotfd            ;has pellet already been eaten?
00:0A3F D003            	     1M         bne :+
00:0A41 4CE30A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A44 4CDC0A          	    87:         jmp pelfound
00:0A47 C905            	    88: fpckde: cmp #e
00:0A49 D036            	    89:         bne fpckdn
                        	    90:         cpbyt sp0y, irqtmp
00:0A4B AD01D0          	     1M         lda sp0y
00:0A4E 851F            	     2M         sta irqtmp
00:0A50 20100B          	    91:         jsr fpinrow             ;get indexes of west-most & east-most pellets
00:0A53 A001            	    92:         ldy #1
00:0A55 B91D00          	    93:         lda irqwrd2,y
00:0A58 851F            	    94:         sta irqtmp              ;store index of west-most pellet
00:0A5A A205            	    95:         ldx #irqblki
00:0A5C A51F            	    96: :       lda irqtmp
00:0A5E 20BE09          	    97:         jsr pelladr
                        	    98:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A61 AD00D0          	     1M         lda sp0x
00:0A64 851D            	     2M         sta irqwrd2     
00:0A66 E61D            	    99:         inc irqwrd2             ;increment irqwrd2 (lo) to give some leeway
00:0A68 A51D            	   100:         lda irqwrd2
00:0A6A A003            	   101:         ldy #3
00:0A6C D11B            	   102:         cmp (irqwrd1),y
00:0A6E B005            	   103:         bcs :+                  ;sp0x >= pellet x loc
00:0A70 C61F            	   104:         dec irqtmp              ;no, try next pellet to the west
00:0A72 4C5C0A          	   105:         jmp :-
00:0A75 A002            	   106: :       ldy #2
00:0A77 B11B            	   107:         lda (irqwrd1),y         ;yes, load pellet state
                        	   108:         jeq pelnotfd            ;has pellet already been eaten?
00:0A79 D003            	     1M         bne :+
00:0A7B 4CE30A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A7E 4CDC0A          	   109:         jmp pelfound
00:0A81 C902            	   110: fpckdn: cmp #n
00:0A83 D02D            	   111:         bne fpds
                        	   112:         cpbyt sp0y, irqtmp      ;store sp0y in irqtmp
00:0A85 AD01D0          	     1M         lda sp0y
00:0A88 851F            	     2M         sta irqtmp      
00:0A8A 20EC0A          	   113:         jsr fprixs
00:0A8D 20100B          	   114:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   115:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A90 A51D            	     1M         lda irqwrd2
00:0A92 851F            	     2M         sta irqtmp   
00:0A94 A205            	   116:         ldx #irqblki
00:0A96 A51F            	   117: :       lda irqtmp
00:0A98 20BE09          	   118:         jsr pelladr
00:0A9B AD00D0          	   119:         lda sp0x
00:0A9E A003            	   120:         ldy #3
00:0AA0 D11B            	   121:         cmp (irqwrd1),y
00:0AA2 F005            	   122:         beq :+                  ;sp0x = pellet x loc?
00:0AA4 E61F            	   123:         inc irqtmp              ;no, try next pellet to the east
00:0AA6 4C960A          	   124:         jmp :-
00:0AA9 A002            	   125: :       ldy #2
00:0AAB B11B            	   126:         lda (irqwrd1),y         ;yes, load pellet state
00:0AAD F034            	   127:         beq pelnotfd            ;has pellet already been eaten?
00:0AAF 4CDC0A          	   128:         jmp pelfound
                        	   129: fpds:   cpbyt sp0y, irqtmp
00:0AB2 AD01D0          	     1M         lda sp0y
00:0AB5 851F            	     2M         sta irqtmp
00:0AB7 20FE0A          	   130:         jsr fprixn
00:0ABA 20100B          	   131:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   132:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0ABD A51D            	     1M         lda irqwrd2
00:0ABF 851F            	     2M         sta irqtmp   
00:0AC1 A205            	   133:         ldx #irqblki
00:0AC3 A51F            	   134: :       lda irqtmp
00:0AC5 20BE09          	   135:         jsr pelladr
00:0AC8 AD00D0          	   136:         lda sp0x
00:0ACB A003            	   137:         ldy #3
00:0ACD D11B            	   138:         cmp (irqwrd1),y
00:0ACF F005            	   139:         beq :+                  ;sp0x = pellet x loc?
00:0AD1 E61F            	   140:         inc irqtmp              ;no, try next pellet to the east
00:0AD3 4CC30A          	   141:         jmp :-
00:0AD6 A002            	   142: :       ldy #2
00:0AD8 B11B            	   143:         lda (irqwrd1),y         ;yes, load pellet state
00:0ADA F007            	   144:         beq pelnotfd            ;has pellet already been eaten?
                        	   145: pelfound:
00:0ADC A900            	   146:         lda #0
00:0ADE A002            	   147:         ldy #2
00:0AE0 911B            	   148:         sta (irqwrd1),y         ;pellet not yet eaten, mark as eaten
00:0AE2 60              	   149:         rts        
                        	   150: pelnotfd:
                        	   151:         ldwimm $ffff, irqwrd1   ;pellet already eaten
00:0AE3 A9FF            	     1M         lda #<$ffff
00:0AE5 851B            	     2M         sta irqwrd1   
00:0AE7 A9FF            	     3M         lda #>$ffff
00:0AE9 851C            	     4M         sta irqwrd1   +1
00:0AEB 60              	   152:         rts
                        	   153: 
                        	   154:         ;; Get y loc of next row to the south of the y loc in irqtmp
                        	   155:         ;; Reads:
                        	   156:         ;;  - irqtmp: y loc to find row south of
                        	   157:         ;; Writes:
                        	   158:         ;;  - irqtmp: y loc of next row to the south
00:0AEC A000            	   159: fprixs: ldy #0
00:0AEE B9BC15          	   160: :       lda plrowix,y
00:0AF1 C51F            	   161:         cmp irqtmp
00:0AF3 B006            	   162:         bcs :+
00:0AF5 C8              	   163:         iny
00:0AF6 C8              	   164:         iny
00:0AF7 C8              	   165:         iny
00:0AF8 4CEE0A          	   166:         jmp :-
00:0AFB 851F            	   167: :       sta irqtmp
00:0AFD 60              	   168:         rts
                        	   169:         
                        	   170:         ;; Get y loc of next row to the north of the y loc in irqtmp
                        	   171:         ;; Reads:
                        	   172:         ;;  - irqtmp: y loc to find row north of
                        	   173:         ;; Writes:
                        	   174:         ;;  - irqtmp: y loc of next row to the north
00:0AFE A042            	   175: fprixn: ldy #66
00:0B00 B9BC15          	   176: :       lda plrowix,y
00:0B03 C51F            	   177:         cmp irqtmp
00:0B05 9006            	   178:         bcc :+
00:0B07 88              	   179:         dey
00:0B08 88              	   180:         dey
00:0B09 88              	   181:         dey
00:0B0A 4C000B          	   182:         jmp :-
00:0B0D 851F            	   183: :       sta irqtmp
00:0B0F 60              	   184:         rts
                        	   185:         
                        	   186:         
                        	   187:         ;; Get pellet table indexes of west-most & east-most pellets 
                        	   188:         ;; in row whose sprite y loc is in irqtmp
                        	   189:         ;; May only be called from IRQ handler!
                        	   190:         ;; Reads:
                        	   191:         ;;  - irqtmp: pellet row y loc
                        	   192:         ;; Writes:
                        	   193:         ;;  - irqwrd2: indexes of west-most & east-most pellets in row
                        	   194: fpinrow:
00:0B10 A000            	   195:         ldy #0
00:0B12 B9BC15          	   196: :       lda plrowix,y
00:0B15 C51F            	   197:         cmp irqtmp
00:0B17 F006            	   198:         beq :+
00:0B19 C8              	   199:         iny
00:0B1A C8              	   200:         iny
00:0B1B C8              	   201:         iny
00:0B1C 4C120B          	   202:         jmp :-
00:0B1F C8              	   203: :       iny
00:0B20 B9BC15          	   204:         lda plrowix,y
00:0B23 851D            	   205:         sta irqwrd2
00:0B25 C8              	   206:         iny
00:0B26 B9BC15          	   207:         lda plrowix,y
00:0B29 851E            	   208:         sta irqwrd2+1
00:0B2B 60              	   209:         rts
                        	   210: 
                        	   211:         ;; Check whether or not pellet at index is an energizer
                        	   212:         ;; Reads:
                        	   213:         ;;  - .X: index into buffer to access memory block
                        	   214:         ;;  - 1st byte of memory block: pellet index
                        	   215:         ;; Writes:
                        	   216:         ;;  - .Z is set if pellet is an energizer
00:0B2C A003            	   217: isenzr: ldy #3
00:0B2E 300B            	   218: :       bmi :+
00:0B30 B516            	   219:         lda buf,x
00:0B32 D9A015          	   220:         cmp enzrlst,y
00:0B35 F004            	   221:         beq :+
00:0B37 88              	   222:         dey
00:0B38 4C2E0B          	   223:         jmp :-
00:0B3B 60              	   224: :       rts
                        	   225: 
                        	   226:         ;; Convert node index to node address
                        	   227:         ;; Reads:
                        	   228:         ;;  - .A (node index)
                        	   229:         ;;  - .X (offset into buf to access memory block)
                        	   230:         ;; Writes:
                        	   231:         ;;  - Result is stored in 1st word of memory block
                        	   232:         ;;  - 2nd word of memory block is used as a work area
                        	   233: nodeadr:
00:0B3C 204208          	   234:         jsr mula6
00:0B3F 18              	   235:         clc
00:0B40 B516            	   236:         lda buf,x
00:0B42 696F            	   237:         adc #<nodetbl
00:0B44 9516            	   238:         sta buf,x
00:0B46 E8              	   239:         inx
00:0B47 B516            	   240:         lda buf,x
00:0B49 6910            	   241:         adc #>nodetbl
00:0B4B 9516            	   242:         sta buf,x
00:0B4D CA              	   243:         dex
00:0B4E 60              	   244:         rts
                        	   245: 
                        	   246:         ;; Calculate distance from Pac-Man's source node to target node
                        	   247:         ;; Reads:
                        	   248:         ;;  - pacsrc (source node)
                        	   249:         ;;  - pactar (target node)
                        	   250:         ;;  - pacdir (compass direction)
                        	   251:         ;;  - .X (offset into buf to access memory block)
                        	   252:         ;; Writes:
                        	   253:         ;;  - pacdis (total distance)
                        	   254:         ;;  - pacrem (distance remaining)
                        	   255:         ;;  - 1st & 2nd word of memory block are used for calculations
                        	   256: setnodis:
00:0B4F A5A3            	   257:         lda pacdir
00:0B51 C904            	   258:         cmp #w
00:0B53 D01A            	   259:         bne chkne
00:0B55 A59F            	   260:         lda pactar
00:0B57 C921            	   261:         cmp #wrpnixe            ;eastern warp tunnel node
                        	   262:         jeq warp
00:0B59 D003            	     1M         bne :+
00:0B5B 4CF40B          	     2M         jmp warp
                        	     3M :
00:0B5E A59E            	   263:         lda pacsrc
00:0B60 203C0B          	   264:         jsr nodeadr             
00:0B63 A116            	   265:         lda (buf,x)             ;get source x coord...
00:0B65 48              	   266:         pha                     ;... and stash it on the stack
00:0B66 A59F            	   267:         lda pactar
00:0B68 203C0B          	   268:         jsr nodeadr             ;get target node address
00:0B6B 68              	   269:         pla                     ;restore source x coord
00:0B6C 4CEC0B          	   270:         jmp calcnd
00:0B6F C905            	   271: chkne:  cmp #e
00:0B71 D01A            	   272:         bne chknn
00:0B73 A59F            	   273:         lda pactar
00:0B75 C91B            	   274:         cmp #wrpnixw             ;western warp tunnel node
                        	   275:         jeq warp
00:0B77 D003            	     1M         bne :+
00:0B79 4CF40B          	     2M         jmp warp
                        	     3M :
00:0B7C A59F            	   276:         lda pactar
00:0B7E 203C0B          	   277:         jsr nodeadr             
00:0B81 A116            	   278:         lda (buf,x)             ;get target x coord...
00:0B83 48              	   279:         pha                     ;... and stash it on the stack
00:0B84 A59E            	   280:         lda pacsrc
00:0B86 203C0B          	   281:         jsr nodeadr             ;get source node address
00:0B89 68              	   282:         pla                     ;restore target x coord
00:0B8A 4CEC0B          	   283:         jmp calcnd
00:0B8D C902            	   284: chknn:  cmp #n
00:0B8F D02F            	   285:         bne setnds
00:0B91 A59E            	   286:         lda pacsrc
00:0B93 203C0B          	   287:         jsr nodeadr
                        	   288:         incptrx buf             ;advance pointer; we need y coord
00:0B96 18              	     1M         clc
00:0B97 B516            	     2M         lda buf             ,x
00:0B99 6901            	     3M         adc #1
00:0B9B 9516            	     4M         sta buf             ,x
00:0B9D E8              	     5M         inx
00:0B9E B516            	     6M         lda buf             ,x
00:0BA0 6900            	     7M         adc #0
00:0BA2 9516            	     8M         sta buf             ,x
00:0BA4 CA              	     9M         dex
00:0BA5 A116            	   289:         lda (buf,x)             ;get source y coord...
00:0BA7 48              	   290:         pha                     ;... and stash it on the stack
00:0BA8 A59F            	   291:         lda pactar
00:0BAA 203C0B          	   292:         jsr nodeadr             ;get target node address
                        	   293:         incptrx buf             ;advance pointer; we need y coord
00:0BAD 18              	     1M         clc
00:0BAE B516            	     2M         lda buf             ,x
00:0BB0 6901            	     3M         adc #1
00:0BB2 9516            	     4M         sta buf             ,x
00:0BB4 E8              	     5M         inx
00:0BB5 B516            	     6M         lda buf             ,x
00:0BB7 6900            	     7M         adc #0
00:0BB9 9516            	     8M         sta buf             ,x
00:0BBB CA              	     9M         dex
00:0BBC 68              	   294:         pla                     ;restore source y coord
00:0BBD 4CEC0B          	   295:         jmp calcnd
00:0BC0 A59F            	   296: setnds: lda pactar
00:0BC2 203C0B          	   297:         jsr nodeadr
                        	   298:         incptrx buf             ;advance pointer; we need y coord
00:0BC5 18              	     1M         clc
00:0BC6 B516            	     2M         lda buf             ,x
00:0BC8 6901            	     3M         adc #1
00:0BCA 9516            	     4M         sta buf             ,x
00:0BCC E8              	     5M         inx
00:0BCD B516            	     6M         lda buf             ,x
00:0BCF 6900            	     7M         adc #0
00:0BD1 9516            	     8M         sta buf             ,x
00:0BD3 CA              	     9M         dex
00:0BD4 A116            	   299:         lda (buf,x)             ;get target y coord...
00:0BD6 48              	   300:         pha                     ;... and stash it on the stack
00:0BD7 A59E            	   301:         lda pacsrc
00:0BD9 203C0B          	   302:         jsr nodeadr
                        	   303:         incptrx buf             ;advance pointer; we need y coord
00:0BDC 18              	     1M         clc
00:0BDD B516            	     2M         lda buf             ,x
00:0BDF 6901            	     3M         adc #1
00:0BE1 9516            	     4M         sta buf             ,x
00:0BE3 E8              	     5M         inx
00:0BE4 B516            	     6M         lda buf             ,x
00:0BE6 6900            	     7M         adc #0
00:0BE8 9516            	     8M         sta buf             ,x
00:0BEA CA              	     9M         dex
00:0BEB 68              	   304:         pla                     ;restore target y coord
00:0BEC 38              	   305: calcnd: sec
00:0BED E116            	   306:         sbc (buf,x)
00:0BEF 85A4            	   307:         sta pacdis
00:0BF1 85A5            	   308:         sta pacrem
00:0BF3 60              	   309:         rts
00:0BF4 A900            	   310: warp:   lda #0
00:0BF6 85A4            	   311:         sta pacdis
00:0BF8 85A5            	   312:         sta pacrem
00:0BFA 60              	   313:         rts
                        	   314: 

Source: "src/startup.asm"
                        	    25:         include irq.asm

Source: "irq.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; IRQ handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for raster IRQ.
                        	     6: setupirq:
00:0BFB 78              	     7:         sei
                        	     8:         ldbimm $7f, ci1icr      ;disable CIA 1 IRQ
00:0BFC A97F            	     1M         lda #$7f
00:0BFE 8D0DDC          	     2M         sta ci1icr      
                        	     9:         ldbimm $03, irqmsk      ;enable raster IRQ & mob-data collision
00:0C01 A903            	     1M         lda #$03
00:0C03 8D1AD0          	     2M         sta irqmsk      
                        	    10:         ldbimm $1b, scroly      ;clear high bit of scroly
00:0C06 A91B            	     1M         lda #$1b
00:0C08 8D11D0          	     2M         sta scroly      
                        	    11:         ldbimm linset, raster   ;set line for next raster IRQ
00:0C0B A9FE            	     1M         lda #linset
00:0C0D 8D12D0          	     2M         sta raster   
                        	    12:         ldwimm procirq, cinv
00:0C10 A91F            	     1M         lda #<procirq
00:0C12 8D1403          	     2M         sta cinv
00:0C15 A90C            	     3M         lda #>procirq
00:0C17 8D1503          	     4M         sta cinv+1
00:0C1A AD0DDC          	    13:         lda ci1icr              ;acknowledge IRQ, just in case
00:0C1D 58              	    14:         cli
00:0C1E 60              	    15:         rts
                        	    16: 
                        	    17:         ;; IRQ handler. Here we handle:
                        	    18:         ;;  - Collisions
                        	    19:         ;;    * between Pac-Man and pellets
                        	    20:         ;;    * between Pac-Man and fruit
                        	    21:         ;;    * between Pac-Man and ghosts
                        	    22:         ;;  - Movement
                        	    23:         ;;    * Updating Pac-Man and ghost sprite coordinates
                        	    24: procirq:
00:0C1F AD19D0          	    25:         lda vicirq
00:0C22 2901            	    26:         and #%00000001
                        	    27:         jne rasirq              ;check for raster IRQ
00:0C24 F003            	     1M         beq :+
00:0C26 4CB10C          	     2M         jmp rasirq              
                        	     3M :
                        	    28:         
                        	    29:         ;; Read sprite collision registers & save to irqwrd1
                        	    30: chkcol: cpbyt spbgcl, irqwrd1
00:0C29 AD1FD0          	     1M         lda spbgcl
00:0C2C 851B            	     2M         sta irqwrd1
                        	    31:         cpbyt spspcl, irqwrd1+1
00:0C2E AD1ED0          	     1M         lda spspcl
00:0C31 851C            	     2M         sta irqwrd1+1
00:0C33 A5A6            	    32:         lda npelrem
                        	    33:         jeq finirq              ;don't handle IRQ when no pellets left        
00:0C35 D003            	     1M         bne :+
00:0C37 4C0A0D          	     2M         jmp finirq              
                        	     3M :
00:0C3A AD19D0          	    34:         lda vicirq
00:0C3D 2902            	    35:         and #%00000010          ;check for sprite-background collision
                        	    36:         jne bgcol
00:0C3F F003            	     1M         beq :+
00:0C41 4C630C          	     2M         jmp bgcol
                        	     3M :
00:0C44 AD19D0          	    37:         lda vicirq
00:0C47 2904            	    38:         and #%00000100          ;check for sprite-sprite collision
                        	    39:         jeq finirq
00:0C49 D003            	     1M         bne :+
00:0C4B 4C0A0D          	     2M         jmp finirq
                        	     3M :
                        	    40: 
                        	    41:         ;; Handle sprite-sprite collision
                        	    42:         ;; HACK: Assume Pac-Man collision with fruit
00:0C4E A51C            	    43: spcol:  lda irqwrd1+1           ;read saved sprite-sprite collision register
00:0C50 2901            	    44:         and #%00000001          ;only interested if Pac-Man sprite was involved
                        	    45:         jeq finirq
00:0C52 D003            	     1M         bne :+
00:0C54 4C0A0D          	     2M         jmp finirq
                        	     3M :
00:0C57 206210          	    46:         jsr hidefrt             ;hide the fruit
00:0C5A 20530F          	    47:         jsr scrfrt              ;score the fruit
00:0C5D 207808          	    48:         jsr printscr            ;print the score
                        	    49:         ;; TODO: Show points earned sprite
                        	    50:         ;; (timer to hide after ~1.5s)
00:0C60 4C0A0D          	    51:         jmp finirq
                        	    52: 
                        	    53:         ;; Handle sprite-background collision:
                        	    54:         ;; Assume Pac-Man collision with pellet
00:0C63 200E0A          	    55: bgcol:  jsr findpel             ;find pellet collided with & mark as eaten
00:0C66 A51C            	    56:         lda irqwrd1+1           ;load pellet address hi-byte
00:0C68 C9FF            	    57:         cmp #$ff                ;pellet found?
                        	    58:         jeq finirq              ;no, do nothing
00:0C6A D003            	     1M         bne :+
00:0C6C 4C0A0D          	     2M         jmp finirq              
                        	     3M :
00:0C6F A209            	    59:         ldx #irqblki+4
00:0C71 202C0B          	    60:         jsr isenzr              ;yes, is it an energizer?
00:0C74 D008            	    61:         bne :+
00:0C76 A207            	    62:         ldx #irqblki+2
00:0C78 206C0F          	    63:         jsr screnzr             ;yes, score it
00:0C7B 4C830C          	    64:         jmp rmpel
00:0C7E A207            	    65: :       ldx #irqblki+2
00:0C80 205F0F          	    66:         jsr scrpel              ;no, score as regular pellet
                        	    67: rmpel:  ldwptr irqwrd1, 0, irqwrd2
00:0C83 A000            	     1M         ldy #0
00:0C85 B11B            	     2M         lda (irqwrd1),y
00:0C87 851D            	     3M         sta irqwrd2
00:0C89 C8              	     4M         iny
00:0C8A B11B            	     5M         lda (irqwrd1),y
00:0C8C 851E            	     6M         sta irqwrd2+1
00:0C8E A020            	    68:         ldy #spcechr
00:0C90 201409          	    69:         jsr printchr            ;erase pellet
00:0C93 207808          	    70:         jsr printscr            ;print score
                        	    71:         ldbimm 6, lvlend        ;set number of level end flashes
00:0C96 A906            	     1M         lda #6
00:0C98 859B            	     2M         sta lvlend        
00:0C9A C6A6            	    72:         dec npelrem             ;decrement pellets remaining
00:0C9C 20F60F          	    73:         jsr showfrt             ;conditionally enable bonus fruit
00:0C9F A5A6            	    74:         lda npelrem
                        	    75:         jne finirq
00:0CA1 F003            	     1M         beq :+
00:0CA3 4C0A0D          	     2M         jmp finirq
                        	     3M :
00:0CA6 AD15D0          	    76:         lda spena
00:0CA9 2901            	    77:         and #%00000001
00:0CAB 8D15D0          	    78:         sta spena               ;disable all but Pac-Man's sprite
00:0CAE 4C0A0D          	    79:         jmp finirq
                        	    80: 
                        	    81:         ;; Handle raster IRQ
                        	    82:         ;; Update sprite 0 (Pac-Man) x & y coordinates
                        	    83: rasirq:
00:0CB1 AD12D0          	    84:         lda raster
00:0CB4 C9FE            	    85:         cmp #linset
00:0CB6 B045            	    86:         bcs setbit
00:0CB8 C9F8            	    87:         cmp #linclr
00:0CBA B031            	    88:         bcs clrbit
                        	    89:         
00:0CBC A5A5            	    90: movpac: lda pacrem
00:0CBE F025            	    91:         beq finmov
00:0CC0 A5A3            	    92:         lda pacdir
00:0CC2 C904            	    93:         cmp #w
00:0CC4 D006            	    94:         bne chkpde
00:0CC6 CE00D0          	    95:         dec sp0x
00:0CC9 4CE30C          	    96:         jmp decrem
00:0CCC C905            	    97: chkpde: cmp #e
00:0CCE D006            	    98:         bne chkpdn
00:0CD0 EE00D0          	    99:         inc sp0x
00:0CD3 4CE30C          	   100:         jmp decrem
00:0CD6 C902            	   101: chkpdn: cmp #n
00:0CD8 D006            	   102:         bne pds
00:0CDA CE01D0          	   103:         dec sp0y
00:0CDD 4CE30C          	   104:         jmp decrem
00:0CE0 EE01D0          	   105: pds:    inc sp0y
00:0CE3 C6A5            	   106: decrem: dec pacrem
                        	   107: finmov: ldbimm linclr, raster
00:0CE5 A9F8            	     1M         lda #linclr
00:0CE7 8D12D0          	     2M         sta raster
00:0CEA 4C290C          	   108:         jmp chkcol
                        	   109:         
                        	   110:         ;; Clear bit 3 of scroly
00:0CED AD11D0          	   111: clrbit: lda scroly
00:0CF0 29F7            	   112:         and #%11110111
00:0CF2 8D11D0          	   113:         sta scroly
                        	   114:         ldbimm linset, raster
00:0CF5 A9FE            	     1M         lda #linset
00:0CF7 8D12D0          	     2M         sta raster
00:0CFA 4C0A0D          	   115:         jmp finirq
                        	   116:         
                        	   117:         ;; Set bit 3 of scroly
00:0CFD AD11D0          	   118: setbit: lda scroly
00:0D00 0908            	   119:         ora #%00001000
00:0D02 8D11D0          	   120:         sta scroly
                        	   121:         ldbimm linmov, raster
00:0D05 A901            	     1M         lda #linmov
00:0D07 8D12D0          	     2M         sta raster
                        	   122:         
00:0D0A 0E19D0          	   123: finirq: asl vicirq              ;acknowledge IRQ
00:0D0D 4C7EEA          	   124:         jmp sysirq              ;return from interrupt
                        	   125: 

Source: "src/startup.asm"
                        	    26:         include game.asm

Source: "game.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Game-logic related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Start a new game
                        	     6: newgame:
00:0D10 20D109          	     7:         jsr fillmaze            ;fill maze with pellets
00:0D13 20410D          	     8:         jsr clrzp
                        	     9:         ldbimm maxpell, npelrem
00:0D16 A9B6            	     1M         lda #maxpell
00:0D18 85A6            	     2M         sta npelrem
                        	    10:         ldbimm maxmen, nmenrem
00:0D1A A903            	     1M         lda #maxmen
00:0D1C 85A7            	     2M         sta nmenrem
00:0D1E 202F0E          	    11:         jsr initpac
00:0D21 206C0D          	    12:         jsr printmen
00:0D24 20D60D          	    13:         jsr printlvl
00:0D27 4C6B0E          	    14:         jmp gameloop
                        	    15: 
                        	    16:         ;; Setup next game level
                        	    17: nextlvl:
00:0D2A E6A8            	    18:         inc lvlnum
00:0D2C 20D109          	    19:         jsr fillmaze
00:0D2F 205709          	    20:         jsr fillcolmem
00:0D32 205D0D          	    21:         jsr clrbuf
                        	    22:         ldbimm maxpell, npelrem
00:0D35 A9B6            	     1M         lda #maxpell
00:0D37 85A6            	     2M         sta npelrem
                        	    23:         ldbimm 0, frtena
00:0D39 A900            	     1M         lda #0
00:0D3B 85A9            	     2M         sta frtena
00:0D3D 202F0E          	    24:         jsr initpac
00:0D40 60              	    25:         rts
                        	    26:         
                        	    27:         ;; Clear out ZP memory used to avoid garbage data
                        	    28: clrzp:  filmem $a3, 9, 0        ;$a3 - $ab
00:0D41 A900            	     1M         lda #0        
00:0D43 A209            	     2M         ldx #9        
00:0D45 F006            	     3M :       beq :+
00:0D47 95A3            	     4M         sta $a3,x
00:0D49 CA              	     5M         dex
00:0D4A 4C450D          	     6M         jmp :-
00:0D4D 95A3            	     7M :       sta $a3,x
                        	    29:         filmem $f7, 9, 0        ;$f7 - $ff
00:0D4F A900            	     1M         lda #0        
00:0D51 A209            	     2M         ldx #9        
00:0D53 F006            	     3M :       beq :+
00:0D55 95F7            	     4M         sta $f7,x
00:0D57 CA              	     5M         dex
00:0D58 4C530D          	     6M         jmp :-
00:0D5B 95F7            	     7M :       sta $f7,x
                        	    30:         
                        	    31:         ;; Clear out temporary buffer to avoid garbage data
                        	    32: clrbuf: filmem buf, 15, 0       ;$16 - $24
00:0D5D A900            	     1M         lda #0       
00:0D5F A20F            	     2M         ldx #15        
00:0D61 F006            	     3M :       beq :+
00:0D63 9516            	     4M         sta buf,x
00:0D65 CA              	     5M         dex
00:0D66 4C610D          	     6M         jmp :-
00:0D69 9516            	     7M :       sta buf,x
00:0D6B 60              	    33:         rts
                        	    34: 
                        	    35: printmen:
00:0D6C A5A7            	    36:         lda nmenrem
00:0D6E C902            	    37:         cmp #2
00:0D70 9063            	    38:         bcc :+
                        	    39:         
                        	    40:         ;; Sprite 3
                        	    41:         ldbimm sp0loc+2, sp0ptr+3     ;set sprite 3 pointer
00:0D72 A942            	     1M         lda #sp0loc+2
00:0D74 8DFB4F          	     2M         sta sp0ptr+3     
00:0D77 AD27D0          	    42:         lda sp0col
00:0D7A 8D2AD0          	    43:         sta sp0col+3                  ;set sprite 3 colour
                        	    44:         ldbimm 26, sp3x               ;set sprite 3 x loc
00:0D7D A91A            	     1M         lda #26
00:0D7F 8D06D0          	     2M         sta sp3x               
                        	    45:         ldbimm 0, sp3y                ;set sprite 3 y loc
00:0D82 A900            	     1M         lda #0
00:0D84 8D07D0          	     2M         sta sp3y                
00:0D87 AD15D0          	    46:         lda spena
00:0D8A 0908            	    47:         ora #%00001000
00:0D8C 8D15D0          	    48:         sta spena                     ;enable sprite 3
                        	    49: 
00:0D8F A5A7            	    50:         lda nmenrem
00:0D91 C903            	    51:         cmp #3
00:0D93 9040            	    52:         bcc :+
                        	    53:         
                        	    54:         ;; Sprite 4
                        	    55:         ldbimm sp0loc+2, sp0ptr+4     ;set sprite 4 pointer
00:0D95 A942            	     1M         lda #sp0loc+2
00:0D97 8DFC4F          	     2M         sta sp0ptr+4     
00:0D9A AD27D0          	    56:         lda sp0col
00:0D9D 8D2BD0          	    57:         sta sp0col+4                  ;set sprite 4 colour
                        	    58:         ldbimm 38, sp4x               ;set sprite 4 x loc
00:0DA0 A926            	     1M         lda #38
00:0DA2 8D08D0          	     2M         sta sp4x               
                        	    59:         ldbimm 0, sp4y                ;set sprite 4 y loc
00:0DA5 A900            	     1M         lda #0
00:0DA7 8D09D0          	     2M         sta sp4y                
00:0DAA AD15D0          	    60:         lda spena
00:0DAD 0910            	    61:         ora #%00010000
00:0DAF 8D15D0          	    62:         sta spena                     ;enable sprite 4
                        	    63: 
00:0DB2 A5A7            	    64:         lda nmenrem
00:0DB4 C904            	    65:         cmp #4
00:0DB6 901D            	    66:         bcc :+
                        	    67: 
                        	    68:         ;; Sprite 5
                        	    69:         ldbimm sp0loc+2, sp0ptr+5     ;set sprite 5 pointer
00:0DB8 A942            	     1M         lda #sp0loc+2
00:0DBA 8DFD4F          	     2M         sta sp0ptr+5     
00:0DBD AD27D0          	    70:         lda sp0col
00:0DC0 8D2CD0          	    71:         sta sp0col+5                  ;set sprite 5 colour
                        	    72:         ldbimm 38, sp5x               ;set sprite 5 x loc
00:0DC3 A926            	     1M         lda #38
00:0DC5 8D0AD0          	     2M         sta sp5x               
                        	    73:         ldbimm 0, sp5y                ;set sprite 5 y loc
00:0DC8 A900            	     1M         lda #0
00:0DCA 8D0BD0          	     2M         sta sp5y                
00:0DCD AD15D0          	    74:         lda spena
00:0DD0 0910            	    75:         ora #%00010000
00:0DD2 8D15D0          	    76:         sta spena                     ;enable sprite 5        
                        	    77:       
00:0DD5 60              	    78: :       rts
                        	    79: 
                        	    80: printlvl:
00:0DD6 20BA0F          	    81:         jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:0DD9 18              	    82:         clc
00:0DDA 6940            	    83:         adc #sp0loc
00:0DDC 8DF94F          	    84:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	    85:         ina                     ;increment .A
00:0DDF A8              	     1M         tay
00:0DE0 C8              	     2M         iny
00:0DE1 98              	     3M         tya
00:0DE2 8DFA4F          	    86:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	    87:         ;; Set sprite colours
00:0DE5 20D50F          	    88:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:0DE8 841B            	    89:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:0DEA 851C            	    90:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	    91:         adcwimm sp0mem, irqwrd1
00:0DEC 18              	     1M         clc
00:0DED A51B            	     2M         lda irqwrd1
00:0DEF 6900            	     3M         adc #<sp0mem
00:0DF1 851B            	     4M         sta irqwrd1
00:0DF3 A51C            	     5M         lda irqwrd1+1
00:0DF5 6950            	     6M         adc #>sp0mem
00:0DF7 851C            	     7M         sta irqwrd1+1
00:0DF9 A03F            	    92:         ldy #$3f                ;index to sprite colour value
00:0DFB B11B            	    93:         lda (irqwrd1),y         ;load sprite colour value
00:0DFD 290F            	    94:         and #%00001111          ;mask out hi nybble
00:0DFF 8D28D0          	    95:         sta sp0col+1            ;write to sprite 1 colour register
                        	    96:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:0E02 18              	     1M         clc
00:0E03 A51B            	     2M         lda irqwrd1  
00:0E05 6940            	     3M         adc #<$0040
00:0E07 851B            	     4M         sta irqwrd1  
00:0E09 A51C            	     5M         lda irqwrd1  +1
00:0E0B 6900            	     6M         adc #>$0040
00:0E0D 851C            	     7M         sta irqwrd1  +1
00:0E0F B11B            	    97:         lda (irqwrd1),y         ;load sprite colour value
00:0E11 290F            	    98:         and #%00001111          ;mask out hi nybble
00:0E13 8D29D0          	    99:         sta sp0col+2            ;write to sprite 2 colour register
                        	   100:         ;; Set sprite 1+2 x,y locations
00:0E16 A9B4            	   101:         lda #180
00:0E18 8D02D0          	   102:         sta sp1x
00:0E1B 8D04D0          	   103:         sta sp2x
00:0E1E A900            	   104:         lda #0
00:0E20 8D03D0          	   105:         sta sp1y
00:0E23 8D05D0          	   106:         sta sp2y
                        	   107:         ;; Enable sprites 1+2
00:0E26 AD15D0          	   108:         lda spena
00:0E29 0906            	   109:         ora #%00000110
00:0E2B 8D15D0          	   110:         sta spena
                        	   111:         ;; Return
00:0E2E 60              	   112:         rts
                        	   113:         
                        	   114:         ;; Initialize Pac-Man
                        	   115: initpac:
                        	   116:         ;; Sprite 0: Pac-Man
                        	   117:         ldbimm sp0loc, sp0ptr   ;set sprite 0 pointer
00:0E2F A940            	     1M         lda #sp0loc
00:0E31 8DF84F          	     2M         sta sp0ptr   
00:0E34 AD3F50          	   118:         lda sp0mem+$3f          ;read byte 63
00:0E37 290F            	   119:         and #%00001111          ;mask out hi nybble
00:0E39 8D27D0          	   120:         sta sp0col              ;set sprite 0 (Pac-Man) colour
00:0E3C A931            	   121:         lda #pacstnd
00:0E3E A200            	   122:         ldx #0
00:0E40 203C0B          	   123:         jsr nodeadr             ;get address of Pac's starting node
                        	   124:         ldbptr wrd1, 0, sp0x    ;set Pac's x loc
00:0E43 A000            	     1M         ldy #0
00:0E45 B116            	     2M         lda (wrd1),y
00:0E47 8D00D0          	     3M         sta sp0x    
                        	   125:         ldbptr wrd1, 1, sp0y    ;set Pac's y loc
00:0E4A A001            	     1M         ldy #1
00:0E4C B116            	     2M         lda (wrd1),y
00:0E4E 8D01D0          	     3M         sta sp0y    
00:0E51 AD15D0          	   126:         lda spena
00:0E54 0901            	   127:         ora #%00000001
00:0E56 8D15D0          	   128:         sta spena               ;enable sprite 0 (Pac-Man)
                        	   129:         ;; Init Pac's direction & calc distance between source & target nodes
                        	   130:         ldbimm w, pacdir        ;set Pac's initial direction to west
00:0E59 A904            	     1M         lda #w
00:0E5B 85A3            	     2M         sta pacdir        
                        	   131:         ldbimm pacstnd, pacsrc  ;set Pac's starting node as source node
00:0E5D A931            	     1M         lda #pacstnd
00:0E5F 859E            	     2M         sta pacsrc  
                        	   132:         ldbptr wrd1, w, pactar  ;set western neighbour as target node
00:0E61 A004            	     1M         ldy #w
00:0E63 B116            	     2M         lda (wrd1),y
00:0E65 859F            	     3M         sta pactar  
00:0E67 204F0B          	   133:         jsr setnodis            ;calculate distance between source & target
00:0E6A 60              	   134:         rts
                        	   135:         
                        	   136:         ;; Main game loop
                        	   137: gameloop:
00:0E6B A5A6            	   138:         lda npelrem             ;check remaining pellets
00:0E6D D00C            	   139:         bne rdinpt              ;if != 0 read joystick input
00:0E6F A2FF            	   140: :       ldx #$ff
00:0E71 CA              	   141: :       dex
00:0E72 D0FD            	   142:         bne :-                  ;delay
00:0E74 A59B            	   143:         lda lvlend              ;check if end level animation finished
00:0E76 D0F7            	   144:         bne :--                 ;no? wait a bit longer
00:0E78 202A0D          	   145:         jsr nextlvl 
00:0E7B 209C09          	   146: rdinpt: jsr readjoy2
00:0E7E A901            	   147:         lda #1
00:0E80 C521            	   148:         cmp joyx
00:0E82 F009            	   149:         beq move
00:0E84 B00E            	   150:         bcs chky
                        	   151:         ldbimm w, tmp
00:0E86 A904            	     1M         lda #w
00:0E88 851A            	     2M         sta tmp
00:0E8A 4CAA0E          	   152:         jmp chkmov
                        	   153: move:   ldbimm e, tmp
00:0E8D A905            	     1M         lda #e
00:0E8F 851A            	     2M         sta tmp
00:0E91 4CAA0E          	   154:         jmp chkmov
00:0E94 A901            	   155: chky:   lda #1
00:0E96 C522            	   156:         cmp joyy
00:0E98 F00C            	   157:         beq movs
                        	   158:         jcs setnsrc
00:0E9A 9003            	     1M         bcc :+
00:0E9C 4C0A0F          	     2M         jmp setnsrc
                        	     3M :
                        	   159:         ldbimm n, tmp
00:0E9F A902            	     1M         lda #n
00:0EA1 851A            	     2M         sta tmp
00:0EA3 4CAA0E          	   160:         jmp chkmov
                        	   161: movs:   ldbimm s, tmp
00:0EA6 A903            	     1M         lda #s
00:0EA8 851A            	     2M         sta tmp
00:0EAA A5A5            	   162: chkmov: lda pacrem
00:0EAC 38              	   163:         sec
00:0EAD E903            	   164:         sbc #3
                        	   165:         jcs chkrvw
00:0EAF 9003            	     1M         bcc :+
00:0EB1 4CB70E          	     2M         jmp chkrvw
                        	     3M :
00:0EB4 4C0A0F          	   166:         jmp setnsrc
00:0EB7 A5A3            	   167: chkrvw: lda pacdir
00:0EB9 C904            	   168:         cmp #w
00:0EBB D00C            	   169:         bne chkrve
00:0EBD A51A            	   170:         lda tmp
00:0EBF C905            	   171:         cmp #e
                        	   172:         jne setnsrc
00:0EC1 F003            	     1M         beq :+
00:0EC3 4C0A0F          	     2M         jmp setnsrc
                        	     3M :
00:0EC6 4CF20E          	   173:         jmp reverse
00:0EC9 C905            	   174: chkrve: cmp #e
00:0ECB D00C            	   175:         bne chkrvn
00:0ECD A51A            	   176:         lda tmp
00:0ECF C904            	   177:         cmp #w
                        	   178:         jne setnsrc
00:0ED1 F003            	     1M         beq :+
00:0ED3 4C0A0F          	     2M         jmp setnsrc
                        	     3M :
00:0ED6 4CF20E          	   179:         jmp reverse
00:0ED9 C902            	   180: chkrvn: cmp #n
00:0EDB D00C            	   181:         bne revs
00:0EDD A51A            	   182:         lda tmp
00:0EDF C903            	   183:         cmp #s
                        	   184:         jne setnsrc
00:0EE1 F003            	     1M         beq :+
00:0EE3 4C0A0F          	     2M         jmp setnsrc
                        	     3M :
00:0EE6 4CF20E          	   185:         jmp reverse
                        	   186: revs:
00:0EE9 A51A            	   187:         lda tmp
00:0EEB C902            	   188:         cmp #n
                        	   189:         jne setnsrc
00:0EED F003            	     1M         beq :+
00:0EEF 4C0A0F          	     2M         jmp setnsrc
                        	     3M :
                        	   190: reverse:
                        	   191:         cpbyt tmp, pacdir
00:0EF2 A51A            	     1M         lda tmp
00:0EF4 85A3            	     2M         sta pacdir
                        	   192:         swpbyt pacsrc, pactar
00:0EF6 A59E            	     1M         lda pacsrc
00:0EF8 48              	     2M         pha                     ;load byt1 & push onto the stack
00:0EF9 A59F            	     3M         lda pactar
00:0EFB 859E            	     4M         sta pacsrc               ;load byt2 & save to byt1
00:0EFD 68              	     5M         pla
00:0EFE 859F            	     6M         sta pactar               ;pop byt1 off the stack & save to byt2
00:0F00 A5A4            	   193:         lda pacdis
00:0F02 38              	   194:         sec
00:0F03 E5A5            	   195:         sbc pacrem
00:0F05 85A5            	   196:         sta pacrem
00:0F07 4C6B0E          	   197:         jmp gameloop
                        	   198: 
                        	   199:         ;; Check if Pac-Man arrived at target & set new target
                        	   200: setnsrc:
00:0F0A A5A5            	   201:         lda pacrem
                        	   202:         jne gameloop            ;return to gameloop if pellets remaining
00:0F0C F003            	     1M         beq :+
00:0F0E 4C6B0E          	     2M         jmp gameloop            
                        	     3M :
                        	   203:         cpbyt pactar, pacsrc    ;set target node as new source node
00:0F11 A59F            	     1M         lda pactar
00:0F13 859E            	     2M         sta pacsrc    
00:0F15 A200            	   204:         ldx #blki
00:0F17 203C0B          	   205:         jsr nodeadr             ;load node address into wrd1
                        	   206:         ldbptr wrd1, 0, sp0x    ;store node x loc into sp0x
00:0F1A A000            	     1M         ldy #0
00:0F1C B116            	     2M         lda (wrd1),y
00:0F1E 8D00D0          	     3M         sta sp0x    
                        	   207:         ldbptr wrd1, 1, sp0y    ;store node y loc into sp0y
00:0F21 A001            	     1M         ldy #1
00:0F23 B116            	     2M         lda (wrd1),y
00:0F25 8D01D0          	     3M         sta sp0y    
00:0F28 A41A            	   208:         ldy tmp                 ;new direction?
00:0F2A F014            	   209:         beq chkcon              ;no, check for node in current direction
00:0F2C B116            	   210:         lda (wrd1),y            ;yes, load node in new dir
00:0F2E C9FF            	   211:         cmp #$ff
00:0F30 F00E            	   212:         beq chkcon
00:0F32 C91E            	   213:         cmp #gsthmnd
00:0F34 F00A            	   214:         beq chkcon
00:0F36 859F            	   215:         sta pactar
00:0F38 84A3            	   216:         sty pacdir
00:0F3A 204F0B          	   217:         jsr setnodis
00:0F3D 4C6B0E          	   218:         jmp gameloop
00:0F40 A4A3            	   219: chkcon: ldy pacdir
00:0F42 B116            	   220:         lda (wrd1),y
00:0F44 C9FF            	   221:         cmp #$ff
                        	   222:         jeq gameloop            ;if nowhere to go, return to gameloop
00:0F46 D003            	     1M         bne :+
00:0F48 4C6B0E          	     2M         jmp gameloop            
                        	     3M :
00:0F4B 859F            	   223:         sta pactar              ;set new target...
00:0F4D 204F0B          	   224:         jsr setnodis            ;... and calculate distance
00:0F50 4C6B0E          	   225:         jmp gameloop
                        	   226: 

Source: "src/startup.asm"
                        	    27:         include score.asm

Source: "score.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Score related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Score fruit (pts vary by level)
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Reads:
                        	     8:         ;;  - lvlnum
                        	     9:         ;; Writes:
                        	    10:         ;;  - irqwrd2
                        	    11:         ;;  - score
00:0F53 20970F          	    12: scrfrt: jsr lvlfrtpts           ;read fruit points
00:0F56 841B            	    13:         sty irqwrd1
00:0F58 851C            	    14:         sta irqwrd1+1
00:0F5A A205            	    15:         ldx #irqblki
00:0F5C 4C790F          	    16:         jmp addscr
                        	    17:         
                        	    18:         ;; Score pellet (10 pts)
                        	    19:         ;; Reads:
                        	    20:         ;;  - .X (offset to memory block)
                        	    21:         ;; Writes:
                        	    22:         ;;  - score
00:0F5F A910            	    23: scrpel: lda #pellpts
00:0F61 9516            	    24:         sta buf,x
00:0F63 E8              	    25:         inx
00:0F64 A900            	    26:         lda #0
00:0F66 9516            	    27:         sta buf,x
00:0F68 CA              	    28:         dex
00:0F69 4C790F          	    29:         jmp addscr
                        	    30: 
                        	    31:         ;; Score energizer (50 pts)
                        	    32:         ;; Reads:
                        	    33:         ;;  - .X (offset to memory block)
                        	    34:         ;; Writes:
                        	    35:         ;;  - 1st word in memory block
                        	    36:         ;;  - score
                        	    37: screnzr:
00:0F6C A950            	    38:         lda #enzrpts
00:0F6E 9516            	    39:         sta buf,x
00:0F70 E8              	    40:         inx
00:0F71 A900            	    41:         lda #0
00:0F73 9516            	    42:         sta buf,x
00:0F75 CA              	    43:         dex
00:0F76 4C790F          	    44:         jmp addscr
                        	    45:       
                        	    46:         ;; Add 16-bit BCD value to score
                        	    47:         ;; Reads:
                        	    48:         ;;  - .X: index into buffer to access memory block
                        	    49:         ;;  - 1st word in memory block containing 4 BCD digits
                        	    50:         ;; Writes:
                        	    51:         ;;  - score
00:0F79 F8              	    52: addscr: sed
00:0F7A 18              	    53:         clc
00:0F7B A5FC            	    54:         lda score
00:0F7D 7516            	    55:         adc buf,x
00:0F7F 85FC            	    56:         sta score
00:0F81 A5FD            	    57:         lda score+1
00:0F83 E8              	    58:         inx
00:0F84 7516            	    59:         adc buf,x 
00:0F86 85FD            	    60:         sta score+1
00:0F88 A5FE            	    61:         lda score+2
00:0F8A 6900            	    62:         adc #0
00:0F8C 85FE            	    63:         sta score+2
00:0F8E A5FF            	    64:         lda score+3
00:0F90 6900            	    65:         adc #0
00:0F92 85FF            	    66:         sta score+3
00:0F94 D8              	    67:         cld
00:0F95 CA              	    68:         dex
00:0F96 60              	    69:         rts
                        	    70: 

Source: "src/startup.asm"
                        	    28:         include fruit.asm

Source: "fruit.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Fruit related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Get fruit bonus points by level number
                        	     6:         ;; Reads:
                        	     7:         ;;  - lvlnum
                        	     8:         ;;  - frtsptbl
                        	     9:         ;; Write:
                        	    10:         ;;  - .Y (points lo-byte)
                        	    11:         ;;  - .A (points hi-byte)
                        	    12:         ;; Clobbers:
                        	    13:         ;;  - .X
                        	    14: lvlfrtpts:
00:0F97 A200            	    15:         ldx #0
00:0F99 BD0116          	    16: :       lda frtsptbl,x
00:0F9C C5A8            	    17:         cmp lvlnum
00:0F9E F00D            	    18:         beq :++
00:0FA0 B009            	    19:         bcs :+
00:0FA2 E8              	    20:         inx
00:0FA3 E8              	    21:         inx
00:0FA4 E8              	    22:         inx
00:0FA5 E8              	    23:         inx
00:0FA6 E8              	    24:         inx
00:0FA7 E8              	    25:         inx
00:0FA8 4C990F          	    26:         jmp :-
00:0FAB A248            	    27: :       ldx #maxftx
00:0FAD E8              	    28: :       inx
00:0FAE E8              	    29:         inx
00:0FAF E8              	    30:         inx
00:0FB0 E8              	    31:         inx
00:0FB1 BD0116          	    32:         lda frtsptbl,x          ;load points (lo)
00:0FB4 A8              	    33:         tay
00:0FB5 E8              	    34:         inx
00:0FB6 BD0116          	    35:         lda frtsptbl,x          ;load points (hi)
00:0FB9 60              	    36:         rts
                        	    37: 
                        	    38:         ;; Get fruit sprite index by level number
                        	    39:         ;; Reads:
                        	    40:         ;;  - lvlnum
                        	    41:         ;;  - frtsptbl
                        	    42:         ;; Writes:
                        	    43:         ;;  - .A (fruit sprite index)
                        	    44:         ;; Clobbers:
                        	    45:         ;;  - .X
                        	    46: lvlfrtspix:
00:0FBA A200            	    47:         ldx #0
00:0FBC BD0116          	    48: :       lda frtsptbl,x
00:0FBF C5A8            	    49:         cmp lvlnum
00:0FC1 F00D            	    50:         beq :++
00:0FC3 B009            	    51:         bcs :+                  ;found row for level?
00:0FC5 E8              	    52:         inx
00:0FC6 E8              	    53:         inx
00:0FC7 E8              	    54:         inx
00:0FC8 E8              	    55:         inx
00:0FC9 E8              	    56:         inx
00:0FCA E8              	    57:         inx
00:0FCB 4CBC0F          	    58:         jmp :-                  ;no, keep looking
00:0FCE A248            	    59: :       ldx #maxftx
00:0FD0 E8              	    60: :       inx                     ;yes...
00:0FD1 BD0116          	    61:         lda frtsptbl,x          ;...load sprite index
00:0FD4 60              	    62:         rts
                        	    63: 
                        	    64:         ;; Get fruit sprite shape memory offset
                        	    65:         ;; Reads:
                        	    66:         ;;  - lvlnum
                        	    67:         ;;  - frtsptbl
                        	    68:         ;; Writes:
                        	    69:         ;;  - .Y (offset lo byte)
                        	    70:         ;;  - .A (offset hi byte)
                        	    71:         ;; Clobbers:
                        	    72:         ;;  - .X
                        	    73: lvlfrtspof:
00:0FD5 A200            	    74:         ldx #0
00:0FD7 BD0116          	    75: :       lda frtsptbl,x
00:0FDA C5A8            	    76:         cmp lvlnum
00:0FDC F00D            	    77:         beq :++
00:0FDE B009            	    78:         bcs :+                  ;found row for level?
00:0FE0 E8              	    79:         inx
00:0FE1 E8              	    80:         inx
00:0FE2 E8              	    81:         inx
00:0FE3 E8              	    82:         inx
00:0FE4 E8              	    83:         inx
00:0FE5 E8              	    84:         inx
00:0FE6 4CD70F          	    85:         jmp :-                  ;no, keep looking
00:0FE9 A248            	    86: :       ldx #maxftx
00:0FEB E8              	    87: :       inx                     ;yes...
00:0FEC E8              	    88:         inx
00:0FED BD0116          	    89:         lda frtsptbl,x          ;load offset (lo)
00:0FF0 A8              	    90:         tay
00:0FF1 E8              	    91:         inx
00:0FF2 BD0116          	    92:         lda frtsptbl,x          ;load offset (hi)
00:0FF5 60              	    93:         rts
                        	    94:         
                        	    95:         ;; Check number of pellets remaining and enable fruit if
                        	    96:         ;; - 130 pellets remaining OR
                        	    97:         ;; - 55 pellets remaining
                        	    98:         ;; May only be called from IRQ handler!
                        	    99:         ;; Clobbers:
                        	   100:         ;;  - irqwrd1
                        	   101: showfrt:
00:0FF6 A5A6            	   102:         lda npelrem
00:0FF8 C982            	   103:         cmp #130
00:0FFA F005            	   104:         beq :+
00:0FFC C937            	   105:         cmp #55
00:0FFE F001            	   106:         beq :+
00:1000 60              	   107:         rts
                        	   108:         ;; Set sprite pointers
00:1001 20BA0F          	   109: :       jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:1004 18              	   110:         clc
00:1005 6940            	   111:         adc #sp0loc
00:1007 8DF94F          	   112:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	   113:         ina                     ;increment .A
00:100A A8              	     1M         tay
00:100B C8              	     2M         iny
00:100C 98              	     3M         tya
00:100D 8DFA4F          	   114:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	   115:         ;; Set sprite colours
00:1010 20D50F          	   116:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:1013 841B            	   117:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:1015 851C            	   118:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	   119:         adcwimm sp0mem, irqwrd1
00:1017 18              	     1M         clc
00:1018 A51B            	     2M         lda irqwrd1
00:101A 6900            	     3M         adc #<sp0mem
00:101C 851B            	     4M         sta irqwrd1
00:101E A51C            	     5M         lda irqwrd1+1
00:1020 6950            	     6M         adc #>sp0mem
00:1022 851C            	     7M         sta irqwrd1+1
00:1024 A03F            	   120:         ldy #$3f                ;index to sprite colour value
00:1026 B11B            	   121:         lda (irqwrd1),y         ;load sprite colour value
00:1028 290F            	   122:         and #%00001111          ;mask out hi nybble
00:102A 8D28D0          	   123:         sta sp0col+1            ;write to sprite 1 colour register
                        	   124:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:102D 18              	     1M         clc
00:102E A51B            	     2M         lda irqwrd1  
00:1030 6940            	     3M         adc #<$0040
00:1032 851B            	     4M         sta irqwrd1  
00:1034 A51C            	     5M         lda irqwrd1  +1
00:1036 6900            	     6M         adc #>$0040
00:1038 851C            	     7M         sta irqwrd1  +1
00:103A B11B            	   125:         lda (irqwrd1),y         ;load sprite colour value
00:103C 290F            	   126:         and #%00001111          ;mask out hi nybble
00:103E 8D29D0          	   127:         sta sp0col+2            ;write to sprite 2 colour register
                        	   128:         ;; Set sprite x,y locations
                        	   129:         ldbimm frxpos, sp1x
00:1041 A967            	     1M         lda #frxpos
00:1043 8D02D0          	     2M         sta sp1x
                        	   130:         ldbimm frxpos, sp2x
00:1046 A967            	     1M         lda #frxpos
00:1048 8D04D0          	     2M         sta sp2x
                        	   131:         ldbimm frypos, sp1y
00:104B A9A2            	     1M         lda #frypos
00:104D 8D03D0          	     2M         sta sp1y
                        	   132:         ldbimm frypos, sp2y
00:1050 A9A2            	     1M         lda #frypos
00:1052 8D05D0          	     2M         sta sp2y
                        	   133:         ;; Enable sprites 1+2
00:1055 AD15D0          	   134:         lda spena
00:1058 0906            	   135:         ora #%00000110
00:105A 8D15D0          	   136:         sta spena
                        	   137:         ;; Start fruit timer countdown
                        	   138:         ldbimm 1, frtena
00:105D A901            	     1M         lda #1
00:105F 85A9            	     2M         sta frtena
00:1061 60              	   139:         rts
                        	   140: 
                        	   141:         ;; Hide fruit
                        	   142: hidefrt:
00:1062 AD15D0          	   143:         lda spena
00:1065 29F9            	   144:         and #%11111001
00:1067 8D15D0          	   145:         sta spena               ;disable sprites 1+2
                        	   146:         ldbimm 0, frtena        ;disable fruit timer
00:106A A900            	     1M         lda #0
00:106C 85A9            	     2M         sta frtena        
00:106E 60              	   147:         rts
                        	   148: 

Source: "src/startup.asm"
                        	    29: 
                        	    30:         ;; Include tables
                        	    31:         .include tables.asm

Source: "tables.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Data table definitions
                        	     3:         ;; ============================================================
                        	     4:         
                        	     5:         ;; Node table
                        	     6:         ;; Format:        
                        	     7:         ;;  .byte x,y (node loc in sprite coords)
                        	     8:         ;;  .byte n,s,w,e (indices of neighboring nodes)
                        	     9: nodetbl:
                        	    10:         ;; Row 1
00:106F 20              	    11:         .byte $20,$3a,$ff,$06,$ff,$01
00:1070 3A
00:1071 FF
00:1072 06
00:1073 FF
00:1074 01
00:1075 40              	    12:         .byte $40,$3a,$ff,$07,$00,$02
00:1076 3A
00:1077 FF
00:1078 07
00:1079 00
00:107A 02
00:107B 60              	    13:         .byte $60,$3a,$ff,$09,$01,$ff
00:107C 3A
00:107D FF
00:107E 09
00:107F 01
00:1080 FF
00:1081 70              	    14:         .byte $70,$3a,$ff,$0a,$ff,$04
00:1082 3A
00:1083 FF
00:1084 0A
00:1085 FF
00:1086 04
00:1087 90              	    15:         .byte $90,$3a,$ff,$0c,$03,$05
00:1088 3A
00:1089 FF
00:108A 0C
00:108B 03
00:108C 05
00:108D B0              	    16:         .byte $b0,$3a,$ff,$0d,$04,$ff
00:108E 3A
00:108F FF
00:1090 0D
00:1091 04
00:1092 FF
                        	    17:         ;; Row 2
00:1093 20              	    18:         .byte $20,$52,$00,$0e,$ff,$07
00:1094 52
00:1095 00
00:1096 0E
00:1097 FF
00:1098 07
00:1099 40              	    19:         .byte $40,$52,$01,$0f,$06,$08
00:109A 52
00:109B 01
00:109C 0F
00:109D 06
00:109E 08
00:109F 50              	    20:         .byte $50,$52,$ff,$10,$07,$09
00:10A0 52
00:10A1 FF
00:10A2 10
00:10A3 07
00:10A4 09
00:10A5 60              	    21:         .byte $60,$52,$02,$ff,$08,$0a
00:10A6 52
00:10A7 02
00:10A8 FF
00:10A9 08
00:10AA 0A
00:10AB 70              	    22:         .byte $70,$52,$03,$ff,$09,$0b
00:10AC 52
00:10AD 03
00:10AE FF
00:10AF 09
00:10B0 0B
00:10B1 80              	    23:         .byte $80,$52,$ff,$13,$0a,$0c
00:10B2 52
00:10B3 FF
00:10B4 13
00:10B5 0A
00:10B6 0C
00:10B7 90              	    24:         .byte $90,$52,$04,$14,$0b,$0d
00:10B8 52
00:10B9 04
00:10BA 14
00:10BB 0B
00:10BC 0D
00:10BD B0              	    25:         .byte $b0,$52,$05,$15,$0c,$ff
00:10BE 52
00:10BF 05
00:10C0 15
00:10C1 0C
00:10C2 FF
                        	    26:         ;; Row 3
00:10C3 20              	    27:         .byte $20,$6a,$06,$ff,$ff,$0f
00:10C4 6A
00:10C5 06
00:10C6 FF
00:10C7 FF
00:10C8 0F
00:10C9 40              	    28:         .byte $40,$6a,$07,$1c,$0e,$ff
00:10CA 6A
00:10CB 07
00:10CC 1C
00:10CD 0E
00:10CE FF
00:10CF 50              	    29:         .byte $50,$6a,$08,$ff,$ff,$11
00:10D0 6A
00:10D1 08
00:10D2 FF
00:10D3 FF
00:10D4 11
00:10D5 60              	    30:         .byte $60,$6a,$ff,$17,$10,$ff
00:10D6 6A
00:10D7 FF
00:10D8 17
00:10D9 10
00:10DA FF
00:10DB 70              	    31:         .byte $70,$6a,$ff,$19,$ff,$13
00:10DC 6A
00:10DD FF
00:10DE 19
00:10DF FF
00:10E0 13
00:10E1 80              	    32:         .byte $80,$6a,$0b,$ff,$12,$ff
00:10E2 6A
00:10E3 0B
00:10E4 FF
00:10E5 12
00:10E6 FF
00:10E7 90              	    33:         .byte $90,$6a,$0c,$20,$ff,$15
00:10E8 6A
00:10E9 0C
00:10EA 20
00:10EB FF
00:10EC 15
00:10ED B0              	    34:         .byte $b0,$6a,$0d,$ff,$14,$ff
00:10EE 6A
00:10EF 0D
00:10F0 FF
00:10F1 14
00:10F2 FF
                        	    35:         ;; Row 4
00:10F3 50              	    36:         .byte $50,$7a,$ff,$1d,$ff,$17
00:10F4 7A
00:10F5 FF
00:10F6 1D
00:10F7 FF
00:10F8 17
00:10F9 60              	    37:         .byte $60,$7a,$11,$ff,$16,$18
00:10FA 7A
00:10FB 11
00:10FC FF
00:10FD 16
00:10FE 18
00:10FF 68              	    38:         .byte $68,$7a,$ff,$1e,$17,$19
00:1100 7A
00:1101 FF
00:1102 1E
00:1103 17
00:1104 19
00:1105 70              	    39:         .byte $70,$7a,$12,$ff,$18,$1a
00:1106 7A
00:1107 12
00:1108 FF
00:1109 18
00:110A 1A
00:110B 80              	    40:         .byte $80,$7a,$ff,$1f,$19,$ff
00:110C 7A
00:110D FF
00:110E 1F
00:110F 19
00:1110 FF
                        	    41:         ;; Row 5
00:1111 18              	    42:         .byte $18,$92,$ff,$ff,$21,$1c
00:1112 92
00:1113 FF
00:1114 FF
00:1115 21
00:1116 1C
00:1117 40              	    43:         .byte $40,$92,$0f,$25,$1b,$1d
00:1118 92
00:1119 0F
00:111A 25
00:111B 1B
00:111C 1D
00:111D 50              	    44:         .byte $50,$92,$16,$22,$1c,$ff
00:111E 92
00:111F 16
00:1120 22
00:1121 1C
00:1122 FF
00:1123 68              	    45:         .byte $68,$92,$18,$ff,$ff,$ff
00:1124 92
00:1125 18
00:1126 FF
00:1127 FF
00:1128 FF
00:1129 80              	    46:         .byte $80,$92,$1a,$23,$ff,$20
00:112A 92
00:112B 1A
00:112C 23
00:112D FF
00:112E 20
00:112F 90              	    47:         .byte $90,$92,$14,$2a,$1f,$21
00:1130 92
00:1131 14
00:1132 2A
00:1133 1F
00:1134 21
00:1135 B8              	    48:         .byte $b8,$92,$ff,$ff,$20,$1b
00:1136 92
00:1137 FF
00:1138 FF
00:1139 20
00:113A 1B
                        	    49:         ;; Row 6
00:113B 50              	    50:         .byte $50,$a2,$1d,$26,$ff,$23
00:113C A2
00:113D 1D
00:113E 26
00:113F FF
00:1140 23
00:1141 80              	    51:         .byte $80,$a2,$1f,$29,$22,$ff
00:1142 A2
00:1143 1F
00:1144 29
00:1145 22
00:1146 FF
                        	    52:         ;; Row 7
00:1147 20              	    53:         .byte $20,$ba,$ff,$2c,$ff,$25
00:1148 BA
00:1149 FF
00:114A 2C
00:114B FF
00:114C 25
00:114D 40              	    54:         .byte $40,$ba,$1c,$2e,$24,$26
00:114E BA
00:114F 1C
00:1150 2E
00:1151 24
00:1152 26
00:1153 50              	    55:         .byte $50,$ba,$22,$ff,$25,$27
00:1154 BA
00:1155 22
00:1156 FF
00:1157 25
00:1158 27
00:1159 60              	    56:         .byte $60,$ba,$ff,$30,$26,$ff
00:115A BA
00:115B FF
00:115C 30
00:115D 26
00:115E FF
00:115F 70              	    57:         .byte $70,$ba,$ff,$32,$ff,$29
00:1160 BA
00:1161 FF
00:1162 32
00:1163 FF
00:1164 29
00:1165 80              	    58:         .byte $80,$ba,$23,$ff,$28,$2a
00:1166 BA
00:1167 23
00:1168 FF
00:1169 28
00:116A 2A
00:116B 90              	    59:         .byte $90,$ba,$20,$34,$29,$2b
00:116C BA
00:116D 20
00:116E 34
00:116F 29
00:1170 2B
00:1171 B0              	    60:         .byte $b0,$ba,$ff,$36,$2a,$ff
00:1172 BA
00:1173 FF
00:1174 36
00:1175 2A
00:1176 FF
                        	    61:         ;; Row 8
00:1177 20              	    62:         .byte $20,$ca,$24,$ff,$ff,$2d
00:1178 CA
00:1179 24
00:117A FF
00:117B FF
00:117C 2D
00:117D 30              	    63:         .byte $30,$ca,$ff,$38,$2c,$ff
00:117E CA
00:117F FF
00:1180 38
00:1181 2C
00:1182 FF
00:1183 40              	    64:         .byte $40,$ca,$25,$39,$ff,$2f
00:1184 CA
00:1185 25
00:1186 39
00:1187 FF
00:1188 2F
00:1189 50              	    65:         .byte $50,$ca,$ff,$3a,$2e,$30
00:118A CA
00:118B FF
00:118C 3A
00:118D 2E
00:118E 30
00:118F 60              	    66:         .byte $60,$ca,$27,$ff,$2f,$31
00:1190 CA
00:1191 27
00:1192 FF
00:1193 2F
00:1194 31
00:1195 68              	    67:         .byte $68,$ca,$ff,$ff,$30,$32
00:1196 CA
00:1197 FF
00:1198 FF
00:1199 30
00:119A 32
00:119B 70              	    68:         .byte $70,$ca,$28,$ff,$31,$33
00:119C CA
00:119D 28
00:119E FF
00:119F 31
00:11A0 33
00:11A1 80              	    69:         .byte $80,$ca,$ff,$3d,$32,$34
00:11A2 CA
00:11A3 FF
00:11A4 3D
00:11A5 32
00:11A6 34
00:11A7 90              	    70:         .byte $90,$ca,$2a,$3e,$33,$ff
00:11A8 CA
00:11A9 2A
00:11AA 3E
00:11AB 33
00:11AC FF
00:11AD A0              	    71:         .byte $a0,$ca,$ff,$3f,$ff,$36
00:11AE CA
00:11AF FF
00:11B0 3F
00:11B1 FF
00:11B2 36
00:11B3 B0              	    72:         .byte $b0,$ca,$2b,$ff,$35,$ff
00:11B4 CA
00:11B5 2B
00:11B6 FF
00:11B7 35
00:11B8 FF
                        	    73:         ;; Row 9
00:11B9 20              	    74:         .byte $20,$da,$ff,$41,$ff,$38
00:11BA DA
00:11BB FF
00:11BC 41
00:11BD FF
00:11BE 38
00:11BF 30              	    75:         .byte $30,$da,$2d,$ff,$37,$39
00:11C0 DA
00:11C1 2D
00:11C2 FF
00:11C3 37
00:11C4 39
00:11C5 40              	    76:         .byte $40,$da,$2e,$ff,$38,$ff
00:11C6 DA
00:11C7 2E
00:11C8 FF
00:11C9 38
00:11CA FF
00:11CB 50              	    77:         .byte $50,$da,$2f,$ff,$ff,$3b
00:11CC DA
00:11CD 2F
00:11CE FF
00:11CF FF
00:11D0 3B
00:11D1 60              	    78:         .byte $60,$da,$ff,$42,$3a,$ff
00:11D2 DA
00:11D3 FF
00:11D4 42
00:11D5 3A
00:11D6 FF
00:11D7 70              	    79:         .byte $70,$da,$ff,$43,$ff,$3d
00:11D8 DA
00:11D9 FF
00:11DA 43
00:11DB FF
00:11DC 3D
00:11DD 80              	    80:         .byte $80,$da,$33,$ff,$3c,$ff
00:11DE DA
00:11DF 33
00:11E0 FF
00:11E1 3C
00:11E2 FF
00:11E3 90              	    81:         .byte $90,$da,$34,$ff,$ff,$3f
00:11E4 DA
00:11E5 34
00:11E6 FF
00:11E7 FF
00:11E8 3F
00:11E9 A0              	    82:         .byte $a0,$da,$35,$ff,$3e,$40
00:11EA DA
00:11EB 35
00:11EC FF
00:11ED 3E
00:11EE 40
00:11EF B0              	    83:         .byte $b0,$da,$ff,$44,$3f,$ff
00:11F0 DA
00:11F1 FF
00:11F2 44
00:11F3 3F
00:11F4 FF
                        	    84:         ;; Row 10
00:11F5 20              	    85:         .byte $20,$ea,$37,$ff,$ff,$42
00:11F6 EA
00:11F7 37
00:11F8 FF
00:11F9 FF
00:11FA 42
00:11FB 60              	    86:         .byte $60,$ea,$3b,$ff,$41,$43
00:11FC EA
00:11FD 3B
00:11FE FF
00:11FF 41
00:1200 43
00:1201 70              	    87:         .byte $70,$ea,$3c,$ff,$42,$44
00:1202 EA
00:1203 3C
00:1204 FF
00:1205 42
00:1206 44
00:1207 B0              	    88:         .byte $b0,$ea,$40,$ff,$43,$ff
00:1208 EA
00:1209 40
00:120A FF
00:120B 43
00:120C FF
                        	    89: 
                        	    90: 
                        	    91:         ;; Pellet table
                        	    92:         ;; Format:        
                        	    93:         ;;  .word address (screen memory address)
                        	    94:         ;;  .byte status (0=eaten, 1=not eaten)
                        	    95:         ;;  .byte x,y (sprite coordinates of char)
                        	    96: pelltbl:
                        	    97:         ;; Row 1
00:120D 2900            	    98:         .word $0029
00:120F 01              	    99:         .byte 1,$20,$3a
00:1210 20
00:1211 3A
00:1212 2A00            	   100:         .word $002a
00:1214 01              	   101:         .byte 1,$28,$3a
00:1215 28
00:1216 3A
00:1217 2B00            	   102:         .word $002b
00:1219 01              	   103:         .byte 1,$30,$3a
00:121A 30
00:121B 3A
00:121C 2C00            	   104:         .word $002c
00:121E 01              	   105:         .byte 1,$38,$3a
00:121F 38
00:1220 3A
00:1221 2D00            	   106:         .word $002d
00:1223 01              	   107:         .byte 1,$40,$3a
00:1224 40
00:1225 3A
00:1226 2E00            	   108:         .word $002e
00:1228 01              	   109:         .byte 1,$48,$3a
00:1229 48
00:122A 3A
00:122B 2F00            	   110:         .word $002f
00:122D 01              	   111:         .byte 1,$50,$3a
00:122E 50
00:122F 3A
00:1230 3000            	   112:         .word $0030
00:1232 01              	   113:         .byte 1,$58,$3a
00:1233 58
00:1234 3A
00:1235 3100            	   114:         .word $0031
00:1237 01              	   115:         .byte 1,$60,$3a
00:1238 60
00:1239 3A
00:123A 3300            	   116:         .word $0033
00:123C 01              	   117:         .byte 1,$70,$3a
00:123D 70
00:123E 3A
00:123F 3400            	   118:         .word $0034
00:1241 01              	   119:         .byte 1,$78,$3a
00:1242 78
00:1243 3A
00:1244 3500            	   120:         .word $0035
00:1246 01              	   121:         .byte 1,$80,$3a
00:1247 80
00:1248 3A
00:1249 3600            	   122:         .word $0036
00:124B 01              	   123:         .byte 1,$88,$3a
00:124C 88
00:124D 3A
00:124E 3700            	   124:         .word $0037
00:1250 01              	   125:         .byte 1,$90,$3a
00:1251 90
00:1252 3A
00:1253 3800            	   126:         .word $0038
00:1255 01              	   127:         .byte 1,$98,$3a
00:1256 98
00:1257 3A
00:1258 3900            	   128:         .word $0039
00:125A 01              	   129:         .byte 1,$a0,$3a
00:125B A0
00:125C 3A
00:125D 3A00            	   130:         .word $003a
00:125F 01              	   131:         .byte 1,$a8,$3a
00:1260 A8
00:1261 3A
00:1262 3B00            	   132:         .word $003b
00:1264 01              	   133:         .byte 1,$b0,$3a
00:1265 B0
00:1266 3A
                        	   134:         ;; Row 2
00:1267 5100            	   135:         .word $0051
00:1269 01              	   136:         .byte 1,$20,$42          ;energizer
00:126A 20
00:126B 42
00:126C 5500            	   137:         .word $0055
00:126E 01              	   138:         .byte 1,$40,$42
00:126F 40
00:1270 42
00:1271 5900            	   139:         .word $0059
00:1273 01              	   140:         .byte 1,$60,$42
00:1274 60
00:1275 42
00:1276 5B00            	   141:         .word $005b
00:1278 01              	   142:         .byte 1,$70,$42
00:1279 70
00:127A 42
00:127B 5F00            	   143:         .word $005f
00:127D 01              	   144:         .byte 1,$90,$42
00:127E 90
00:127F 42
00:1280 6300            	   145:         .word $0063
00:1282 01              	   146:         .byte 1,$b0,$42          ;energizer
00:1283 B0
00:1284 42
                        	   147:         ;; Row 3
00:1285 7900            	   148:         .word $0079
00:1287 01              	   149:         .byte 1,$20,$4a
00:1288 20
00:1289 4A
00:128A 7D00            	   150:         .word $007d
00:128C 01              	   151:         .byte 1,$40,$4a
00:128D 40
00:128E 4A
00:128F 8100            	   152:         .word $0081
00:1291 01              	   153:         .byte 1,$60,$4a
00:1292 60
00:1293 4A
00:1294 8300            	   154:         .word $0083
00:1296 01              	   155:         .byte 1,$70,$4a
00:1297 70
00:1298 4A
00:1299 8700            	   156:         .word $0087
00:129B 01              	   157:         .byte 1,$90,$4a
00:129C 90
00:129D 4A
00:129E 8B00            	   158:         .word $008b
00:12A0 01              	   159:         .byte 1,$b0,$4a
00:12A1 B0
00:12A2 4A
                        	   160:         ;; Row 4
00:12A3 A100            	   161:         .word $00a1
00:12A5 01              	   162:         .byte 1,$20,$52
00:12A6 20
00:12A7 52
00:12A8 A200            	   163:         .word $00a2
00:12AA 01              	   164:         .byte 1,$28,$52
00:12AB 28
00:12AC 52
00:12AD A300            	   165:         .word $00a3
00:12AF 01              	   166:         .byte 1,$30,$52
00:12B0 30
00:12B1 52
00:12B2 A400            	   167:         .word $00a4
00:12B4 01              	   168:         .byte 1,$38,$52
00:12B5 38
00:12B6 52
00:12B7 A500            	   169:         .word $00a5
00:12B9 01              	   170:         .byte 1,$40,$52
00:12BA 40
00:12BB 52
00:12BC A600            	   171:         .word $00a6
00:12BE 01              	   172:         .byte 1,$48,$52
00:12BF 48
00:12C0 52
00:12C1 A700            	   173:         .word $00a7
00:12C3 01              	   174:         .byte 1,$50,$52
00:12C4 50
00:12C5 52
00:12C6 A800            	   175:         .word $00a8
00:12C8 01              	   176:         .byte 1,$58,$52
00:12C9 58
00:12CA 52
00:12CB A900            	   177:         .word $00a9
00:12CD 01              	   178:         .byte 1,$60,$52
00:12CE 60
00:12CF 52
00:12D0 AA00            	   179:         .word $00aa
00:12D2 01              	   180:         .byte 1,$68,$52
00:12D3 68
00:12D4 52
00:12D5 AB00            	   181:         .word $00ab
00:12D7 01              	   182:         .byte 1,$70,$52
00:12D8 70
00:12D9 52
00:12DA AC00            	   183:         .word $00ac
00:12DC 01              	   184:         .byte 1,$78,$52
00:12DD 78
00:12DE 52
00:12DF AD00            	   185:         .word $00ad
00:12E1 01              	   186:         .byte 1,$80,$52
00:12E2 80
00:12E3 52
00:12E4 AE00            	   187:         .word $00ae
00:12E6 01              	   188:         .byte 1,$88,$52
00:12E7 88
00:12E8 52
00:12E9 AF00            	   189:         .word $00af
00:12EB 01              	   190:         .byte 1,$90,$52
00:12EC 90
00:12ED 52
00:12EE B000            	   191:         .word $00b0
00:12F0 01              	   192:         .byte 1,$98,$52
00:12F1 98
00:12F2 52
00:12F3 B100            	   193:         .word $00b1
00:12F5 01              	   194:         .byte 1,$a0,$52
00:12F6 A0
00:12F7 52
00:12F8 B200            	   195:         .word $00b2
00:12FA 01              	   196:         .byte 1,$a8,$52
00:12FB A8
00:12FC 52
00:12FD B300            	   197:         .word $00b3
00:12FF 01              	   198:         .byte 1,$b0,$52
00:1300 B0
00:1301 52
                        	   199:         ;; Row 5
00:1302 C900            	   200:         .word $00c9
00:1304 01              	   201:         .byte 1,$20,$5a
00:1305 20
00:1306 5A
00:1307 CD00            	   202:         .word $00cd
00:1309 01              	   203:         .byte 1,$40,$5a
00:130A 40
00:130B 5A
00:130C CF00            	   204:         .word $00cf
00:130E 01              	   205:         .byte 1,$50,$5a
00:130F 50
00:1310 5A
00:1311 D500            	   206:         .word $00d5
00:1313 01              	   207:         .byte 1,$80,$5a
00:1314 80
00:1315 5A
00:1316 D700            	   208:         .word $00d7
00:1318 01              	   209:         .byte 1,$90,$5a
00:1319 90
00:131A 5A
00:131B DB00            	   210:         .word $00db
00:131D 01              	   211:         .byte 1,$b0,$5a
00:131E B0
00:131F 5A
                        	   212:         ;; Row 6
00:1320 F100            	   213:         .word $00f1
00:1322 01              	   214:         .byte 1,$20,$62
00:1323 20
00:1324 62
00:1325 F500            	   215:         .word $00f5
00:1327 01              	   216:         .byte 1,$40,$62
00:1328 40
00:1329 62
00:132A F700            	   217:         .word $00f7
00:132C 01              	   218:         .byte 1,$50,$62
00:132D 50
00:132E 62
00:132F FD00            	   219:         .word $00fd
00:1331 01              	   220:         .byte 1,$80,$62
00:1332 80
00:1333 62
00:1334 FF00            	   221:         .word $00ff
00:1336 01              	   222:         .byte 1,$90,$62
00:1337 90
00:1338 62
00:1339 0301            	   223:         .word $0103
00:133B 01              	   224:         .byte 1,$b0,$62
00:133C B0
00:133D 62
                        	   225:         ;; Row 7
00:133E 1901            	   226:         .word $0119
00:1340 01              	   227:         .byte 1,$20,$6a
00:1341 20
00:1342 6A
00:1343 1A01            	   228:         .word $011a
00:1345 01              	   229:         .byte 1,$28,$6a
00:1346 28
00:1347 6A
00:1348 1B01            	   230:         .word $011b
00:134A 01              	   231:         .byte 1,$30,$6a
00:134B 30
00:134C 6A
00:134D 1C01            	   232:         .word $011c
00:134F 01              	   233:         .byte 1,$38,$6a
00:1350 38
00:1351 6A
00:1352 1D01            	   234:         .word $011d
00:1354 01              	   235:         .byte 1,$40,$6a
00:1355 40
00:1356 6A
00:1357 1F01            	   236:         .word $011f
00:1359 01              	   237:         .byte 1,$50,$6a
00:135A 50
00:135B 6A
00:135C 2001            	   238:         .word $0120
00:135E 01              	   239:         .byte 1,$58,$6a
00:135F 58
00:1360 6A
00:1361 2101            	   240:         .word $0121
00:1363 01              	   241:         .byte 1,$60,$6a
00:1364 60
00:1365 6A
00:1366 2301            	   242:         .word $0123
00:1368 01              	   243:         .byte 1,$70,$6a
00:1369 70
00:136A 6A
00:136B 2401            	   244:         .word $0124
00:136D 01              	   245:         .byte 1,$78,$6a
00:136E 78
00:136F 6A
00:1370 2501            	   246:         .word $0125
00:1372 01              	   247:         .byte 1,$80,$6a
00:1373 80
00:1374 6A
00:1375 2701            	   248:         .word $0127
00:1377 01              	   249:         .byte 1,$90,$6a
00:1378 90
00:1379 6A
00:137A 2801            	   250:         .word $0128
00:137C 01              	   251:         .byte 1,$98,$6a
00:137D 98
00:137E 6A
00:137F 2901            	   252:         .word $0129
00:1381 01              	   253:         .byte 1,$a0,$6a
00:1382 A0
00:1383 6A
00:1384 2A01            	   254:         .word $012a
00:1386 01              	   255:         .byte 1,$a8,$6a
00:1387 A8
00:1388 6A
00:1389 2B01            	   256:         .word $012b
00:138B 01              	   257:         .byte 1,$b0,$6a
00:138C B0
00:138D 6A
                        	   258:         ;; Row 8
00:138E 4501            	   259:         .word $0145
00:1390 01              	   260:         .byte 1,$40,$72
00:1391 40
00:1392 72
00:1393 4901            	   261:         .word $0149
00:1395 01              	   262:         .byte 1,$60,$72
00:1396 60
00:1397 72
00:1398 4B01            	   263:         .word $014b
00:139A 01              	   264:         .byte 1,$70,$72
00:139B 70
00:139C 72
00:139D 4F01            	   265:         .word $014f
00:139F 01              	   266:         .byte 1,$90,$72
00:13A0 90
00:13A1 72
                        	   267:         ;; Row 9
00:13A2 6D01            	   268:         .word $016d
00:13A4 01              	   269:         .byte 1,$40,$7a
00:13A5 40
00:13A6 7A
00:13A7 7701            	   270:         .word $0177
00:13A9 01              	   271:         .byte 1,$90,$7a
00:13AA 90
00:13AB 7A
                        	   272:         ;; Row 10
00:13AC 9501            	   273:         .word $0195
00:13AE 01              	   274:         .byte 1,$40,$82
00:13AF 40
00:13B0 82
00:13B1 9F01            	   275:         .word $019f
00:13B3 01              	   276:         .byte 1,$90,$82
00:13B4 90
00:13B5 82
                        	   277:         ;; Row 11
00:13B6 BD01            	   278:         .word $01bd
00:13B8 01              	   279:         .byte 1,$40,$8a
00:13B9 40
00:13BA 8A
00:13BB C701            	   280:         .word $01c7
00:13BD 01              	   281:         .byte 1,$90,$8a
00:13BE 90
00:13BF 8A
                        	   282:         ;; Row 12
00:13C0 E501            	   283:         .word $01e5
00:13C2 01              	   284:         .byte 1,$40,$92
00:13C3 40
00:13C4 92
00:13C5 EF01            	   285:         .word $01ef
00:13C7 01              	   286:         .byte 1,$90,$92
00:13C8 90
00:13C9 92
                        	   287:         ;; Row 13
00:13CA 0D02            	   288:         .word $020d
00:13CC 01              	   289:         .byte 1,$40,$9a
00:13CD 40
00:13CE 9A
00:13CF 1702            	   290:         .word $0217
00:13D1 01              	   291:         .byte 1,$90,$9a
00:13D2 90
00:13D3 9A
                        	   292:         ;; Row 14
00:13D4 3502            	   293:         .word $0235
00:13D6 01              	   294:         .byte 1,$40,$a2
00:13D7 40
00:13D8 A2
00:13D9 3F02            	   295:         .word $023f
00:13DB 01              	   296:         .byte 1,$90,$a2
00:13DC 90
00:13DD A2
                        	   297:         ;; Row 15
00:13DE 5D02            	   298:         .word $025d
00:13E0 01              	   299:         .byte 1,$40,$aa
00:13E1 40
00:13E2 AA
00:13E3 6702            	   300:         .word $0267
00:13E5 01              	   301:         .byte 1,$90,$aa
00:13E6 90
00:13E7 AA
                        	   302:         ;; Row 16
00:13E8 8502            	   303:         .word $0285
00:13EA 01              	   304:         .byte 1,$40,$b2
00:13EB 40
00:13EC B2
00:13ED 8F02            	   305:         .word $028f
00:13EF 01              	   306:         .byte 1,$90,$b2
00:13F0 90
00:13F1 B2
                        	   307:         ;; Row 17
00:13F2 A902            	   308:         .word $02a9
00:13F4 01              	   309:         .byte 1,$20,$ba
00:13F5 20
00:13F6 BA
00:13F7 AA02            	   310:         .word $02aa
00:13F9 01              	   311:         .byte 1,$28,$ba
00:13FA 28
00:13FB BA
00:13FC AB02            	   312:         .word $02ab
00:13FE 01              	   313:         .byte 1,$30,$ba
00:13FF 30
00:1400 BA
00:1401 AC02            	   314:         .word $02ac
00:1403 01              	   315:         .byte 1,$38,$ba
00:1404 38
00:1405 BA
00:1406 AD02            	   316:         .word $02ad
00:1408 01              	   317:         .byte 1,$40,$ba
00:1409 40
00:140A BA
00:140B AE02            	   318:         .word $02ae
00:140D 01              	   319:         .byte 1,$48,$ba
00:140E 48
00:140F BA
00:1410 AF02            	   320:         .word $02af
00:1412 01              	   321:         .byte 1,$50,$ba
00:1413 50
00:1414 BA
00:1415 B002            	   322:         .word $02b0
00:1417 01              	   323:         .byte 1,$58,$ba
00:1418 58
00:1419 BA
00:141A B102            	   324:         .word $02b1
00:141C 01              	   325:         .byte 1,$60,$ba
00:141D 60
00:141E BA
00:141F B302            	   326:         .word $02b3
00:1421 01              	   327:         .byte 1,$70,$ba
00:1422 70
00:1423 BA
00:1424 B402            	   328:         .word $02b4
00:1426 01              	   329:         .byte 1,$78,$ba
00:1427 78
00:1428 BA
00:1429 B502            	   330:         .word $02b5
00:142B 01              	   331:         .byte 1,$80,$ba
00:142C 80
00:142D BA
00:142E B602            	   332:         .word $02b6
00:1430 01              	   333:         .byte 1,$88,$ba
00:1431 88
00:1432 BA
00:1433 B702            	   334:         .word $02b7
00:1435 01              	   335:         .byte 1,$90,$ba
00:1436 90
00:1437 BA
00:1438 B802            	   336:         .word $02b8
00:143A 01              	   337:         .byte 1,$98,$ba
00:143B 98
00:143C BA
00:143D B902            	   338:         .word $02b9
00:143F 01              	   339:         .byte 1,$a0,$ba
00:1440 A0
00:1441 BA
00:1442 BA02            	   340:         .word $02ba
00:1444 01              	   341:         .byte 1,$a8,$ba
00:1445 A8
00:1446 BA
00:1447 BB02            	   342:         .word $02bb
00:1449 01              	   343:         .byte 1,$b0,$ba
00:144A B0
00:144B BA
                        	   344:         ;; Row 18
00:144C D102            	   345:         .word $02d1
00:144E 01              	   346:         .byte 1,$20,$c2
00:144F 20
00:1450 C2
00:1451 D502            	   347:         .word $02d5
00:1453 01              	   348:         .byte 1,$40,$c2
00:1454 40
00:1455 C2
00:1456 D902            	   349:         .word $02d9
00:1458 01              	   350:         .byte 1,$60,$c2
00:1459 60
00:145A C2
00:145B DB02            	   351:         .word $02db
00:145D 01              	   352:         .byte 1,$70,$c2
00:145E 70
00:145F C2
00:1460 DF02            	   353:         .word $02df
00:1462 01              	   354:         .byte 1,$90,$c2
00:1463 90
00:1464 C2
00:1465 E302            	   355:         .word $02e3
00:1467 01              	   356:         .byte 1,$b0,$c2
00:1468 B0
00:1469 C2
                        	   357:         ;; Row 19
00:146A F902            	   358:         .word $02f9
00:146C 01              	   359:         .byte 1,$20,$ca          ;energizer
00:146D 20
00:146E CA
00:146F FA02            	   360:         .word $02fa
00:1471 01              	   361:         .byte 1,$28,$ca
00:1472 28
00:1473 CA
00:1474 FB02            	   362:         .word $02fb
00:1476 01              	   363:         .byte 1,$30,$ca
00:1477 30
00:1478 CA
00:1479 FD02            	   364:         .word $02fd
00:147B 01              	   365:         .byte 1,$40,$ca
00:147C 40
00:147D CA
00:147E FE02            	   366:         .word $02fe
00:1480 01              	   367:         .byte 1,$48,$ca
00:1481 48
00:1482 CA
00:1483 FF02            	   368:         .word $02ff
00:1485 01              	   369:         .byte 1,$50,$ca
00:1486 50
00:1487 CA
00:1488 0003            	   370:         .word $0300
00:148A 01              	   371:         .byte 1,$58,$ca
00:148B 58
00:148C CA
00:148D 0103            	   372:         .word $0301
00:148F 01              	   373:         .byte 1,$60,$ca
00:1490 60
00:1491 CA
00:1492 0303            	   374:         .word $0303
00:1494 01              	   375:         .byte 1,$70,$ca
00:1495 70
00:1496 CA
00:1497 0403            	   376:         .word $0304
00:1499 01              	   377:         .byte 1,$78,$ca
00:149A 78
00:149B CA
00:149C 0503            	   378:         .word $0305
00:149E 01              	   379:         .byte 1,$80,$ca
00:149F 80
00:14A0 CA
00:14A1 0603            	   380:         .word $0306
00:14A3 01              	   381:         .byte 1,$88,$ca
00:14A4 88
00:14A5 CA
00:14A6 0703            	   382:         .word $0307
00:14A8 01              	   383:         .byte 1,$90,$ca
00:14A9 90
00:14AA CA
00:14AB 0903            	   384:         .word $0309
00:14AD 01              	   385:         .byte 1,$a0,$ca
00:14AE A0
00:14AF CA
00:14B0 0A03            	   386:         .word $030a
00:14B2 01              	   387:         .byte 1,$a8,$ca
00:14B3 A8
00:14B4 CA
00:14B5 0B03            	   388:         .word $030b
00:14B7 01              	   389:         .byte 1,$b0,$ca          ;energizer
00:14B8 B0
00:14B9 CA
                        	   390:         ;; Row 20
00:14BA 2303            	   391:         .word $0323
00:14BC 01              	   392:         .byte 1,$30,$d2
00:14BD 30
00:14BE D2
00:14BF 2503            	   393:         .word $0325
00:14C1 01              	   394:         .byte 1,$40,$d2
00:14C2 40
00:14C3 D2
00:14C4 2703            	   395:         .word $0327
00:14C6 01              	   396:         .byte 1,$50,$d2
00:14C7 50
00:14C8 D2
00:14C9 2D03            	   397:         .word $032d
00:14CB 01              	   398:         .byte 1,$80,$d2
00:14CC 80
00:14CD D2
00:14CE 2F03            	   399:         .word $032f
00:14D0 01              	   400:         .byte 1,$90,$d2
00:14D1 90
00:14D2 D2
00:14D3 3103            	   401:         .word $0331
00:14D5 01              	   402:         .byte 1,$a0,$d2
00:14D6 A0
00:14D7 D2
                        	   403:         ;; Row 21
00:14D8 4903            	   404:         .word $0349
00:14DA 01              	   405:         .byte 1,$20,$da
00:14DB 20
00:14DC DA
00:14DD 4A03            	   406:         .word $034a
00:14DF 01              	   407:         .byte 1,$28,$da
00:14E0 28
00:14E1 DA
00:14E2 4B03            	   408:         .word $034b
00:14E4 01              	   409:         .byte 1,$30,$da
00:14E5 30
00:14E6 DA
00:14E7 4C03            	   410:         .word $034c
00:14E9 01              	   411:         .byte 1,$38,$da
00:14EA 38
00:14EB DA
00:14EC 4D03            	   412:         .word $034d
00:14EE 01              	   413:         .byte 1,$40,$da
00:14EF 40
00:14F0 DA
00:14F1 4F03            	   414:         .word $034f
00:14F3 01              	   415:         .byte 1,$50,$da
00:14F4 50
00:14F5 DA
00:14F6 5003            	   416:         .word $0350
00:14F8 01              	   417:         .byte 1,$58,$da
00:14F9 58
00:14FA DA
00:14FB 5103            	   418:         .word $0351
00:14FD 01              	   419:         .byte 1,$60,$da
00:14FE 60
00:14FF DA
00:1500 5303            	   420:         .word $0353
00:1502 01              	   421:         .byte 1,$70,$da
00:1503 70
00:1504 DA
00:1505 5403            	   422:         .word $0354
00:1507 01              	   423:         .byte 1,$78,$da
00:1508 78
00:1509 DA
00:150A 5503            	   424:         .word $0355
00:150C 01              	   425:         .byte 1,$80,$da
00:150D 80
00:150E DA
00:150F 5703            	   426:         .word $0357
00:1511 01              	   427:         .byte 1,$90,$da
00:1512 90
00:1513 DA
00:1514 5803            	   428:         .word $0358
00:1516 01              	   429:         .byte 1,$98,$da
00:1517 98
00:1518 DA
00:1519 5903            	   430:         .word $0359
00:151B 01              	   431:         .byte 1,$a0,$da
00:151C A0
00:151D DA
00:151E 5A03            	   432:         .word $035a
00:1520 01              	   433:         .byte 1,$a8,$da
00:1521 A8
00:1522 DA
00:1523 5B03            	   434:         .word $035b
00:1525 01              	   435:         .byte 1,$b0,$da
00:1526 B0
00:1527 DA
                        	   436:         ;; Row 22
00:1528 7103            	   437:         .word $0371
00:152A 01              	   438:         .byte 1,$20,$e2
00:152B 20
00:152C E2
00:152D 7903            	   439:         .word $0379
00:152F 01              	   440:         .byte 1,$60,$e2
00:1530 60
00:1531 E2
00:1532 7B03            	   441:         .word $037b
00:1534 01              	   442:         .byte 1,$70,$e2
00:1535 70
00:1536 E2
00:1537 8303            	   443:         .word $0383
00:1539 01              	   444:         .byte 1,$b0,$e2
00:153A B0
00:153B E2
                        	   445:         ;; Row 23
00:153C 9903            	   446:         .word $0399
00:153E 01              	   447:         .byte 1,$20,$ea
00:153F 20
00:1540 EA
00:1541 9A03            	   448:         .word $039a
00:1543 01              	   449:         .byte 1,$28,$ea
00:1544 28
00:1545 EA
00:1546 9B03            	   450:         .word $039b
00:1548 01              	   451:         .byte 1,$30,$ea
00:1549 30
00:154A EA
00:154B 9C03            	   452:         .word $039c
00:154D 01              	   453:         .byte 1,$38,$ea
00:154E 38
00:154F EA
00:1550 9D03            	   454:         .word $039d
00:1552 01              	   455:         .byte 1,$40,$ea
00:1553 40
00:1554 EA
00:1555 9E03            	   456:         .word $039e
00:1557 01              	   457:         .byte 1,$48,$ea
00:1558 48
00:1559 EA
00:155A 9F03            	   458:         .word $039f
00:155C 01              	   459:         .byte 1,$50,$ea
00:155D 50
00:155E EA
00:155F A003            	   460:         .word $03a0
00:1561 01              	   461:         .byte 1,$58,$ea
00:1562 58
00:1563 EA
00:1564 A103            	   462:         .word $03a1
00:1566 01              	   463:         .byte 1,$60,$ea
00:1567 60
00:1568 EA
00:1569 A203            	   464:         .word $03a2
00:156B 01              	   465:         .byte 1,$68,$ea
00:156C 68
00:156D EA
00:156E A303            	   466:         .word $03a3
00:1570 01              	   467:         .byte 1,$70,$ea
00:1571 70
00:1572 EA
00:1573 A403            	   468:         .word $03a4
00:1575 01              	   469:         .byte 1,$78,$ea
00:1576 78
00:1577 EA
00:1578 A503            	   470:         .word $03a5
00:157A 01              	   471:         .byte 1,$80,$ea
00:157B 80
00:157C EA
00:157D A603            	   472:         .word $03a6
00:157F 01              	   473:         .byte 1,$88,$ea
00:1580 88
00:1581 EA
00:1582 A703            	   474:         .word $03a7
00:1584 01              	   475:         .byte 1,$90,$ea
00:1585 90
00:1586 EA
00:1587 A803            	   476:         .word $03a8
00:1589 01              	   477:         .byte 1,$98,$ea
00:158A 98
00:158B EA
00:158C A903            	   478:         .word $03a9
00:158E 01              	   479:         .byte 1,$a0,$ea
00:158F A0
00:1590 EA
00:1591 AA03            	   480:         .word $03aa
00:1593 01              	   481:         .byte 1,$a8,$ea
00:1594 A8
00:1595 EA
00:1596 AB03            	   482:         .word $03ab
00:1598 01              	   483:         .byte 1,$b0,$ea
00:1599 B0
00:159A EA
                        	   484:         ;; End marker
00:159B FFFF            	   485:         .word $ffff
00:159D FF              	   486:         .byte $ff,$ff,$ff
00:159E FF
00:159F FF
                        	   487:         
                        	   488:         ;; Energizer list
                        	   489:         ;; Index into pelltbl
                        	   490: enzrlst:
00:15A0 12              	   491:         .byte $12
00:15A1 17              	   492:         .byte $17
00:15A2 79              	   493:         .byte $79
00:15A3 88              	   494:         .byte $88
                        	   495: 
                        	   496:         ;; Pac-Man animation frames
                        	   497:         ;; Format:
                        	   498:         ;;  .byte sprite offset values
                        	   499: pacalstn:                       ;north-facing animation frames
00:15A4 00              	   500:         .byte $00,$07,$08,$09,$08,$07
00:15A5 07
00:15A6 08
00:15A7 09
00:15A8 08
00:15A9 07
                        	   501: pacalsts:                       ;south-facing animation frames
00:15AA 00              	   502:         .byte $00,$0a,$0b,$0c,$0b,$0a
00:15AB 0A
00:15AC 0B
00:15AD 0C
00:15AE 0B
00:15AF 0A
                        	   503: pacalstw:                       ;west-facing animation frames
00:15B0 00              	   504:         .byte $00,$01,$02,$03,$02,$01
00:15B1 01
00:15B2 02
00:15B3 03
00:15B4 02
00:15B5 01
                        	   505: pacalste:                       ;east-facing animation frames
00:15B6 00              	   506:         .byte $00,$04,$05,$06,$05,$04
00:15B7 04
00:15B8 05
00:15B9 06
00:15BA 05
00:15BB 04
                        	   507: 
                        	   508:         ;; Index in pelltbl of leftmost+rightmost pellet in row by sprite y loc
                        	   509:         ;; Format:
                        	   510:         ;;  .byte y (sprite y loc of row)
                        	   511:         ;;  .byte ixl (pelltbl index of leftmost pellet in row)
                        	   512:         ;;  .byte ixr (pelltbl index of rightmost pellet in row)
                        	   513: plrowix:
00:15BC 3A              	   514:         .byte $3a,$00,$11        ;row 1
00:15BD 00
00:15BE 11
00:15BF 42              	   515:         .byte $42,$12,$17        ;row 2
00:15C0 12
00:15C1 17
00:15C2 4A              	   516:         .byte $4a,$18,$1d        ;row 3
00:15C3 18
00:15C4 1D
00:15C5 52              	   517:         .byte $52,$1e,$30        ;row 4
00:15C6 1E
00:15C7 30
00:15C8 5A              	   518:         .byte $5a,$31,$36        ;row 5
00:15C9 31
00:15CA 36
00:15CB 62              	   519:         .byte $62,$37,$3c        ;row 6
00:15CC 37
00:15CD 3C
00:15CE 6A              	   520:         .byte $6a,$3d,$4c        ;row 7
00:15CF 3D
00:15D0 4C
00:15D1 72              	   521:         .byte $72,$4d,$50        ;row 8
00:15D2 4D
00:15D3 50
00:15D4 7A              	   522:         .byte $7a,$51,$52        ;row 9
00:15D5 51
00:15D6 52
00:15D7 82              	   523:         .byte $82,$53,$54        ;row 10
00:15D8 53
00:15D9 54
00:15DA 8A              	   524:         .byte $8a,$55,$56        ;row 11
00:15DB 55
00:15DC 56
00:15DD 92              	   525:         .byte $92,$57,$58        ;row 12
00:15DE 57
00:15DF 58
00:15E0 9A              	   526:         .byte $9a,$59,$5a        ;row 13
00:15E1 59
00:15E2 5A
00:15E3 A2              	   527:         .byte $a2,$5b,$5c        ;row 14
00:15E4 5B
00:15E5 5C
00:15E6 AA              	   528:         .byte $aa,$5d,$5e        ;row 15
00:15E7 5D
00:15E8 5E
00:15E9 B2              	   529:         .byte $b2,$5f,$60        ;row 16
00:15EA 5F
00:15EB 60
00:15EC BA              	   530:         .byte $ba,$61,$72        ;row 17
00:15ED 61
00:15EE 72
00:15EF C2              	   531:         .byte $c2,$73,$78        ;row 18
00:15F0 73
00:15F1 78
00:15F2 CA              	   532:         .byte $ca,$79,$88        ;row 19
00:15F3 79
00:15F4 88
00:15F5 D2              	   533:         .byte $d2,$89,$8e        ;row 20
00:15F6 89
00:15F7 8E
00:15F8 DA              	   534:         .byte $da,$8f,$9e        ;row 21
00:15F9 8F
00:15FA 9E
00:15FB E2              	   535:         .byte $e2,$9f,$a2        ;row 22
00:15FC 9F
00:15FD A2
00:15FE EA              	   536:         .byte $ea,$a3,$b5        ;row 23
00:15FF A3
00:1600 B5
                        	   537: 
                        	   538:         ;; Fruit sprite table
                        	   539:         ;; Format:
                        	   540:         ;;  .byte lvl (level number)
                        	   541:         ;;  .byte spi (sprite index)
                        	   542:         ;;  .word ofs (sp0mem offset)
                        	   543:         ;;  .word pts (bonus points: 4 BCD digits)
                        	   544: frtsptbl:
                        	   545:         ;; 1st level: Cherries
00:1601 00              	   546:         .byte $00,$0d
00:1602 0D
00:1603 4003            	   547:         .word $0d*$40,$0100
00:1605 0001
                        	   548:         ;; 2nd level: Strawberry
00:1607 01              	   549:         .byte $01,$0f
00:1608 0F
00:1609 C003            	   550:         .word $0f*$40,$0300
00:160B 0003
                        	   551:         ;; 3rd & 4th level: Peach
00:160D 02              	   552:         .byte $02,$11
00:160E 11
00:160F 4004            	   553:         .word $11*$40,$0500
00:1611 0005
00:1613 03              	   554:         .byte $03,$11
00:1614 11
00:1615 4004            	   555:         .word $11*$40,$0500
00:1617 0005
                        	   556:         ;; 5th & 6th level: Apple
00:1619 04              	   557:         .byte $04,$13
00:161A 13
00:161B C004            	   558:         .word $13*$40,$0700
00:161D 0007
00:161F 05              	   559:         .byte $05,$13
00:1620 13
00:1621 C004            	   560:         .word $13*$40,$0700
00:1623 0007
                        	   561:         ;; 7th & 8th level: Grapes
00:1625 06              	   562:         .byte $06,$15
00:1626 15
00:1627 4005            	   563:         .word $15*$40,$1000
00:1629 0010
00:162B 07              	   564:         .byte $07,$15
00:162C 15
00:162D 4005            	   565:         .word $15*$40,$1000
00:162F 0010
                        	   566:         ;; 9th & 10th levels: Galaxian
00:1631 08              	   567:         .byte $08,$17
00:1632 17
00:1633 C005            	   568:         .word $17*$40,$2000
00:1635 0020
00:1637 09              	   569:         .byte $09,$17
00:1638 17
00:1639 C005            	   570:         .word $17*$40,$2000
00:163B 0020
                        	   571:         ;; 11th & 12th level: Bell
00:163D 0A              	   572:         .byte $0a,$19
00:163E 19
00:163F 4006            	   573:         .word $19*$40,$3000
00:1641 0030
00:1643 0B              	   574:         .byte $0b,$19
00:1644 19
00:1645 4006            	   575:         .word $19*$40,$3000
00:1647 0030
                        	   576:         ;; level 13 onwards: Key
00:1649 0C              	   577:         .byte $0c,$1b
00:164A 1B
00:164B C006            	   578:         .word $1b*$40,$5000
00:164D 0050
                        	   579: 

Source: "src/startup.asm"
                        	    32:         
                        	    33:         ;; Include assets
                        	    34:         .org charset
01:4000 3C666E6E60623C00	    35:         .incbin assets/charset,2
01:4008 183C667E66666600
01:4010 7C66667C66667C00
01:4018 3C66606060663C00
01:4020 786C6666666C7800
01:4028 7E60607860607E00
01:4030 7E60607860606000
01:4038 3C66606E66663C00
01:4040 6666667E66666600
01:4048 3C18181818183C00
01:4050 1E0C0C0C0C6C3800
01:4058 666C7870786C6600
01:4060 6060606060607E00
01:4068 63777F6B63636300
01:4070 66767E7E6E666600
01:4078 3C66666666663C00
01:4080 7C66667C60606000
01:4088 3C666666663C0E00
01:4090 7C66667C786C6600
01:4098 3C66603C06663C00
01:40A0 7E18181818181800
01:40A8 6666666666663C00
01:40B0 66666666663C1800
01:40B8 6363636B7F776300
01:40C0 66663C183C666600
01:40C8 6666663C18181800
01:40D0 7E060C1830607E00
01:40D8 3C30303030303C00
01:40E0 0C12307C3062FC00
01:40E8 3C0C0C0C0C0C3C00
01:40F0 00183C7E18181818
01:40F8 0010307F7F301000
01:4100 0000000000000000
01:4108 1818181800001800
01:4110 6666660000000000
01:4118 6666FF66FF666600
01:4120 183E603C067C1800
01:4128 62660C1830664600
01:4130 3C663C3867663F00
01:4138 060C180000000000
01:4140 0C18303030180C00
01:4148 30180C0C0C183000
01:4150 00663CFF3C660000
01:4158 0018187E18180000
01:4160 0000000000181830
01:4168 0000007E00000000
01:4170 0000000000181800
01:4178 0003060C18306000
01:4180 3C666E7666663C00
01:4188 1818381818187E00
01:4190 3C66060C30607E00
01:4198 3C66061C06663C00
01:41A0 060E1E667F060600
01:41A8 7E607C0606663C00
01:41B0 3C66607C66663C00
01:41B8 7E660C1818181800
01:41C0 3C66663C66663C00
01:41C8 3C66663E06663C00
01:41D0 0000180000180000
01:41D8 0000180000181830
01:41E0 0E18306030180E00
01:41E8 00007E007E000000
01:41F0 70180C060C187000
01:41F8 3C66060C18001800
01:4200 00000F1020232424
01:4208 24242320100F0000
01:4210 0000F00804C42424
01:4218 2424C40408F00000
01:4220 0000FF0000FF0000
01:4228 2424242424242424
01:4230 2424242424180000
01:4238 0000182424242424
01:4240 0000F80404F80000
01:4248 00001F20201F0000
01:4250 0000FF0000C32424
01:4258 2424C30000FF0000
01:4260 2424232020232424
01:4268 2424C40404C42424
01:4270 00003F2020272424
01:4278 24242720203F0000
01:4280 0000FC0404E42424
01:4288 2424E40404FC0000
01:4290 000000FFFF000000
01:4298 0000001000000000
01:42A0 0000387C7C380000
01:42A8 0000000000000000
01:42B0 0000000000000000
01:42B8 0000000000000000
01:42C0 0000000000000000
01:42C8 0000000000000000
01:42D0 0000000000000000
01:42D8 0000000000000000
01:42E0 0000000000000000
01:42E8 0000000000000000
01:42F0 0000000000000000
01:42F8 0000000000000000
01:4300 0000000000000000
01:4308 0000000000000000
01:4310 0000000000000000
01:4318 0000000000000000
01:4320 0000000000000000
01:4328 0000000000000000
01:4330 0000000000000000
01:4338 0000000000000000
01:4340 0000000000000000
01:4348 0000000000000000
01:4350 0000000000000000
01:4358 0000000000000000
01:4360 0000000000000000
01:4368 0000000000000000
01:4370 0000000000000000
01:4378 0000000000000000
01:4380 0000000000000000
01:4388 0000000000000000
01:4390 0000000000000000
01:4398 0000000000000000
01:43A0 0000000000000000
01:43A8 0000000000000000
01:43B0 0000000000000000
01:43B8 0000000000000000
01:43C0 0000000000000000
01:43C8 0000000000000000
01:43D0 0000000000000000
01:43D8 0000000000000000
01:43E0 0000000000000000
01:43E8 0000000000000000
01:43F0 0000000000000000
01:43F8 0000000000000000
01:4400 0000000000000000
01:4408 0000000000000000
01:4410 0000000000000000
01:4418 0000000000000000
01:4420 0000000000000000
01:4428 0000000000000000
01:4430 0000000000000000
01:4438 0000000000000000
01:4440 0000000000000000
01:4448 0000000000000000
01:4450 0000000000000000
01:4458 0000000000000000
01:4460 0000000000000000
01:4468 0000000000000000
01:4470 0000000000000000
01:4478 0000000000000000
01:4480 0000000000000000
01:4488 0000000000000000
01:4490 0000000000000000
01:4498 0000000000000000
01:44A0 0000000000000000
01:44A8 0000000000000000
01:44B0 0000000000000000
01:44B8 0000000000000000
01:44C0 0000000000000000
01:44C8 0000000000000000
01:44D0 0000000000000000
01:44D8 0000000000000000
01:44E0 0000000000000000
01:44E8 0000000000000000
01:44F0 0000000000000000
01:44F8 0000000000000000
01:4500 0000000000000000
01:4508 0000000000000000
01:4510 0000000000000000
01:4518 0000000000000000
01:4520 0000000000000000
01:4528 0000000000000000
01:4530 0000000000000000
01:4538 0000000000000000
01:4540 0000000000000000
01:4548 0000000000000000
01:4550 0000000000000000
01:4558 0000000000000000
01:4560 0000000000000000
01:4568 0000000000000000
01:4570 0000000000000000
01:4578 0000000000000000
01:4580 0000000000000000
01:4588 0000000000000000
01:4590 0000000000000000
01:4598 0000000000000000
01:45A0 0000000000000000
01:45A8 0000000000000000
01:45B0 0000000000000000
01:45B8 0000000000000000
01:45C0 0000000000000000
01:45C8 0000000000000000
01:45D0 0000000000000000
01:45D8 0000000000000000
01:45E0 0000000000000000
01:45E8 0000000000000000
01:45F0 0000000000000000
01:45F8 0000000000000000
01:4600 0000000000000000
01:4608 0000000000000000
01:4610 0000000000000000
01:4618 0000000000000000
01:4620 0000000000000000
01:4628 0000000000000000
01:4630 0000000000000000
01:4638 0000000000000000
01:4640 0000000000000000
01:4648 0000000000000000
01:4650 0000000000000000
01:4658 0000000000000000
01:4660 0000000000000000
01:4668 0000000000000000
01:4670 0000000000000000
01:4678 0000000000000000
01:4680 0000000000000000
01:4688 0000000000000000
01:4690 0000000000000000
01:4698 0000000000000000
01:46A0 0000000000000000
01:46A8 0000000000000000
01:46B0 0000000000000000
01:46B8 0000000000000000
01:46C0 0000000000000000
01:46C8 0000000000000000
01:46D0 0000000000000000
01:46D8 0000000000000000
01:46E0 0000000000000000
01:46E8 0000000000000000
01:46F0 0000000000000000
01:46F8 0000000000000000
01:4700 0000000000000000
01:4708 0000000000000000
01:4710 0000000000000000
01:4718 0000000000000000
01:4720 0000000000000000
01:4728 0000000000000000
01:4730 0000000000000000
01:4738 0000000000000000
01:4740 0000000000000000
01:4748 0000000000000000
01:4750 0000000000000000
01:4758 0000000000000000
01:4760 0000000000000000
01:4768 0000000000000000
01:4770 0000000000000000
01:4778 0000000000000000
01:4780 0000000000000000
01:4788 0000000000000000
01:4790 0000000000000000
01:4798 0000000000000000
01:47A0 0000000000000000
01:47A8 0000000000000000
01:47B0 0000000000000000
01:47B8 0000000000000000
01:47C0 0000000000000000
01:47C8 0000000000000000
01:47D0 0000000000000000
01:47D8 0000000000000000
01:47E0 0000000000000000
01:47E8 5555555555555555
01:47F0 AAAAAAAAAAAAAAAA
01:47F8 FFFFFFFFFFFFFFFF
01:4800 0101010101010101
01:4808 0101010101010101
01:4810 0101010101010101
01:4818 0101010101010101
01:4820 0101010101010101
01:4828 0101010101010101
01:4830 0101010101010101
01:4838 0101010101010101
01:4840 0606060606060606
01:4848 0606060606060606
01:4850 06060F0F0F010101
01:4858 0101010101010101
01:4860 0101010101010101
01:4868 0101010101010101
01:4870 0101010101010101
01:4878 0101010101010101
01:4880 0101010101010101
01:4888 0101010101010101
01:4890 0101010101010101
01:4898 0101010101010101
01:48A0 0101010101010101
01:48A8 0101010101010101
01:48B0 0101010101010101
01:48B8 0101010101010101
01:48C0 0101010101010101
01:48C8 0101010101010101
01:48D0 0101010101010101
01:48D8 0101010101010101
01:48E0 0101010101010101
01:48E8 0101010101010101
01:48F0 0101010101010101
01:48F8 0101010101010101
                        	    36: 
                        	    37:         .org mazegfx
02:4BF0 E803E84327001800	    38:         .incbin assets/mazegfx,2
02:4BF8 000F0B0628001900
02:4C00 4044444444444444
02:4C08 44444A4444444444
02:4C10 4444444442202020
02:4C18 2020202020202020
02:4C20 2020202020202020
02:4C28 4553535353535353
02:4C30 5353455353535353
02:4C38 5353535345202020
02:4C40 2020200809070820
02:4C48 13030F1205202020
02:4C50 4554404442534044
02:4C58 4253455340444253
02:4C60 4044425445202020
02:4C68 2020202020202020
02:4C70 2020202020202020
02:4C78 4553414443534144
02:4C80 4353465341444353
02:4C88 4144435345202020
02:4C90 2020202020202020
02:4C98 2020202030202020
02:4CA0 4553535353535353
02:4CA8 5353535353535353
02:4CB0 5353535345202020
02:4CB8 2020202020202020
02:4CC0 2020202020202020
02:4CC8 4553404442534753
02:4CD0 4044444442534753
02:4CD8 4044425345202020
02:4CE0 2020202020202020
02:4CE8 2020202020202020
02:4CF0 4553414443534553
02:4CF8 41444A4443534553
02:4D00 4144435345202020
02:4D08 2020202020202020
02:4D10 2020202020202020
02:4D18 4553535353534553
02:4D20 5353455353534553
02:4D28 5353535345202020
02:4D30 2020202020202020
02:4D38 2020311510202020
02:4D40 4144444442534C44
02:4D48 4853465349444D53
02:4D50 4044444443202020
02:4D58 2020202020202020
02:4D60 2020202020202020
02:4D68 2020202045534520
02:4D70 2020202020204553
02:4D78 4520202020202020
02:4D80 2020202020202020
02:4D88 2020202030202020
02:4D90 2020202045534520
02:4D98 4E52525250204553
02:4DA0 4520202020202020
02:4DA8 2020202020202020
02:4DB0 2020202020202020
02:4DB8 4444444443534620
02:4DC0 4520202045204653
02:4DC8 4144444444202020
02:4DD0 2020202020202020
02:4DD8 2020202020202020
02:4DE0 2020202020532020
02:4DE8 4520202045202053
02:4DF0 2020202020202020
02:4DF8 2020202020202020
02:4E00 2020202020202020
02:4E08 4444444442534720
02:4E10 4F44444451204753
02:4E18 4044444444202020
02:4E20 2020202020202020
02:4E28 2020202020202020
02:4E30 2020202045534520
02:4E38 2020202020204553
02:4E40 4520202020202020
02:4E48 2020202020202020
02:4E50 2020202020202020
02:4E58 2020202045534520
02:4E60 4044444442204553
02:4E68 4520202020202020
02:4E70 2020202020202020
02:4E78 2020202020202020
02:4E80 4044444443534620
02:4E88 41444A4443204653
02:4E90 4144444442202020
02:4E98 2020202020202020
02:4EA0 2020202020202020
02:4EA8 4553535353535353
02:4EB0 5353455353535353
02:4EB8 5353535345202020
02:4EC0 2020202020202020
02:4EC8 2020202020202020
02:4ED0 4553494442534944
02:4ED8 4853465349444853
02:4EE0 4044485345202020
02:4EE8 2020202020202020
02:4EF0 2020202020202020
02:4EF8 4554535345535353
02:4F00 5353205353535353
02:4F08 4553535445202020
02:4F10 2020202020202020
02:4F18 2020202020202020
02:4F20 4C44485346534753
02:4F28 49444A4448534753
02:4F30 465349444D202020
02:4F38 2020202020202020
02:4F40 2020202020202020
02:4F48 4553535353534553
02:4F50 5353455353534553
02:4F58 5353535345202020
02:4F60 2020202020202020
02:4F68 2020202020202020
02:4F70 4553494444444B44
02:4F78 4853465349444B44
02:4F80 4444485345202020
02:4F88 2020202020202020
02:4F90 2020202020202020
02:4F98 4553535353535353
02:4FA0 5353535353535353
02:4FA8 5353535345202020
02:4FB0 2020202020202020
02:4FB8 2020202020202020
02:4FC0 4144444444444444
02:4FC8 4444444444444444
02:4FD0 4444444443202020
02:4FD8 2020202020202020
02:4FE0 2020202020202020
                        	    39: 
                        	    40:         .org sp0mem
03:5000 3E00007F0000FF80	    41:         .incbin assets/sprites,2
03:5008 00FF8000FF8000FF
03:5010 8000FF80007F0000
03:5018 3E00000000000000
03:5020 0000000000000000
03:5028 0000000000000000
03:5030 0000000000000000
03:5038 0000000000000087
03:5040 3E00007F0000FF80
03:5048 003F80000780003F
03:5050 8000FF80007F0000
03:5058 3E00000000000000
03:5060 0000000000000000
03:5068 0000000000000000
03:5070 0000000000000000
03:5078 0000000000000087
03:5080 7E0000FF00003F80
03:5088 000F80000780000F
03:5090 80003F8000FF0000
03:5098 7E00000000000000
03:50A0 0000000000000000
03:50A8 0000000000000000
03:50B0 0000000000000000
03:50B8 0000000000000087
03:50C0 FC00003F00000F80
03:50C8 0007800003800007
03:50D0 80000F80003F0000
03:50D8 FC00000000000000
03:50E0 0000000000000000
03:50E8 0000000000000000
03:50F0 0000000000000000
03:50F8 0000000000000087
03:5100 3E00007F0000FF80
03:5108 00FE0000F00000FE
03:5110 0000FF80007F0000
03:5118 3E00000000000000
03:5120 0000000000000000
03:5128 0000000000000000
03:5130 0000000000000000
03:5138 0000000000000087
03:5140 3F00007F8000FE00
03:5148 00F80000F00000F8
03:5150 0000FE00007F8000
03:5158 3F00000000000000
03:5160 0000000000000000
03:5168 0000000000000000
03:5170 0000000000000000
03:5178 0000000000000087
03:5180 1F80007E0000F800
03:5188 00F00000E00000F0
03:5190 0000F800007E0000
03:5198 1F80000000000000
03:51A0 0000000000000000
03:51A8 0000000000000000
03:51B0 0000000000000000
03:51B8 0000000000000087
03:51C0 220000630000F780
03:51C8 00F78000F78000FF
03:51D0 8000FF80007F0000
03:51D8 3E00000000000000
03:51E0 0000000000000000
03:51E8 0000000000000000
03:51F0 0000000000000000
03:51F8 0000000000000087
03:5200 410000C18000E380
03:5208 00E38000F78000FF
03:5210 8000FF80007F0000
03:5218 3E00000000000000
03:5220 0000000000000000
03:5228 0000000000000000
03:5230 0000000000000000
03:5238 0000000000000087
03:5240 808000808000C180
03:5248 00C18000E38000F7
03:5250 80007F00007F0000
03:5258 3E00000000000000
03:5260 0000000000000000
03:5268 0000000000000000
03:5270 0000000000000000
03:5278 0000000000000087
03:5280 3E00007F0000FF80
03:5288 00FF8000F78000F7
03:5290 8000F78000630000
03:5298 2200000000000000
03:52A0 0000000000000000
03:52A8 0000000000000000
03:52B0 0000000000000000
03:52B8 0000000000000087
03:52C0 3E00007F0000FF80
03:52C8 00FF8000F78000E3
03:52D0 8000E38000C18000
03:52D8 4100000000000000
03:52E0 0000000000000000
03:52E8 0000000000000000
03:52F0 0000000000000000
03:52F8 0000000000000087
03:5300 3E00007F00007F00
03:5308 00F78000E38000C1
03:5310 8000C18000808000
03:5318 8080000000000000
03:5320 0000000000000000
03:5328 0000000000000000
03:5330 0000000000000000
03:5338 0000000000000087
03:5340 0700001900002200
03:5348 0002000002000000
03:5350 0000000000000000
03:5358 0000000000000000
03:5360 0000000000000000
03:5368 0000000000000000
03:5370 0000000000000000
03:5378 0000000000000089
03:5380 0000000000006000
03:5388 00F00000F70000EF
03:5390 80006F80000F8000
03:5398 0700000000000000
03:53A0 0000000000000000
03:53A8 0000000000000000
03:53B0 0000000000000000
03:53B8 0000000000000082
03:53C0 1000003C00001800
03:53C8 0000000024000000
03:53D0 0000080000000000
03:53D8 0000000000000000
03:53E0 0000000000000000
03:53E8 0000000000000000
03:53F0 0000000000000000
03:53F8 0000000000000085
03:5400 0000000000006600
03:5408 00FF0000FF0000FF
03:5410 00007E00003C0000
03:5418 1800000000000000
03:5420 0000000000000000
03:5428 0000000000000000
03:5430 0000000000000000
03:5438 0000000000000082
03:5440 0B00000E00000800
03:5448 0008000000000000
03:5450 0000000000000000
03:5458 0000000000000000
03:5460 0000000000000000
03:5468 0000000000000000
03:5470 0000000000000000
03:5478 0000000000000085
03:5480 0000000000000000
03:5488 003E00007F00007F
03:5490 00007F00007F0000
03:5498 3E00000000000000
03:54A0 0000000000000000
03:54A8 0000000000000000
03:54B0 0000000000000000
03:54B8 0000000000000088
03:54C0 0000000A00000C00
03:54C8 0008000000000000
03:54D0 0000000000000000
03:54D8 0000000000000000
03:54E0 0000000000000000
03:54E8 0000000000000000
03:54F0 0000000000000000
03:54F8 0000000000000089
03:5500 0000000000000000
03:5508 007F0000FF8000FF
03:5510 8000FF80007F0000
03:5518 3600000000000000
03:5520 0000000000000000
03:5528 0000000000000000
03:5530 0000000000000000
03:5538 0000000000000082
03:5540 0000000000000000
03:5548 000800001400002A
03:5550 00005500002A0000
03:5558 1400000000000000
03:5560 0000000000000000
03:5568 0000000000000000
03:5570 0000000000000000
03:5578 000000000000008B
03:5580 2000001C00000800
03:5588 001C00003E00007F
03:5590 00007F00007F0000
03:5598 3E00000000000000
03:55A0 0000000000000000
03:55A8 0000000000000000
03:55B0 0000000000000000
03:55B8 0000000000000085
03:55C0 0800001C0000AA80
03:55C8 0088800080800041
03:55D0 0000220000000000
03:55D8 0000000000000000
03:55E0 0000000000000000
03:55E8 0000000000000000
03:55F0 0000000000000000
03:55F8 00000000000000E2
03:5600 0000000000003E00
03:5608 007F00007F00006B
03:5610 0000080000080000
03:5618 0800000000000000
03:5620 0000000000000000
03:5628 0000000000000000
03:5630 0000000000000000
03:5638 00000000000000E7
03:5640 0000000000000800
03:5648 0010000000000020
03:5650 0000200000000000
03:5658 7B00000000000000
03:5660 0000000000000000
03:5668 0000000000000000
03:5670 0000000000000000
03:5678 0000000000000086
03:5680 1C00003E00003E00
03:5688 007F00007F0000FF
03:5690 8000FF8000FF8000
03:5698 7F00000000000000
03:56A0 0000000000000000
03:56A8 0000000000000000
03:56B0 0000000000000000
03:56B8 0000000000000087
03:56C0 1C00002200003E00
03:56C8 003E000000000000
03:56D0 0000000000000000
03:56D8 0000000000000000
03:56E0 0000000000000000
03:56E8 0000000000000000
03:56F0 0000000000000000
03:56F8 000000000000008E
03:5700 0000000000000000
03:5708 0000000014000016
03:5710 00001400001A0000
03:5718 0C00000000000000
03:5720 0000000000000000
03:5728 0000000000000000
03:5730 0000000000000000
03:5738 000000000000008F
                        	    42: 


Symbols by name:
addscr                           A:0F79
bgcol                            A:0C63
bgcol0                           E:D021
blki                             E:0000
border                           E:7999
buf                              E:0016
c2ddra                           E:DD02
calcnd                           A:0BEC
charset                          E:4000
chkcol                           A:0C29
chkcon                           A:0F40
chkmov                           A:0EAA
chkne                            A:0B6F
chknn                            A:0B8D
chkpde                           A:0CCC
chkpdn                           A:0CD6
chkrve                           A:0EC9
chkrvn                           A:0ED9
chkrvw                           A:0EB7
chky                             A:0E94
ci1icr                           E:DC0D
ci1pra                           E:DC00
ci2pra                           E:DD00
cia1                             E:DC00
cia2                             E:DD00
cinv                             E:0314
clrbit                           A:0CED
clrbuf                           A:0D5D
clrzp                            A:0D41
colmem                           E:D800
coltab                           E:4800
decrem                           A:0CE3
djr0                             A:09A7
djr1                             A:09AB
djr2                             A:09AF
djr3                             A:09B3
e                                E:0005
enzrchr                          E:0054
enzrlst                          A:15A0
enzrpts                          E:0050
extcol                           E:D020
fillcolmem                       A:0957
fillmaze                         A:09D1
filloop                          A:09D5
findpel                          A:0A0E
finfil                           A:0A0D
finirq                           A:0D0A
finmov                           A:0CE5
fiprsc                           A:0900
fpckde                           A:0A47
fpckdn                           A:0A81
fpds                             A:0AB2
fpinrow                          A:0B10
fprixn                           A:0AFE
fprixs                           A:0AEC
frtena                           E:00A9
frtsptbl                         A:1601
frxpos                           E:0067
frypos                           E:00A2
gameloop                         A:0E6B
gsthmnd                          E:001E
hidefrt                          A:1062
initpac                          A:0E2F
initvic                          A:0927
irqblki                          E:0005
irqmsk                           E:D01A
irqtmp                           E:001F
irqwrd1                          E:001B
irqwrd2                          E:001D
isenzr                           A:0B2C
joybtn                           E:0020
joyx                             E:0021
joyy                             E:0022
linclr                           E:00F8
linmov                           E:0001
linset                           E:00FE
lpprsc                           A:088E
lvlend                           E:009B
lvlfrtpts                        A:0F97
lvlfrtspix                       A:0FBA
lvlfrtspof                       A:0FD5
lvlnum                           E:00A8
maxftx                           E:0048
maxmen                           E:0003
maxpell                          E:00B6
mazegfx                          E:4BF0
move                             A:0E8D
movpac                           A:0CBC
movs                             A:0EA6
mula5                            A:0819
mula6                            A:0842
n                                E:0002
newgame                          A:0D10
nextlvl                          A:0D2A
nmenrem                          E:00A7
nodeadr                          A:0B3C
nodetbl                          A:106F
npelrem                          E:00A6
nxl                              A:080B
pacalste                         A:15B6
pacalstn                         A:15A4
pacalsts                         A:15AA
pacalstw                         A:15B0
pacdir                           E:00A3
pacdis                           E:00A4
pacrem                           E:00A5
pacsrc                           E:009E
pacstnd                          E:0031
pactar                           E:009F
pds                              A:0CE0
pelfound                         A:0ADC
pelladr                          A:09BE
pellchr                          E:0053
pellpts                          E:0010
pelltbl                          A:120D
pelnotfd                         A:0AE3
plrowix                          A:15BC
printchr                         A:0914
printcol                         A:0901
printlvl                         A:0DD6
printmen                         A:0D6C
printscr                         A:0878
procirq                          A:0C1F
rasirq                           A:0CB1
raster                           E:D012
rdinpt                           A:0E7B
readjoy2                         A:099C
reverse                          A:0EF2
revs                             A:0EE9
rmpel                            A:0C83
s                                E:0003
scnmem                           E:4C00
score                            E:00FC
screnzr                          A:0F6C
scrfrt                           A:0F53
scrmsdi                          E:0185
scroly                           E:D011
scrpel                           A:0F5F
setbit                           A:0CFD
setcol1                          A:0959
setcol2                          A:096A
setcol3                          A:097B
setcol4                          A:098C
setnds                           A:0BC0
setnodis                         A:0B4F
setnsrc                          A:0F0A
setupirq                         A:0BFB
showfrt                          A:0FF6
sp0col                           E:D027
sp0loc                           E:0040
sp0mem                           E:5000
sp0ptr                           E:4FF8
sp0x                             E:D000
sp0y                             E:D001
sp1x                             E:D002
sp1y                             E:D003
sp2x                             E:D004
sp2y                             E:D005
sp3x                             E:D006
sp3y                             E:D007
sp4x                             E:D008
sp4y                             E:D009
sp5x                             E:D00A
sp5y                             E:D00B
spbgcl                           E:D01F
spcechr                          E:0020
spcol                            A:0C4E
spena                            E:D015
spspcl                           E:D01E
sysirq                           E:EA7E
tmp                              E:001A
vic                              E:D000
vicirq                           E:D019
vmcsb                            E:D018
w                                E:0004
warp                             A:0BF4
wrd1                             E:0016
wrd2                             E:0018
wrpnixe                          E:0021
wrpnixw                          E:001B

Symbols by value:
0000 blki
0001 linmov
0002 n
0003 maxmen
0003 s
0004 w
0005 e
0005 irqblki
0010 pellpts
0016 buf
0016 wrd1
0018 wrd2
001A tmp
001B irqwrd1
001B wrpnixw
001D irqwrd2
001E gsthmnd
001F irqtmp
0020 joybtn
0020 spcechr
0021 joyx
0021 wrpnixe
0022 joyy
0031 pacstnd
0040 sp0loc
0048 maxftx
0050 enzrpts
0053 pellchr
0054 enzrchr
0067 frxpos
009B lvlend
009E pacsrc
009F pactar
00A2 frypos
00A3 pacdir
00A4 pacdis
00A5 pacrem
00A6 npelrem
00A7 nmenrem
00A8 lvlnum
00A9 frtena
00B6 maxpell
00F8 linclr
00FC score
00FE linset
0185 scrmsdi
0314 cinv
080B nxl
0819 mula5
0842 mula6
0878 printscr
088E lpprsc
0900 fiprsc
0901 printcol
0914 printchr
0927 initvic
0957 fillcolmem
0959 setcol1
096A setcol2
097B setcol3
098C setcol4
099C readjoy2
09A7 djr0
09AB djr1
09AF djr2
09B3 djr3
09BE pelladr
09D1 fillmaze
09D5 filloop
0A0D finfil
0A0E findpel
0A47 fpckde
0A81 fpckdn
0AB2 fpds
0ADC pelfound
0AE3 pelnotfd
0AEC fprixs
0AFE fprixn
0B10 fpinrow
0B2C isenzr
0B3C nodeadr
0B4F setnodis
0B6F chkne
0B8D chknn
0BC0 setnds
0BEC calcnd
0BF4 warp
0BFB setupirq
0C1F procirq
0C29 chkcol
0C4E spcol
0C63 bgcol
0C83 rmpel
0CB1 rasirq
0CBC movpac
0CCC chkpde
0CD6 chkpdn
0CE0 pds
0CE3 decrem
0CE5 finmov
0CED clrbit
0CFD setbit
0D0A finirq
0D10 newgame
0D2A nextlvl
0D41 clrzp
0D5D clrbuf
0D6C printmen
0DD6 printlvl
0E2F initpac
0E6B gameloop
0E7B rdinpt
0E8D move
0E94 chky
0EA6 movs
0EAA chkmov
0EB7 chkrvw
0EC9 chkrve
0ED9 chkrvn
0EE9 revs
0EF2 reverse
0F0A setnsrc
0F40 chkcon
0F53 scrfrt
0F5F scrpel
0F6C screnzr
0F79 addscr
0F97 lvlfrtpts
0FBA lvlfrtspix
0FD5 lvlfrtspof
0FF6 showfrt
1062 hidefrt
106F nodetbl
120D pelltbl
15A0 enzrlst
15A4 pacalstn
15AA pacalsts
15B0 pacalstw
15B6 pacalste
15BC plrowix
1601 frtsptbl
4000 charset
4800 coltab
4BF0 mazegfx
4C00 scnmem
4FF8 sp0ptr
5000 sp0mem
7999 border
D000 sp0x
D000 vic
D001 sp0y
D002 sp1x
D003 sp1y
D004 sp2x
D005 sp2y
D006 sp3x
D007 sp3y
D008 sp4x
D009 sp4y
D00A sp5x
D00B sp5y
D011 scroly
D012 raster
D015 spena
D018 vmcsb
D019 vicirq
D01A irqmsk
D01E spspcl
D01F spbgcl
D020 extcol
D021 bgcol0
D027 sp0col
D800 colmem
DC00 ci1pra
DC00 cia1
DC0D ci1icr
DD00 ci2pra
DD00 cia2
DD02 c2ddra
EA7E sysirq
